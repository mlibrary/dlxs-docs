= Findaid Class Collection Implementation (brief version) =

== [../index.html DLXS Workshop] ==

==== Findaid Class Instructor '''Tom Burton-West''' ====

This portion of the DLXS Workshop focuses on implementing a collection in the Findaid Class. Since many of the steps in implementing a Findaid Class collection are very similar to implementing a Text Class collection, the emphasis at the workshop will be on the differences between Text Class and Findaid Class and on dealing with practical implementation issues. Since EAD encoding practices vary widely we will highlight issues arising from different encoding practices and how to resolve them.

This document provides a relatively brief overview of encoding, data prep and indexing issues. A more detailed version of this document which includes descriptions of commonly occuring problems and solutions as well as more in depth discussion is [fcoutline.html Findaid Class workshop details]

<span class="sectionheader">''More general documentation: ''[http://www.dlxs.org/docs/13/class/findaid/index.html Findaid Class][http://www.dlxs.org/docs/13/class/findaid/pis.html ]</span>

----

* Overview
* Comparison with Text Class
* [#FindaidEncodingPractices Findaid Class Encoding Practices and Processes]
** [#ead2002DTDOverview EAD 2002 DTD Overview]
** [#PracticalEADEncodingIssues Practical EAD Encoding Issues]
** [#DataPrep Data Preparation]
* [#FindaidClassIndexBuildingwithXPAT Findaid Class Index Building with XPAT]
** [#SetupDirectoriesforXPATIndex Set Up Directories and Files for XPAT Indexing]
** [#BuildtheXPATIndex Build the XPAT Index]
** [#FabRegions Fabricated Regions in FindaidClass]
* [./fcoutline.html#FindaidClassCollectiontoWeb Findaid Class Collection to Web]
** [./fcoutline.html#ReviewtheCollectionDatabaseEntrywithCollMgr Review the Collection Database Entry with CollMgr ]
** [./fcoutline.html#ReviewtheGroupsDatabaseEntrywithCollMgr Review the Groups Database Entry with CollMgr]
** [./fcoutline.html#MakeCollectionmaps Make Collection Map]
** [./fcoutline.html#SetuptheCollectionsWebDirectory Set Up the Collection's Web Directory]
** [./fcoutline.html#TryItOut Try It Out]
* [./fcoutline.html#linking Linking from Finding Aids Using the ID Resolver]

== Findaid Class Encoding Practices and Processes ==

[#Top go to table of contents]

In Findaid Class Encoding Practices and Processes we discuss the elements and attributes required for "out of the box" Findaid Class delivery, various encoding issues, and preparing the work environment and validating the data.

----

=== EAD 2002 DTD Overview ===

These instructions assume that you have already encoded your finding aids files in the XML-based [http://www.loc.gov/ead/ EAD 2002 DTD]If you have finding aids encoded using the older EAD 1.0 standard or are using the SGML version of EAD2002, you will need to convert your files to the XML version of EAD2002.

The EAD standard was designed as a “loose” standard in order to accommodate the large variety in local practices for paper finding aids and make it easy for archives to convert from paper to electronic form.  As a result, conformance with the EAD standard still allows a great deal of variety in encoding practices.

The DLXS software is primarily designed as a system for mounting University of Michigan collections.  In the case of finding aids, the software has been designed to accommodate the encoding practices of the Bentley Historical Library. The more similar your data and setup is to the Bentley’s, the easier is will be to integrate your finding aids collection with DLXS.  If your practices differ significantly from the Bentley’s, you will probably need to do some preprocessing of your files and/or modifications to various files in DLXS.  We have found that the largest number of issues in implementing Findaid Class for member institutions is dealing with differences in encoding practices. Much of the following material will cover various issues that commonly arise.

----

=== Practical EAD Encoding Issues ===

There are a number of encoding issues that may affect the data preparation, indexing, searching, and rendering of your finding aids. Some of them are:

* [fc_char.html Character Encoding issues]
* [fc_ids Attribute ids must be unique within the entire collection ]
* If you use attribute ids and corresponding targets within your EADs preparedocs.pl may need to be modified.
* &lt;eadid&gt; should be less than about 20 characters in length
* UTF-8 Byte Order Marks (BOM) should be removed from EADs prior to concatenation
* XML processing instructions should be removed from EADs prior to concatenation
* Multiline DOCTYPE declarations are currently not properly handled by the data prep scripts
* If your DOCTYPE declaration contains entitys, you need to modify the appropriate *inp files accordingly
* Out-of-the-box &lt;dao&gt; handling may need to be modified for your needs
* If your &lt;unititle&gt; element precedes your &lt;origination&gt; element in <span class="unixcommand">the top level &lt;did&gt;, you will have to modify the maintitle fabricated region query in xxx.extra.srch </span>
* If you have encoded &lt;unitdate&gt;s as siblings of &lt;unittitle&gt;s, you may have to modify the appropriate XSL templates
* If you do not use a &lt;frontmatter&gt; element, you will have to make modifications to various files to provide an appropriate "Title Page" region based on the &lt;eadheader&gt;
* If your encoding practices for &lt;biohist&gt; differ from the Bentley's, you may need to make changes in findaidclass.cfg or create a subclass of FindaidClass and override FindaidClass:: GetBioghistTocHead, and/or change the appropriate XSL files.
* If you want &lt;relatedmaterial&gt;,&lt;separatedmaterial&gt; to show up in the table of contents (TOC) on the left hand side of the Finding Aids, you may have to modify findaidclass.cfg and make other modifications to the code. This also applies if there are other sections of the finding aid not listed in the out-of-the-box findaidclass.cfg %gSectHeadsHash.
* If you want the middleware to use the &lt;head&gt; element for labeling sections instead of the default hard-coded values in findaidclass.cfg, you may need to make changes to the XSL and possibly modify other files.

----

=== Data Preparation ===

For today, we are going to be working with some texts that are already in Findaid Class. We will be building them into a collection we are going to call '''workshopfa'''.

This documentation will make use of the concept of the <span class="unixcommand">$[../overview/dirstructure.html DLXSROOT]</span>, which is the place at which your DLXS directory structure starts. We generally use <span class="unixcommand">/l1/</span>, but for the workshop, we each have our own <span class="unixcommand">$DLXSROOT</span> in the form of <span class="unixcommand">/l1/workshop/userX/dlxs/</span>. To check your <span class="unixcommand">$DLXSROOT</span>, type the following commands at the command prompt:

<blockquote>

 cd $DLXSROOT<br />pwd

</blockquote>

The <span class="unixcommand">prep</span> directory under <span class="unixcommand">$DLXSROOT</span> is the space for you to take your encoded finding aids and "package them up" for use with the DLXS middleware. Create your basic directory <span class="unixcommand">$DLXSROOT/prep/w/workshopfa</span> and its <span class="unixcommand">data</span> subdirectory and then copy sample data files into the newly created subdirectory with the following commands:

<blockquote>

 
 mkdir -p $DLXSROOT/prep/w/workshopfa/data
 cd $DLXSROOT/prep/w/workshopfa
 cp $DLXSROOT/prep/s/samplefa/data/*.xml $DLXSROOT/prep/w/workshopfa/data/.

</blockquote>

We'll also need a few files to get us started working. They will need to be copied over as well, and also have paths adapted and collection identifiers changed. Follow these commands:

<blockquote>

 
 cp $DLXSROOT/prep/s/samplefa/validateeach.csh $DLXSROOT/prep/w/workshopfa/.
 cp $DLXSROOT/prep/s/samplefa/samplefa.xml.inp $DLXSROOT/prep/w/workshopfa/workshopfa.xml.inp
 cp $DLXSROOT/prep/s/samplefa/samplefa.text.inp $DLXSROOT/prep/w/workshopfa/workshopfa.text.inp
 mkdir -p $DLXSROOT/obj/w/workshopfa
 mkdir -p $DLXSROOT/bin/w/workshopfa
 cp $DLXSROOT/bin/s/samplefa/preparedocs.pl $DLXSROOT/bin/w/workshopfa/.
 cp $DLXSROOT/bin/s/samplefa/Makefile $DLXSROOT/bin/w/workshopfa/Makefile

</blockquote>

Now you'll need to edit these files to ensure that the paths match your <span class="unixcommand">$DLXSROOT</span> and that the collection name is ''workshopfa'' instead of ''samplefa''.

''STOP!! Make sure you edit the files before going to the next steps!! ''

Make sure you change these files:

* $DLXSROOT/prep/w/workshopfa/validateeach.csh
* $DLXSROOT/bin/w/workshopfa/Makefile (see below for details)

You can run this command to check to see if you forgot to change samplefa to workshopfa:

 grep "samplefa" $DLXSROOT/bin/w/workshopfa/* $DLXSROOT/prep/w/workshopfa/* |grep -v "#"

With the ready-to-go ead2002 encoded finding aids files in the <span class="unixcommand">data</span> directory, we are ready to begin the preparation process. This will include:

# [#DataPrepStep1 validating the files individually] against the EAD ''2002'' DTD<br />'''make validateeach'''<br />
# [#DataPrepStep2 concatenating the files into one larger XML file]<br />'''make prepdocs'''<br />
# [#DataPrepStep3 validating the concatenated file] against the ''dlxsead2002'' DTD:<br />'''make validate'''<br />
# [#DataPrepStep4 "normalizing" the concatenated file.]<br />'''make norm'''<br />
# [#DataPrepStep5 validating the normalized concatenated file against the ''dlxsead2002'' DTD]<br />'''make validate'''<br />

These steps are generally handled via the <span class="unixcommand">Makefile</span> in <span class="unixcommand">$DLXSROOT/bin/s/samplefa</span> which we have copied to $DLXSROOT/bin/w/workshopfa. To see the Makefile and how it is used, [makefile.html click here].

Make sure you changed your copy of the Makefile to reflect '''"/w/workshopfa"''' instead of '''"/s/samplefa"'''. You will want to change lines 2 and 3 accordingly:

 
    1  
    2  NAMEPREFIX = samplefa
    3  FIRSTLETTERSUBDIR = s

Tip: Be sure not to add any space after the workshopfa or w.

If you are doing this at your home institution you will also want to make sure you change $DLXSROOT, and the locations of the various binaries to match your installation. We will not need to do this for the workshop.

''These changes do not apply for the workshop''
* Change $DLXSROOT /l1/dev/userxx to your $DLXSROOT on every line that uses it
* Change XPATBINDIR = /l/local/bin/ to the location of the <span class="unixcommand">xpat</span> binary in your installation
* Change the location of the <span class="unixcommand">osx</span> binary from <span class="unixcommand">'''<br />OSX = /l/local/bin/osx'''</span><br />to the location in your installation
* Change the location of the <span class="unixcommand">osgmlnorm</span> binary from
 OSGMLNORM = /l/local/bin/osgmlnorm
 to the location in your installation

----

'''Step 1: Validating the files individually against the EAD 2002 DTD'''

<blockquote>

 cd $DLXSROOT/bin/w/workshopfa
 make validateeach
 
 
 The Makefile runs the following command:
 % /l1/workshop/userXX/dlxs/prep/w/workshopfa/validateeach.csh

</blockquote>

What's happening: The makefile is running the c-shell script [validateeach.html validateeach.sh] in the prep directory. The script creates a temporary file without the public DOCTYPE declaration, runs <span class="unixcommand">onsgmls</span> on each of the resulting XML files in the <span class="unixcommand">data</span> subdirectory to make sure they conform with the EAD 2002 DTD. If validation errors occur, error files will be in the <span class="unixcommand">data</span> subdirectory with the same name as the finding aids file but with an extension of <span class="unixcommand">.err</span>. If there are validation errors, fix the problems in the source XML files and re-run.

Check the error files by running the following commands

<blockquote>

  ls -l $DLXSROOT/prep/w/workshopfa/data/*err

 if there are any *err files, you can look at them with the following command: </blockquote><blockquote>

  less  $DLXSROOT/prep/w/workshopfa/data/*err

</blockquote>

There are not likely to be any errors with the '''workshopfa''' data, but tell the instructor if there are.

----

'''Step 2: Concatentating the files into one larger XML file (and running some preprocessing commands) '''

<blockquote>

 
 cd $DLXSROOT/bin/w/workshopfa
 make prepdocs

</blockquote><blockquote>

 The Makefile runs the following command:
 $DLXSROOT/bin/w/workshopfa/preparedocs.pl $DLXSROOT/prep/w/workshopfa/data $DLXSROOT/obj/w/workshopfa/workshopfa.xml $DLXSROOT/prep/w/workshopfa/logfile.txt

 This runs the preparedocs.pl script on all the files in the specified data directory and writes the output to the workshopfa.xml file in the appropriate /obj subdirectory. It also outputs a logfile to the /prep directory:</blockquote>

The Perl script does two sets of things:

# Concatenates all the files
# Runs a number of preprocessing steps on all the files

'''Concatenating the files '''

The script finds all XML files in the <span class="unixcommand">data</span> subdirectory,and then strips off and xml declaration and doctype declaration from each file before concatenating them together. It also wraps the concatenated EADs in a &lt;COLL&gt; tag . The end result looks like:

 
 &lt;COLL&gt;<br />&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />&lt;/COLL&gt;

'''Preprocessing steps'''

The perl program also does some preprocessing on all the files. These steps are customized to the needs of the Bentley. You should look at the perl code and modify it so it is appropriate for your encoding practices.

The preprocessing steps are:

* finds all id attributes and prepends a number to them
* adds a prefix string "dao-bhl" to all DAO links (You probably will want to change this)
* removes empty <span class="unixcommand">persname</span>, <span class="unixcommand">corpname</span>, and <span class="unixcommand">famname</span> elements

The output of the combined concatenation and preprocessing steps will be the one collection named xml file which is deposited into the obj subdirectory.

'''Step 3: Validating the concatenated file against the dlxsead2002 DTD'''

<blockquote>

 make validate

 The Makefile runs the following command:
 onsgmls -wxml -s -f $DLXSROOT/prep/w/workshopfa/workshopfa.errors $DLXSROOT/misc/sgml/xml.dcl $DLXSROOT/prep/w/workshopfa/workshopfa.xml.inp $DLXSROOT/obj/w/workshopfa/workshopfa.xml

</blockquote>

This runs the onsgmls command against the concatenated file using the dlxs2002dtd, and writes any errors to the workshopfa.errors file in the appropriate subdirectory in $DLXSROOT/prep/c/collection.. More details

Note that we are running this using <span class="unixcommand">'''workshopfa.xml.inp'''</span> not <span class="unixcommand">'''workshop.text.inp'''</span>. The '''workshopfa.xml.inp '''file points to '''$DLXSROOT/misc/sgml/dlxsead2002.ead''' which is the ''dlxsead2002'' DTD. The ''dlxsead2002'' DTDis exactly the same as the ''EAD2002'' DTD, but adds a wrapping element, <span class="unixcommand">&lt;COLL&gt;</span>, to be able to combine more than one <span class="unixcommand">ead</span> element, more than one finding aid, into one file. The larger file will be indexed with XPAT tomorrow. It is, of course, a good idea to validate the file now before going further.

ls -l $DLXSROOT/prep/w/workshopfa/workshopfa.errors

<blockquote>

 $ less $DLXSROOT/prep/w/workshopfa/workshopfa.errors<br />
 

</blockquote>

'''Step 4: Normalizing the concatenated file'''

<blockquote>

 make norm

 
 The Makefile runs a series of copy statements and two main commands:
 1.)   /l/local/bin/osgmlnorm -f $DLXSROOT/prep/s/samplefa/samplefa.errors $DLXSROOT/misc/sgml/xml.dcl $DLXSROOT$DLXSROOT/prep/s/samplefa/samplefa.xml.inp $DLXSROOT/obj/s/samplefa/samplefa.xml.prenorm &gt; /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm

 2.)   /l/local/bin/osx -bUTF-8 -xlower -xempty -xno-nl-in-tag -f /l1/dev/tburtonw/prep/s/samplefa/samplefa.errors /l1/dev/tburtonw/misc/sgml/xml.dcl /l1/dev/tburtonw/prep/s/samplefa/samplefa.xml.inp /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm &gt; /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm.osx 

</blockquote>

These commands ensure that your collection data is normalized. What this means is that any attributes are put in the order in which they were defined in the DTD. Even though your collection data is XML and attribute order should be irrelevant (according to the XML specification), due to a bug in one of the supporting libraries used by xmlrgn (part of the indexing software), attributes must appear in the order that they are definded in the DTD. If you have "out-of-order" attributes and don't run make norm, you will get ''"invalid endpoints"'' errors during the make post step.

Step one, which normalizes the document writes its errors to <span class="unixcommand">$DLXSROOT/prep/s/samplefa/samplefa.errors</span>. Be sure to check this file.

Step 2, which runs osx to convert the normalized document back into XML produces lots of error messages which are written to standard output. These can generally be ignored.

'''Step 5: Validating the normalized file against the dlxsead2002 DTD'''

<blockquote>

 make validate

</blockquote>

We run this step again to make sure that the normalization process did not produce an invalid document. This is necessary because under some circumstances the "make norm" step can result in invalid XML. One known cause of this is the presense of XML processing instructions. For example: '''"&lt;?Pub Caret1?&gt;"'''.

=== ''More Documentation'' ===

* [http://www.dlxs.org/docs/13/class/findaid/dtd.html The Findaid Class DTD]
* [http://www.dlxs.org/docs/13/class/findaid/prep.html Preparation for Index Building (Finding Aids)]

== <span class="dayheader"> </span>Findaid Class Index Building with XPAT ==

[#Top go to table of contents]

In this section the '''workshopfa''' XML will be indexed with the XPAT search engine, preparing it for use with the DLXS middleware.

----

=== Set Up Directories and Files for XPAT Indexing ===

First, we need to create the rest of the directories in the '''workshopfa''' environment with the following commands:

<blockquote>

 mkdir -p $DLXSROOT/idx/w/workshopfa

</blockquote>

The <span class="unixcommand">bin</span> directory we created yesterday holds any scripts or tools used for the collection specifically; <span class="unixcommand">obj</span> ( created earlier) holds the "object" or XML file for the collection, and <span class="unixcommand">idx</span> holds the XPAT indexes. Now we need to finish populating the directories.

<blockquote>

 <br />cp $DLXSROOT/prep/s/samplefa/samplefa.blank.dd $DLXSROOT/prep/w/workshopfa/workshopfa.blank.dd<br />cp $DLXSROOT/prep/s/samplefa/samplefa.extra.srch $DLXSROOT/prep/w/workshopfa/workshopfa.extra.srch

</blockquote>

'''Each of these files need to be edited '''to reflect the new collection name and the paths to your particular directories. This will be true when you use these at your home institution as well, even if you use the same directory architecture as we do, because they will always need to reflect the unique name of each collection. Failure to change even one file can result in puzzling errors, because the scripts ''are'' working, just not necessarily in the directories you are looking at.

grep -l "samplefa" <span class="unixcommand">$DLXSROOT/prep/w/workshopfa/</span><nowiki>*</nowiki>

will check for changing s/samplefa to w/workshopfa. If you are at the workshop that should be all you need. However if you are doing this at your home institution you need to replace "/l1/" by whatever $DLXSROOT is on your server. If you don't have an /l1 directory on your server (which is very likely if you are not here using a DLPS machine) you can check with:

grep -l "l1" <span class="unixcommand">$DLXSROOT/prep/w/workshopfa/</span><nowiki>*</nowiki>

----

=== Build the XPAT Index ===

Everything is now set up to build the XPAT index. The <span class="unixcommand">Makefile</span> in the <span class="unixcommand">bin</span> directory contains the commands necessary to build the index, and can be executed easily.

To create an index for use with the Findaid Class interface, you will need to index the words in the collection, then index the XML (the structural metadata, if you will), and then finally "fabricate" structures based on a combination of elements (for example, defining who the "main author" of a finding aid is, without adding a <span class="unixcommand">&lt;mainauthor&gt;</span> tag around the appropriate <span class="unixcommand">&lt;author&gt;</span> in the <span class="unixcommand">eadheader</span> element). The following commands can be used to make the index:

'''make singledd''' indexes words for texts that have been concatenated into on large file for a collection. This is the recommended process.

'''make xml''' indexes the XML structure by reading the DTD. Validates as it indexes.

'''make post''' builds and indexes fabricated regions based on the XPAT queries stored in the workshopfa.extra.srch file.

<blockquote>

 cd $DLXSROOT/bin/w/workshopfa
 make singledd

</blockquote><blockquote>

 cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.blank.dd
 	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
 /l/local/xpat/bin/xpatbld -m 256m -D /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
 cp /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
 	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.presgml.dd

</blockquote><blockquote>

 make xml

</blockquote><blockquote>

 cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.presgml.dd
 	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
 /l/local/xpat/bin/xmlrgn -D /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
 	/l1/workshop/test02/dlxs/misc/sgml/xml.dcl
 	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.inp
 	/l1/workshop/test02/dlxs/obj/w/workshopfa/workshopfa.xml
 
 cp /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
 	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.prepost.dd

</blockquote><blockquote>

 make post

</blockquote><blockquote>

 cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.prepost.dd
 	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
 touch /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.init
 /l/local/xpat/bin/xpat -q /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
 	&lt; /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.srch
 	| /l1/workshop/test02/dlxs/bin/t/text/output.dd.frag.pl
 	/l1/workshop/test02/dlxs/idx/w/workshopfa/
 	&gt; /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.dd
 /l1/workshop/test02/dlxs/bin/t/text/inc.extra.dd.pl
 	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.dd
 	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd

</blockquote>
----

=== Testing the index ===

At this point it is a good idea to do some testing of the newly created index. Invoke xpat with the following commands

 xpatu $DLXSROOT/idx/w/workshopfa/workshopfa.dd

Try searching for some likely regions. Its a good idea to test some of the fabricated regions. Here are a few sample queries:

 &gt;&gt; region "ead"
   1: 3 matches
 
 &gt;&gt; region "eadheader"
   2: 3 matches
 
 &gt;&gt; region "mainauthor"
   3: 3 matches
 
 &gt;&gt; region "maintitle"
   4: 3 matches
 
 &gt;&gt; region "admininfo"
   5: 3 matches
 

----

=== Fabricated Regions in FindaidClass ===

The make post step and the testing steps above leads us into a discussion of the use of '''fabricated regions''' in FindaidClass. uses the <span class="unixcommand">workshopfa.extra.srch</span> file to add to the XPAT index. The Makefile in the bin directory conta

"Fabricated" is a term we use to describe what are essentially virtual regions in an XPat indexed text. See a [../xpat/fabregions.html basic description of what a fabricated region is and how they are created].

In Finding Aids, we use fabricated regions for certain uninteresting regions simply so that some code can be shared. For example, the fabricated region "main" is set to refer to <span class="unixcommand">&lt;ead&gt;</span> in FindaidClass with:

 (region ead); {exportfile "/l1/idx/b/bhlead/main.rgn"}; export; ~sync "main";

whereas in TextClass "main" can refer to <span class="unixcommand">&lt;TEXT&gt;</span>. Therfore, both FindaidClass and TextClass can share the Perl code, in a higher level subclass, that creates searches for "main".

Other fabricated regions are used for searching such as the maintitle and mainauthor regions.

The majority of the fabricated regions for Findaid Class are used for the creation and display of the left hand table of contents in the "outline" view. The findaidclass.cfg file contains a hash called %gSectHeadsHash which is normally loaded into FindaidClass.pm's tocheads hash in the FindaidClass::_initialize method. The elements of the hash and the corresponding fabiricated regions are used to create the table of contents and to output the XML for the corresponding section of the EAD when one of the TOC links is clicked on by a user. The fabricated regions are used so XPAT can have binary indexes ready to use for fast retrieval of these EAD sections.

Some of the more interesting regions extracted from the samplefa.extra.srch file are listed below.

One of these regions is the add. This used to be <span class="unixcommand">&lt;ADD&gt;</span> in the EAD 1.0 DTD, but now, is created based on the ead2002 DTD's <span class="unixcommand">&lt;descgrp&gt;</span> tag which contains a <span class="unixcommand">type</span> attribute of <span class="unixcommand">add</span>.

A number of issues related to varying encoding practices can be resolved by the appropriate edits to the *.extra.srch file. (Although some of them may require changes to other files as well)

* If your &lt;unititle&gt; element precedes your &lt;origination&gt; element in <span class="unixcommand">the top level &lt;did&gt;, you will have to modify the "maintitle" fabricated region query in *.extra.srch </span>
* If you do not use a &lt;frontmatter&gt; element, you will have to make modifications to various files including modifying *.extra.srch to provide an appropriate "Title Page" region based on the &lt;eadheader&gt;
* If your encoding practices for &lt;biohist&gt; differ from the Bentley's, you may need to make changes in the &lt;bioghist&gt; fabricated region although changes to other files may be suffient. The changes might include: modifying findaidclass.cfg or creating a subclass of FindaidClass and override FindaidClass:: GetBioghistTocHead, and/or changing the appropriate XSL files.
* If you want sections of the finding aid that are not completely within a well-defined element such as &lt;relatedmaterial&gt;or &lt;separatedmaterial&gt; to show up in the table of contents, you may have to create a fabricated region using the appropriate xpat query and then modify findaidclass.cfg and make other modifications to the code.

----
<blockquote>

 
 
 
   (region ead); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/main.rgn"}; export; ~sync "main";
    
     ##
     (((region "&lt;c01".."&lt;/did&gt;" + region "&lt;c02".."&lt;/did&gt;" + region "&lt;c03".."&lt;/did&gt;" + region "&lt;c04".."&lt;/did&gt;" + region "&lt;c05".."&lt;/did&gt;" + region "&lt;c06".."&lt;/did&gt;" + region "&lt;c07".."&lt;/did&gt;" + region "&lt;c08".."&lt;/did&gt;" + region "&lt;c09".."&lt;/did&gt;") not incl ("level=file" + "level=item")) incl "level="); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/c0xhead.rgn"}; export; ~sync "c0xhead";
        ##
     ((region "&lt;origination".."&lt;/unittitle&gt;") within ((region did within region archdesc) not within region dsc)); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/maintitle.rgn"}; export; ~sync "maintitle";
     ##
        
     ((region "persname" + region "corpname" + region "famname" + region "name") within (region "origination" within ( region "did" within (region "archdesc")))); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/mainauthor.rgn"}; export; ~sync "mainauthor";
     ##
    
     (region "abstract" within ((region did within region archdesc) not within region "c01")); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/mainabstract.rgn"}; export; ~sync "mainabstract";
        ##
        ((region unitdate incl "encodinganalog=245$f") within ((region did within region archdesc) not within region dsc)); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/colldate.rgn"}; export; ~sync "colldate";
     ##
     
     (region dsc); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/contentslist.rgn"}; export; ~sync "contentslist";
     ##
      ########## admininfo ########
     admininfot = (region "descgrp-T" incl (region "A-type" incl "admin")); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/admininfo-t.rgn"}; export; ~sync "admininfo-t";
     ##
     ## ########## add ######
     addt = (region "descgrp-T" incl (region "A-type" incl "add")); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/add-t.rgn"}; export; ~sync "add-t";
   ## ########## frontmatter/titlepage ########
   frontmattert = region "frontmatter-T"; {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/frontmatter-t.rgn"}; export; ~sync "frontmatter-t";
     ##
     # frontmatter itself not needed as fabricated region since it exists
     # as a regular xml region
     ##
   ## ########## bioghist ########
     bioghist = ((region "bioghist" within region "archdesc") not within region "dsc"); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/bioghist.rgn"}; export; ~sync "bioghist";
     
   ##bioghisthead = ((region "&lt;bioghist" .. "&lt;/head&gt;" within region "archdesc") not within region "dsc"); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/bioghisthead.rgn"}; export; ~sync "bioghisthead";
     ##
   ((region did within region archdesc) not within region dsc); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/summaryinfo.rgn"}; export; ~sync "summaryinfo";;
     ##
   ##
   #############################
   (region "subject" + region "corpname" + region "famname" + region "name" + region "persname" + region "geogname"); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/subjects.rgn"}; export; ~sync "subjects";
   (region "corpname" + region "famname" + region "name" + region "persname"); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/names.rgn"}; export; ~sync "names";
   
    
   #(region "odd-T" ^ (region odd not within region dsc)); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/odd-t.rgn"}; export; ~sync "odd-t";  
 

</blockquote>

See a [bhl.extra.srch.txt full listing of the <span class="unixcommand">extra.srch</span> file of the Bentley Historical Library's finding aids].

=== ''More Documentation'' ===

* [http://www.dlxs.org/docs/13/class/findaid/indexing.html Indexing the Collection]
* [http://www.dlxs.org/docs/13/class/findaid/fabrgn.html Fabricated regions in Findaid Class]

==  ==
