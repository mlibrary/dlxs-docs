head	1.16;
access;
symbols;
locks
	tburtonw:1.16; strict;
comment	@# @;


1.16
date	2008.08.04.21.57.37;	author tburtonw;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.04.15.16.10;	author tburtonw;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.01.19.14.54;	author tburtonw;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.30.22.16.24;	author tburtonw;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.30.21.36.32;	author tburtonw;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.30.15.18.10;	author tburtonw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.30.15.01.06;	author tburtonw;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.29.22.42.11;	author tburtonw;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.28.21.34.07;	author tburtonw;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.28.16.26.28;	author tburtonw;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.25.23.31.13;	author tburtonw;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.25.22.23.03;	author tburtonw;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.30.21.11.31;	author tburtonw;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.19.18.50.06;	author tburtonw;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.09.19.48.13;	author tburtonw;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.02.16.00.17;	author tburtonw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@added better links for customizing section
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta name="generator" content=
  "HTML Tidy for Linux/x86 (vers 1st May 2004), see www.w3.org" />

  <title>Findaid Class Collection Implementation</title>
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
  <link rel="stylesheet" href="../styles.css" type="TEXT/CSS" />
<style type="text/css">
/*<![CDATA[*/
<!--
body {
        margin-left: 10px;
        margin-top: 5px;
        margin-right: 10px;
        margin-bottom: 5px;
}

pre.tomcommand{

        font-weight: normal;
        color: green;
    
    
}
span.tomcommand{
        font-family: Arial, Helvetica, sans-serif;
        font-weight: bold;
}
-->
/*]]>*/
</style>
<!--$Id: fcoutline.html,v 1.15 2008/08/04 15:16:10 tburtonw Exp tburtonw $-->
</head>

<body bgcolor="#FFFFCC" class="mainpalette">
  <p>&nbsp;</p>

  <h1><a name="top" id="top"></a><a name="Top" id="Top"></a>Findaid Class
  Collection Implementation</h1>

  <h2><a href="../index.html">DLXS Workshop</a></h2>

  <p>Findaid Class Instructors: <b>Tom Burton-West</b>, <b>Chris Powell</b></p>

  <p>This portion of the DLXS Workshop focuses on implementing a collection in
  the Findaid Class. Since EAD encoding practices vary widely we will highlight
  issues arising from different encoding practices and how to resolve them.</p>


<i>More general documentation:</i> 
<ul><li> <a href= "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection" target="external">Findaid Class</a></li>
<li> <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Finding_Aids_Workshop_Cheat_Sheet"  target="external">Findaid Class Workshop Cheat Sheet</a></li>
</ul>

  <hr align="left" noshade="noshade" width="100%" />

  <ul>
   <span class="sectionheader"> <li>Morning</span>

      <ul>
        <li><a href="#Overview">Overview and Introduction</a>
          <ul>
            <li><a href="#FindaidEncodingPractices">Findaid Class Encoding
            Practices and Processes</a></li>

            <li><a href="#ead2002DTDOverview">EAD 2002 DTD Overview</a></li>

            <li><a href="#PracticalEADEncodingIssues">Practical EAD Encoding
            Issues</a></li>
          </ul>
        </li>

        <li><a href="#DataPrep">Data Preparation</a>

          <ul>
            <li>Set up directories and files</li>

            <li>Validate, Concatenate, Normalize</li>
          </ul>
        </li>

        <li>
          <a href="#FindaidClassIndexBuildingwithXPAT">Findaid Class Index
          Building with XPAT</a>

          <ul>
            <li><a href="#SetupDirectoriesforXPATIndex">Set Up Directories and
            Files for XPAT Indexing</a></li>

            <li><a href="#BuildtheXPATIndex">Build the XPAT Index</a></li>

            <li><a href="#FabRegions">Fabricated Regions in
            FindaidClass</a></li>
          </ul>
        </li>
      </ul>
    </li>

    <li>Afternoon

      <ul>
        <li>
          <a href="#FindaidClassCollectiontoWeb">Findaid Class Collection to
          Web</a>

          <ul>
            <li><a href="#ReviewtheCollectionDatabaseEntrywithCollMgr">Review
            the Collection Database Entry with CollMgr</a></li>

            <li><a href="#ReviewtheGroupsDatabaseEntrywithCollMgr">Review the
            Groups Database Entry with CollMgr</a></li>

            <li><a href="#MakeCollectionmaps">Make Collection Map</a></li>

            <li><a href="#SetuptheCollectionsWebDirectory">Set Up the
            Collection's Web Directory</a></li>

            <li><a href="#TryItOut">Try It Out</a></li>
          </ul>
        </li>
        <li><a href="#linking">Linking from Finding Aids</a></li>
        <li><a href="#Customizing">Customizing and Troubleshooting Findaid Class</a></li>
      </ul>
    </li>
  </ul>

  <h2 class="partheader"><a name="Overview" id="Overview"></a>Overview</h2>

  <p align="right" class="navlink"><a href="#Top">go to table of
  contents</a></p>

  <h3>Overview of Preprocessing, Data Preparation and Indexing steps:</h3>

  <p><b>Data Preparation</b></p>

  <ol>
    <li><a href="#DataPrepStep1">validate the files individually</a> against
    the EAD <em>2002</em> DTD<br />
    <strong>make validateeach</strong><br /></li>

    <li><a href="#DataPrepStep2">concatenate the files into one larger XML
    file</a><br />
    <strong>make prepdocs</strong><br /></li>

    <li><a href="#DataPrepStep3">validate the concatenated file</a> against
    the <em>dlxsead2002</em> DTD:<br />
    <strong>make validate</strong><br /></li>

    <li><a href="#DataPrepStep4">"normalize" the concatenated file.</a><br />
    <strong>make norm</strong><br /></li>

    <li><a href="#DataPrepStep5">validate the normalized concatenated file
    against the <em>dlxsead2002</em> DTD</a><br />
    <strong>make validate2</strong><br /></li>
  </ol>

  <p>The end result of these steps is a file containing the concatenated EADs
  wrapped in a &lt;COLL&gt; element which validates against the dlxsead2002 and
  is ready for indexing:</p>
      <pre>
&lt;COLL&gt;
    &lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
    &lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
    &lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
&lt;/COLL&gt;
      </pre>


  <p><b>Indexing</b></p>

  <ol>
    <li><b>make singledd</b> indexes words for EADs that have been
    concatenated into one large file for a collection..</li>

    <li><b>make xml</b> indexes the XML structure by reading the DTD. Validates
    as it indexes.</li>

    <li><b>make post</b> builds and indexes fabricated regions based on the
    XPAT queries stored in the workshopfa.extra.srch file.</li>
  </ol>


  <h2 class="partheader"> </h2>

  <h2 class="partheader"><a name="FindaidEncodingPractices" id=
  "FindaidEncodingPractices"></a>Findaid Class Encoding Practices and
  Processes</h2>

  <p align="right" class="navlink"><a href="#Top">go to table of
  contents</a></p>

  <p>In Findaid Class Encoding Practices and Processes we discuss the elements
  and attributes required for "out of the box" Findaid Class delivery, various
  encoding issues, and preparing the work environment and validating the
  data.</p>
  <hr align="left" noshade="noshade" width="100%" />

  <h3 class="sectionheader"><a name="ead2002DTDOverview" id=
  "ead2002DTDOverview"></a>EAD 2002 DTD Overview</h3>

  <p>These instructions assume that you have already encoded your finding aids
  files in the XML-based <a href="http://www.loc.gov/ead/" target=
  "external">EAD 2002 DTD</a>. If you have finding aids encoded using the older
  EAD 1.0 standard or are using the SGML version of EAD2002, you will need to
  convert your files to the XML version of EAD2002.  If you use a conversion program such as the one supplied by the Library of Congress, make sure you read the documentation, and change the settings according to your local practices before converting a large number of EADS. For example if you use the LC converter, you probably will want to change the xsl that inserts the string <span class="tomcommand">"hdl:loc" </span>in the eadid so that the output follows your local practices.  When converting from SGML
  to XML a number of character set issues may arise.  These are disccused in <a href=
  "../conversion/index.html">Data Conversion: Unicode, XML, and
  Normalization</a> .</p>

  <p>Resources for converting from EAD 1.0 to EAD2002 and/or from SGML EAD to
  XML EAD and good sources of information about EAD encoding practices and
  practical issues involved with EADs are described in the documentation wiki: <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#EAD_2002_DTD_Overview">EAD 2002 DTD Overview</a>

  <p>The EAD standard was designed as a &ldquo;loose&rdquo; standard in order
  to accommodate the large variety in local practices for paper finding aids
  and make it easy for archives to convert from paper to electronic form.  As a
  result, conformance with the EAD standard still allows a great deal of
  variety in encoding practices.</p>

  <p>The DLXS software is primarily designed as a system for mounting
  University of Michigan collections.  In the case of finding aids, the
  software has been designed to accommodate the encoding practices of the
  Bentley Historical Library. The more similar your data and setup is to the
  Bentley&rsquo;s, the easier is will be to integrate your finding aids
  collection with DLXS.  If your practices differ significantly from the
  Bentley&rsquo;s, you will probably need to do some preprocessing of your
  files and/or modifications to various files in DLXS.  We have found that the
  largest number of issues in implementing Findaid Class for member
  institutions is dealing with differences in encoding practices. We will cover
  various issues that commonly arise.</p>

  <p>Links to more information on the Bentley's encoding practices and workflow are available <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Practical_EAD_Encoding_Issues">Practical EAD Encoding Issues</a>

You may also want to look at <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Examples_of_Findaid_Class_Implementations_and_Practices">Examples of Findaid Class Implementations and Practices</a>

<p>Some of the types of changes you may need to make to DLXS to accomodate differences are listed at:
<a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Types_of_changes_to_accomodate_differing_encoding_practices_and.2For_interface_changes">Types of changes to accomodate differing encoding practices</a> and will be discussed later in the section on <a href="fcoutline.html#Customizing">Customizing Findaid Class</a></p>


  <h3 class="sectionheader"><a name="PracticalEADEncodingIssues" id=
  "PracticalEADEncodingIssues"></a>Practical EAD Encoding Issues</h3>

  <p>There are a number of encoding issues that may affect the data
  preparation, indexing, searching, and rendering of your finding aids. A discussion of many of these can be found at  <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Specific_Encoding_Issues">Specific Encoding Issues</a> We will discuss many of these in the section on  <a href="FIXME">Customization</a> A few of the more important ones are:</p>

  <ul>
    <li><a href="fc_char.html">Character Encoding issues</a></li>

    <li><a href="fc_ids">Attribute ids must be unique within the entire
    collection</a></li>

    <li>&lt;eadid&gt; should be less than about 20 characters in length</li>


    <li>If your DOCTYPE declaration contains entitys, you need to modify the appropriate *dcl files accordingly</li>

  </ul>
  <hr align="left" noshade="noshade" width="100%" />


  <h3 class="partheader"><a name="DataPrep" id="DataPrep"></a>Data
  Preparation</h3>

  <p>For today, we are going to be working with some EADs that are already in
  Findaid Class. We will be building them into a collection we are going to
  call <b>workshopfa</b>. We will be doing a number of steps one by hand one at a time.  There are some scripts which automate much of this work, but we have found that when people have the experience of doing each of the steps by hand, they are better able to understand and troubleshoot if there is any problem running the automated scripts.</p>

<p>More details on the scripts:
<ul>
<li><a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Setup_newcoll_manpage">setup_newcoll</a></li>
<li><a href="fixme">Other Makefile options</a></li>
</ul>



  <p>This documentation will make use of the concept of the <span class="tomcommand"><a href="../overview/dirstructure.html">$DLXSROOT</a></span>,
  which is the place at which your DLXS directory structure starts. We
  generally use <span class="tomcommand">/l1/</span>, but for the workshop, we
  each have our own <span class="tomcommand">$DLXSROOT</span> in the form of
  <span class="tomcommand">/l1/workshop/userX/dlxs/</span>. To check your
  <span class="tomcommand">$DLXSROOT</span>, type the following commands at
  the command prompt:</p>

 <blockquote>
 <pre class="unixcommand">
cd $DLXSROOT
pwd
 </pre>
 </blockquote>
  <p>The <span class="tomcommand">prep</span> directory under <span class="tomcommand">$DLXSROOT</span> is the space for you to take your encoded
  finding aids and "package them up" for use with the DLXS middleware. Create
  your basic directory <span class="tomcommand">$DLXSROOT/prep/w/workshopfa</span> and its <span class="tomcommand">data</span> subdirectory with the following command:</p>

  <blockquote>
    <pre class="unixcommand">
mkdir -p $DLXSROOT/prep/w/workshopfa/data
</pre>
  </blockquote>

  <p>Move into the <span class="tomcommand">prep</span> directory with the
  following command:</p>

  <blockquote>
    <pre class="unixcommand">
cd $DLXSROOT/prep/w/workshopfa
</pre>
  </blockquote>

  <p>This will be your staging area for all the things you will be doing to
  your texts, and ultimately to your collection. At present, all it contains is
  the <span class="tomcommand">data</span> subdirectory you created a moment
  ago. We will be populating it further over the course of the next two days.
  Unlike the contents of other collection-specific directories, everything in
  <span class="tomcommand">prep</span> should be ultimately expendable in the
  production environment.</p>

  <p>Copy the necessary files into your <span class="tomcommand">data</span>
  directory with the following commands:</p>

  <blockquote>
    <pre class="unixcommand">
cp $DLXSROOT/prep/s/samplefa/data/*.xml $DLXSROOT/prep/w/workshopfa/data/.
</pre>
  </blockquote>

  <p>We'll also need a few files to get us started working. They will need to
  be copied over as well, and also have paths adapted and collection
  identifiers changed. Follow these commands:</p>

  <blockquote>
    <pre class="unixcommand">
cp $DLXSROOT/prep/s/samplefa/samplefa.ead2002.dcl $DLXSROOT/prep/w/workshopfa/workshopfa.ead2002.dcl
cp $DLXSROOT/prep/s/samplefa/samplefa.concat.ead.dcl $DLXSROOT/prep/w/workshopfa/workshopfa.concat.ead.dcl
mkdir -p $DLXSROOT/obj/w/workshopfa
mkdir -p $DLXSROOT/bin/w/workshopfa
cp $DLXSROOT/bin/s/samplefa/preparedocs.pl $DLXSROOT/bin/w/workshopfa/preparedocs.pl
cp $DLXSROOT/bin/s/samplefa/Makefile $DLXSROOT/bin/w/workshopfa/Makefile

</pre>
  </blockquote>

  <p>Now you'll need to edit the copy of the <strong>Makefile</strong> to ensure that the path matches your
  <span class="tomcommand">$DLXSROOT</span> and that the collection name is
 <strong> <em>workshopfa</em> </strong> instead of <strong> <em>samplefa</em> </strong>.</p>

You will want to change  lines 1- 3 to point to your $DLXSROOT and replace s/samplefa with w workshopfa:

Change:
  <pre class="tomcommand">
   1  DLXSROOT=/l1
   2  NAMEPREFIX = samplefa
   3  FIRSTLETTERSUBDIR = s
</pre>
To:
  <pre class="tomcommand">
   1  DLXSROOT=/your/dlxsroot/here
   2  NAMEPREFIX = workshopfa
   3  FIRSTLETTERSUBDIR = w
</pre>


<blockquote>
<pre class="unixcommand">
cd $DLXSROOT/bin/w/workshopfa
vi Makefile
</pre>
</blockquote>


  <p><em>STOP!! Make sure you edit the Makefile before going to the next
  steps!!</em></p>

  <p>You can run this command to check to see if you forgot to change samplefa
  to workshopfa:</p>
  <pre class="unixcommand">
grep "samplefa" $DLXSROOT/bin/w/workshopfa/* $DLXSROOT/prep/w/workshopfa/* |grep -v "#"
</pre>


  <p>With the ready-to-go ead2002 encoded finding aids files in the
  <span class="tomcommand">data</span> directory, we are ready to begin the
  preparation process. This will include:</p>

  <ol>
    <li><a href="#DataPrepStep1">validating the files individually</a> against
    the EAD <em>2002</em> DTD</li>

    <li><a href="#DataPrepStep2">concatenating the files into one larger XML
    file</a></li>

    <li><a href="#DataPrepStep3">validating the concatenated file</a> against
    the <em>dlxsead2002</em> DTD</li>

    <li><a href="#DataPrepStep4">"normalizing" the concatenated file.</a></li>

    <li><a href="#DataPrepStep5">validating the normalized concatenated file
    against the <em>dlxsead2002</em> DTD</a></li>
  </ol>

  <p>These steps are generally handled via the <span class="tomcommand">Makefile</span> in <span class="tomcommand">$DLXSROOT/bin/s/samplefa</span> which we have copied to<span class="tomcommand">
  $DLXSROOT/bin/w/workshopfa.</span> To see the Makefile and how it is used, <a href=
  "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Release14_Makefile">click here</a>.</p>


  <p>Tip: Be sure not to add any space after the workshopfa or w. The Makefile
  ignores space immediately before and after the equals sign but treats all
  other space as part of the string.</p>

  <p>Further note on editing the Makefile: If you modify or write your own Make
  targets, you need to make sure that a real "tab" starts each command line
  rather than spaces. The easiest way to check for these kinds of errors is to
  use "cat -vet Makefile" to show all spaces, tabs and newlines.</p>

<p>If you are doing this at your home institution instead of at the workshop, please refer to the more detailed instrctions on the wiki: <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Step_by_step_instructions_for_setting_up_Directories_for_Data_Preparation">Step by Step Instructions for setting up Directories for Data Preparation</a>

  <p><a name="DataPrepStep1" id="DataPrepStep1"></a><strong>Step 1: Validating
  the files individually against the EAD 2002 DTD</strong></p>

  <blockquote>
    <pre class="unixcommand">
cd $DLXSROOT/bin/w/workshopfa
make validateeach
</pre>
The Makefile runs the following command:
<pre class="tomcommand">
% $DLXSROOT/bin/f/finadaid/validateeach.sh
</pre>
  </blockquote>


  <p>What's happening: The makefile is running the bourne-shell script <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Validateeach.sh.r14">validateeach.sh</a> in the $DLXSROOT/bin/f/findaid directory. The script processes each *.xml file in the data directory. For each file, it creates a temporary file without the public DOCTYPE declaration, and then runs <span class="tomcommand">onsgmls</span> on each of the resulting XML files in the 
<span class="tomcommand">data</span> subdirectory to make sure they
  conform with the EAD 2002 DTD. If validation errors occur, error files will
  be in the <span class="tomcommand">data</span> subdirectory with the same
  name as the finding aids file but with an extension of <span class=
  "unixcommand">.err</span>. If there are validation errors, fix the problems
  in the source XML files and re-run.</p>

  <p>Check the error files by running the following commands</p>

  <blockquote>
    <pre class="unixcommand">
 ls -l $DLXSROOT/prep/w/workshopfa/data/*err
</pre>
  </blockquote>
If there are any *err files, you can look at them with the following
command:
  <blockquote>
    <pre class="unixcommand">
 less  $DLXSROOT/prep/w/workshopfa/data/*err
</pre>
  </blockquote>

  <p>There are not likely to be any errors with the <b>workshopfa</b> data, but
  tell the instructor if there are.</p>
  <hr width="75%" />

  <p><a name="DataPrepStep2" id="DataPrepStep2"></a><strong>Step 2:
  Concatentating the files into one larger XML file (and running some
  preprocessing commands)</strong></p>

  <blockquote>
    <pre class="unixcommand">
cd $DLXSROOT/bin/w/workshopfa
make prepdocs
</pre>
  </blockquote>

  <blockquote>

The Makefile runs the following command:
    <pre class="tomcommand">
$DLXSROOT/bin/w/workshopfa/preparedocs.pl   
  -d $DLXSROOT/prep/w/workshopfa/data    
  -o $DLXSROOT/obj/w/workshopfa/workshopfa.xml 
  -l $DLXSROOT/prep/w/workshopfa/logfile.txt

</pre>

This runs the preparedocs.pl script on all the *xml files in the specified
data directory and writes the output to the workshopfa.xml file in the
appropriate /obj subdirectory. It also outputs a logfile to the /prep
directory:
  </blockquote>
The Perl script does two sets of things:

  <ol>
    <li>Concatenates all the files</li>

    <li>Runs a number of preprocessing steps on all the files</li>
  </ol>

  <p><strong>Concatenating the files</strong></p>

  <p>The script finds all XML files in the <span class="tomcommand">data</span> subdirectory,and then strips off and xml
  declaration and doctype declaration from each file before concatenating them
  together. It also wraps the concatenated EADs in a <strong> &lt;COLL&gt;</strong> tag . The end
  result looks like:</p>
  <pre>
&lt;COLL&gt;
    &lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
    &lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
    &lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
&lt;/COLL&gt;

</pre>

  <p><strong>WARNING!</strong>    If are extra characters or some other problem
  with the part of the program that strips out the xml declaration and the
  docytype declearation the file will end up like:</p>
  <pre>
&lt;COLL&gt;
   <strong><em> baddata</em></strong>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
  <strong> <em> baddata</em></strong>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
<strong>   <em> baddata</em></strong>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
&lt;/COLL&gt;
</pre>

  <p>This will cause the document to be invalid since the dlxsead2002.dtd does
  not allow anything between the closing tag of one &lt;/ead&gt; and the
  opening tag of the next one &lt;ead&gt;</p>

  <p>Some of the possible causes of such a problem are:</p>

  <ul>
    <li>UTF-8 Byte Order Marks at the beginning of the file</li>

    <li>DOCTYPE declaration on more than one line</li>

    <li>XML processing instructions</li>
  </ul>

  <p><strong>Preprocessing steps</strong></p>

  <p>The perl program also does some preprocessing on all the files. These
  steps are customized to the needs of the Bentley. You should look at the perl
  code and modify it so it is appropriate for your encoding practices.</p>

  <p>The preprocessing steps are:</p>

  <ul>
    <li>finds all id attributes and prepends a number to them</li>

    <li>adds a prefix string "dao-bhl" to all DAO links (You probably will want
    to change this)</li>

    <li>removes empty <span class="tomcommand">persname</span>, <span class="tomcommand">corpname</span>, and <span class="tomcommand">famname</span>
    elements</li>
  </ul>The output of the combined concatenation and preprocessing steps will be
  the one collection named xml file which is deposited into the obj
  subdirectory.

  <p>If your collections need to be transformed in any way, or if you do not
  want the transformations to take place (the DAO changes, for example), edit
  preparedocs.pl file to effect the changes. Some changes you may want to make
  include:</p>

  <ul>
    <li>Changing the algorithm used to make id attibute unique. For example if
    your encoding practices use id attributes and targets, the out-of-the-box
    algorithm will remove the relationship between the attributes and targets.
    One possible modification might be to modify the algorithm to prepend the
    eadid or filename to all id and target attributes.(There is sample code in <span class="tomcommand">preparedocs.pl</span>.)
</li>
  </ul>

<p><strong>Concatenating files in a different order or only concatenating a subset of files</strong></p>
<p>If you want to concatenate the files in a different order or only concatenate a subset of files, you can make a list of the files you wish to concatenate and put the list in a file in <span class="tomcommand">$DLXSROOT/prep/w/workshopfa</span> called <span class="tomcommand">list_of_eads.</span>  You can then run the <strong>"make prepdocslist"</strong> command which will run the  <span class="tomcommand">preparedocs.pl</span> with the<span class="tomcommand"> -i inputfilelist</span> flag instead of the <span class="tomcommand">-d dir</span> flag. This tells the program to read a list of files instead of processing all the xml files in the specified directory. The default sort order  for search results is in occurance order, which translates to the order in
    which the eads are concatenated. If you write a script which looks at the
    eads for some element that you want to sort by and then outputs a list of
    filenames sorted by that order, you could then pass that file to <span class="tomcommand">preparedocs.pl</span>
   so it would concatenate the files in the order listed.<p> 

<p>For more information on options to the  <span class="tomcommand">preparedocs.pl</span>, run the command:
<blockquote>
<div class="unixcommand">$DLXSROOT/bin/s/samplefa/preparedocs.pl --man <div> 
</blockquote>
</p>

  <hr width="75%" />

  <p><a name="DataPrepStep3" id="DataPrepStep3"></a><strong>Step 3: Validating
  the concatenated file against the dlxsead2002 DTD</strong></p>

  <blockquote>
    <pre class="unixcommand">
make validate
</pre>

The Makefile runs the following command:
    <pre class="tomcommand">
onsgmls -wxml -s -f $DLXSROOT/prep/w/workshopfa/workshopfa.errors 
$DLXSROOT/misc/sgml/xml.dcl   
$DLXSROOT/prep/w/workshopfa/workshopfa.concat.ead.dcl 
$DLXSROOT/obj/w/workshopfa/workshopfa.xml
</pre>
  </blockquote>

  <p>This runs the onsgmls command against the concatenated file using the
  dlxs2002dtd, and writes any errors to the workshopfa.errors file in the
  appropriate subdirectory in $DLXSROOT/prep/c/collection.. <a href=
  "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Validate.R14">More details</a></p>

  <p>Note that we are running this using <strong>workshopfa.concat.ead.dcl</strong> not <strong>workshopfa.ead2002.dcl</strong>. The
  <strong>workshopfa.concat.ead.dcl</strong> file points to
  <strong>$DLXSROOT/misc/sgml/dlxsead2002.ead</strong> which is the
  <em>dlxsead2002</em> DTD. The <em>dlxsead2002</em> DTDis exactly the same as
  the <em>EAD2002</em> DTD, but adds a wrapping element, <span class="tomcommand">&lt;COLL&gt;</span>, to be able to combine more than one
  <span class="tomcommand">ead</span> element, more than one finding aid, into
  one file. The larger file will be indexed with XPAT tomorrow. It is, of
  course, a good idea to validate the file now before going further.</p>

  <p>Check for errors by looking for the file <span class="tomcommand"><strong>$DLXSROOT/prep/w/workshopfa/workshopfa.errors</strong></span>
  which will be present and contain messages about what caused the file to be
  considered invalid if there are errors.</p>

  <p>If you see errors at this point (assuming there were no errors during the
  validateeach step),  there was a problem with the preparedocs.pl
  processing. </p>

  <p>Run the following command</p>

  <blockquote>
    <pre class="unixcommand">
 ls -l $DLXSROOT/prep/w/workshopfa/workshopfa.errors
</pre>
  </blockquote>
If there is a workshopfa.errors file then run the following
  command to look at the errors reported

 
  <pre class="unixcommand">
 less $DLXSROOT/prep/w/workshopfa/workshopfa.errors
</pre>

    If you see this warning in the errors file:
        <pre class="tomcommand">  onsgmls:/l1/dev/tburtonw/misc/sgml/xml.dcl:1:W: SGML declaration was not  implied</pre> 
        You can ignore it, but if you see any other errors
    <strong>STOP!</strong> You need to determine the cause of the problem, fix
    it, and rerun the steps until there are no errors from make validate. If
    you continue with the next steps in the process with an invalid xml
    document, the errors will compound and it will be very difficult to trace
    the cause of the problem.</p>


  <p><a name="DataPrepStep4" id="DataPrepStep4"></a><strong>Step 4: Normalizing
  the concatenated file</strong></p>


<pre class="unixcommand">
make norm
</pre>


The Makefile runs a series of copy statements and two main commands:

 <pre class="tomcommand">
 1.)   /l/local/bin/osgmlnorm -f $DLXSROOT/prep/w/workshopfa/workshopfa.osgmlnorm.errors 
       $DLXSROOT/misc/sgml/xml.dcl 
       $DLXSROOT/prep/w/workshopfa/workshopfa.concat.ead.dcl 
       $DLXSROOT/obj/w/workshopfa/workshopfa.xml.prenorm > $DLXSROOT/obj/w/workshopfa/workshopfa.xml.postnorm
</pre>
 <pre class="tomcommand">
 2.)  /l/local/bin/osx -E0 -bUTF-8 -xlower -xempty -xno-nl-in-tag 
      -f $DLXSROOT/prep/w/workshopfa/workshopfa.osx.errors 
      $DLXSROOT/misc/sgml/xml.dcl 
      $DLXSROOT/prep/w/workshopfa/workshopfa.concat.ead.dcl 
      $DLXSROOT/obj/w/workshopfa/workshopfa.xml.postnorm > $DLXSROOT/obj/w/workshopfa/workshopfa.xml.postnorm.osx 
</pre>

These commands ensure that your collection data is normalized. What this means is that any attributes are put in the order in which they were defined in the DTD. Even though your collection data is XML and attribute order should be irrelevant (according to the XML specification), due to a bug in one of the supporting libraries used by xmlrgn (part of the indexing software), attributes must appear in the order that they are defined in the DTD. If you have "out-of-order" attributes and don't run make norm, you will get<strong> <em>"invalid endpoints"</em></strong> errors during the make post step.

<p> Step one, which normalizes the document writes its errors to <span class="tomcommand">$DLXSROOT/prep/w/workshopfa/workshopfa.osgmlnorm.errors</span>. Be sure to check this file.</p>
 <pre class="unixcommand">
 less $DLXSROOT/prep/w/workshopfa/workshopfa.osgmlnorm.errors
</pre>

<p>Step 2, which runs osx to convert the normalized document back into XML produces lots of error messages which are written to <pre class="tomcommand"> $DLXSROOT/prep/w/workshopfa/workshopfa.osx.errors.</pre> These will also result in the following message on standard output:
 <pre class="tomcommand">  make: [norm] Error 1 (ignored)</pre>
These errors are caused because we are using an XML DTD (the EAD 2002 DTD) and osx is using it to validate against the SGML document created by the osgmlnorm step. 
<u><b>These are the only errors which may generally be ignored.</b> </u>
However, if the next recommended step, which is to run "make validate" again reveals an invalid document, you may want to rerun osx and look at the errors for clues. (Only do this if you are sure that the problem is not being caused by XML processing instructions in the documents as explained below)</p>



  <p><a name="DataPrepStep5" id="DataPrepStep5"></a><strong>Step 5: Validating
  the normalized file against the dlxsead2002 DTD</strong></p>


    <pre class="unixcommand">
  make validate2 
</pre>


Check the resulting error file:
<pre class="unixcommand">
  less $DLXSROOT/prep/w/workshopfa/workshopfa.errors2
</pre>
<p>We run this step again to make sure that the normalization process did not produce an invalid document. This is necessary because under some circumstances the "make norm" step can result in invalid XML. One known cause of this is the presense of XML processing instructions. For example:<strong>"&lt;?Pub Caret1?&gt;"</strong>. Although XML processing instructions are supposed to be ignored by any XML application that does not understand them, the problem is that when we use sgmlnorm and osx, which are SGML tools, they end up munging the output XML. The preparedocs.pl script used in the "make prepdocs" step should have removed any XML processing instructions.  

<p> If this second make validate step fails, but the "make validate" step before "make norm" succeeded, there is some kind of a problem with the normalization process.
  You may want to start over by running "make clean" and then going through steps 1-4 again. 
 If that doesn't solve the problem you may want to check your EADs to make sure they do not have XML processing instructions and if they don't, you will then need to look at the error messages from the second make validate.</p>

  <h3 class="sectionheader"><i>More Documentation</i></h3>
  <ul>
    <li><a target="external" href=
    "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Validate.R14">The Findaid Class "make validate" command</a></li>

  </ul>

  <p> </p>

  <h2 class="partheader"><span class="dayheader"><a name=
  "FindaidClassIndexBuildingwithXPAT" id=
  "FindaidClassIndexBuildingwithXPAT"></a></span>Findaid Class Index Building
  with XPAT</h2>

  <p align="right" class="navlink"><a href="#Top">go to table of
  contents</a></p>

  <p>In this section the <b>workshopfa</b> XML will be indexed with the XPAT
  search engine, preparing it for use with the DLXS middleware.</p>
  <hr align="left" noshade="noshade" width="100%" />

  <h3 class="sectionheader"><a name="SetupDirectoriesforXPATIndex" id=
  "SetupDirectoriesforXPATIndex"></a>Set Up Directories and Files for XPAT
  Indexing</h3>

  <p>First, we need to create the rest of the directories in the
  <b>workshopfa</b> environment with the following commands:</p>

  <blockquote>
    <pre class="unixcommand">
mkdir -p $DLXSROOT/idx/w/workshopfa
</pre>
  </blockquote>

  <p>The <span class="tomcommand">bin</span> directory we created yesterday
  holds any scripts or tools used for the collection specifically; <span class=
  "unixcommand">obj</span> ( created earlier) holds the "object" or XML file
  for the collection, and <span class="tomcommand">idx</span> holds the XPAT
  indexes. Now we need to finish populating the directories.</p>

  <blockquote>
    <pre class="unixcommand">
<br />
cp $DLXSROOT/prep/s/samplefa/samplefa.blank.dd $DLXSROOT/prep/w/workshopfa/workshopfa.blank.dd<br />
cp $DLXSROOT/prep/s/samplefa/samplefa.extra.srch $DLXSROOT/prep/w/workshopfa/workshopfa.extra.srch
</pre>
  </blockquote>

  <p class="mainpalette"><strong>Each of these files need to be edited</strong>
  to reflect the new collection name and the paths to your particular
  directories. This will be true when you use these at your home institution as
  well, even if you use the same directory architecture as we do, because they
  will always need to reflect the unique name of each collection. </p>

(The following commands will change samplefa to workshopfa but if you are not at the workshop, you may also have to change $DLXSROOT)

<blockquote>
<pre class="unixcommand">
cd $DLXSROOT/prep/w/workshopfa
vi workshopfa.blank.dd
{esc}
:%s,s/samplefa,w/workshopfa,
:%s,samplefa,workshopfa,
:wq
</pre>
</blockquote>

<blockquote>
<pre class="unixcommand">
cd $DLXSROOT/prep/w/workshopfa
vi workshopfa.extra.srch
{esc}
:%s,s/samplefa,w/workshopfa,
:%s,samplefa,workshopfa,
</pre>
</blockquote>



Failure to  change even one file can result in puzzling errors, because the scripts
  <i>are</i> working, just not necessarily in the directories you are looking
  at.</p>

  <p> <span class="unixcommand"> grep -l "samplefa"  $DLXSROOT/prep/w/workshopfa/</span>*</p>

  <p>will check for changing s/samplefa to w/workshopfa. If you are at the
  workshop that should be all you need. However if you are doing this at your
  home institution you need to replace "/l1/" by whatever $DLXSROOT is on your
  server. If you don't have an /l1 directory on your server (which is very
  likely if you are not here using a DLPS machine) you can check with:</p>

  <p> <span class="unixcommand"> grep -l "l1"  $DLXSROOT/prep/w/workshopfa/</span>*</p>

  <p> </p>
<p>These steps: creating the directories and modifying the files to use workshopfa instead of samplefa can be done using the <strong>$DLXSROOT/bin/f/findaid/setup_newcoll</strong> script.  See <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/setup_newcoll_manpage">setup_newcoll manpage</a> for more information.</p>


  <hr align="left" noshade="noshade" width="100%" />

  <h3 class="sectionheader"><a name="BuildtheXPATIndex" id=
  "BuildtheXPATIndex"></a>Build the XPAT Index</h3>

  <p class="mainpalette">Everything is now set up to build the XPAT index. The
  <span class="tomcommand">Makefile</span> in the <span class="tomcommand">bin</span> directory contains the commands necessary to build
  the index, and can be executed easily.</p>

  <p class="mainpalette">To create an index for use with the Findaid Class
  interface, you will need to index the words in the collection, then index the
  XML (the structural metadata, if you will), and then finally "fabricate"
  structures based on a combination of elements (for example, defining who the
  "main author" of a finding aid is, without adding a <span class="tomcommand">&lt;mainauthor&gt;</span> tag around the appropriate
  <span class="tomcommand">&lt;author&gt;</span> in the <span class="tomcommand">eadheader</span> element). The following commands can be used
  to make the index:</p>

  <p class="mainpalette"><b>make singledd</b> indexes words for EADs that have
  been concatenated into on large file for a collection.</p>

  <p class="mainpalette"><b>make xml</b> indexes the XML structure by reading
  the DTD. Validates as it indexes.</p>

  <p class="mainpalette"><b>make post</b> builds and indexes fabricated regions
  based on the XPAT queries stored in the workshopfa.extra.srch file.</p>

  <blockquote>
    <pre class="unixcommand">
cd $DLXSROOT/bin/w/workshopfa
make singledd
</pre>
  </blockquote>

The Makefile runs the following commands:
<blockquote>
<pre class="tomcommand">
  cp $DLXSROOT/prep/w/workshopfa/workshopfa.blank.dd $DLXSROOT/idx/w/workshopfa/workshopfa.dd
  /l/local/xpat/bin/xpatbld -m 256m -D $DLXSROOT/idx/w/workshopfa/workshopfa.dd
  cp $DLXSROOT/idx/w/workshopfa/workshopfa.dd 	$DLXSROOT/prep/w/workshopfa/workshopfa.presgml.dd
</pre>
</blockquote>

<blockquote>
<pre class="unixcommand">
make xml
</pre>
</blockquote>

The Makefile runs the following commands:

<pre class="tomcommand">
  cp $DLXSROOT/prep/w/workshopfa/workshopfa.presgml.dd 	$DLXSROOT/idx/w/workshopfa/workshopfa.dd
  /l/local/xpat/bin/xmlrgn -D 
    $DLXSROOT/idx/w/workshopfa/workshopfa.dd
    $DLXSROOT/misc/sgml/xml.dcl
    $DLXSROOT/prep/w/workshopfa/workshopfa.concat.ead.dcl 
    $DLXSROOT/obj/w/workshopfa/workshopfa.xml
 
 cp $DLXSROOT/idx/w/workshopfa/workshopfa.dd $DLXSROOT/idx/w/workshopfa/workshopfa.prepost.dd
</pre>

After running this step, if you wish, you can see the indexed regions by issuing the following commands:
<blockquote>
<pre class="unixcommand">
xpatu $DLXSROOT/idx/w/workshopfa/workshopfa.dd
>> {ddinfo regionnames}
>> quit
</pre>
</blockquote>

<blockquote>
 <pre class="unixcommand">
make post
</pre>
 </blockquote>

The Makefile runs the following commands:
  <blockquote>
    <pre class="tomcommand">
cp $DLXSROOT/prep/w/workshopfa/workshopfa.prepost.dd  $DLXSROOT/idx/w/workshopfa/workshopfa.dd
touch $DLXSROOT/idx/w/workshopfa/workshopfa.init
/l/local/xpat/bin/xpat -q 
        $DLXSROOT/idx/w/workshopfa/workshopfa.dd
        &lt; $DLXSROOT/prep/w/workshopfa/workshopfa.extra.srch
        | $DLXSROOT/bin/t/text/output.dd.frag.pl
        $DLXSROOT/idx/w/workshopfa/
        &gt; $DLXSROOT/prep/w/workshopfa/workshopfa.extra.dd

$DLXSROOT/bin/t/text/inc.extra.dd.pl
        $DLXSROOT/prep/w/workshopfa/workshopfa.extra.dd
        $DLXSROOT/idx/w/workshopfa/workshopfa.dd
</pre>
  </blockquote>

<p>You should not see any errors at the workshop.  If you do, please let the instructor know. If <span class="tomcommand">"make post"</span> produces any errors, you need to fix them before moving on. Assuming there were no errors in the previous steps, the most likely cause of errors are either errors in your <strong>"*.extra.srch"</strong> file or your EADs may not have an element that is in the  <strong>"*.extra.srch"</strong>
  <p>If you get an <em>"invalid endpoints"</em> message from "make post", the
  most likely cause is XML processing instructions or some other corruption.
  The second "make validate" step should have caught these. Other possible
  causes of errors during the "make post" step include syntax errors in
  workshopfa.extra.srch, or the absense of a particular region that is listed
  in the *.extra.srch file but not present in your collection. For example if you don't have a &lt;famname&gt; in any of the EADs in your collection you would get this error:

<pre class="tomcommand">
Error found:
<Error>No information for region famname in the data dictionary.</Error>
</pre>

To fix this you would have to edit the <pre class="unixcommand>workshopfa.extra.srch file.</pre>  We won't need to do this at the workshop, but if you are indexing your own institution's EADs it is very likely that you will have to edit the <pre class="unixcommand>*.extra.srch file.</pre>  For more information see:
<ul>

<li><a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Step_3:_Configuring_fabricated_regions">Configuring fabricated regions</a></li>
<li><a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Step_4:_Indexing_fabricated_regions">Indexing fabricated regions</a></li>
<li><a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Working_with_Fabricated_Regions_in_Findaid_Class">Working with Fabricated regions</a></li>


 <hr width="75%" />

  <h3 class="sectionheader"><a name="XPATU" id="XPATU"></a>Testing the
  index</h3>

  <p>At this point it is a good idea to do some testing of the newly created
  index. Invoke xpat with the following commands</p>
  <pre class="unixcommand">
xpatu $DLXSROOT/idx/w/workshopfa/workshopfa.dd
</pre>Try searching for some likely regions. Its a good idea to test some of
the fabricated regions. Here are a few sample queries:
  <pre class="unixcommand">
&gt;&gt; region "ead"
  1: 3 matches

&gt;&gt; region "eadheader"
  2: 3 matches

&gt;&gt; region "mainauthor"
  3: 3 matches

&gt;&gt; region "maintitle"
  4: 3 matches

&gt;&gt; region "admininfo"
  5: 3 matches

</pre>

  <hr width="75%" />

  <h3 class="sectionheader"><a name="FabRegions" id="FabRegions"></a>Fabricated
  Regions in FindaidClass</h3>

  <p class="sectionheader">The make post step and the testing steps above leads
  us into a discussion of the use of <strong>fabricated regions</strong> in
  FindaidClass. Findaid Class uses the <span class="tomcommand">workshopfa.extra.srch</span>
  file to add fabricated regions to the XPAT index.</p>

  <p>"Fabricated" is a term we use to describe what are essentially virtual
  regions in an XPat indexed text. See a <a href="../xpat/fabregions.html">basic description of what a fabricated region is
  and how they are created</a>.</p>

  <p>In Finding Aids, we use fabricated regions for certain uninteresting
  regions simply so that some code can be shared. For example, the fabricated
  region "main" is set to refer to <span class="tomcommand">&lt;ead&gt;</span>
  in FindaidClass with:</p>
  <pre class="tomcommand">
(region ead); {exportfile "/l1/idx/b/bhlead/main.rgn"}; export; ~sync "main";
</pre>

  <p>whereas in TextClass "main" can refer to <span class="tomcommand">&lt;TEXT&gt;</span>. Therefore, both FindaidClass and TextClass
  can share the Perl code, in a higher level subclass, that creates searches
  for "main".</p>

<p>Findaid Class uses fabricated regions for several purposes
<ol>
<li> To share code with Text Class (e.g. region "main")  </li>
<li> Fabricated regions for searching  (e.g. region "names")</li>
<li> Fabricated regions to produce the Table of Contents and to implement display of EAD sections as focused regions such as the "Title Page" or "Arrangement" ( See <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Working_with_the_table_of_contents">Working with the table of contents</a> and <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/sites/dlxs14/uploads/6/69/Tochead2.jpg">TOC image</a> for more information on the use of fabricated regions for the table of contents.)
<li> Other regions specifically used in a PI (region "maintitle" is used by the PI <?ITEM_TITLE_XML?> used to display the title of a finding aid at the top of each page)</li>
</ol>
</p>

  <p>The majority of the fabricated regions for Findaid Class are used for the
  creation and display of the left hand table of contents in the "outline"
  view. The fabricated regions are used so
  XPAT can have binary indexes ready to use for fast retrieval of these EAD
  sections when the user clicks on an entry in the table of contents.</p>


  <p>A number of issues related to varying encoding practices can be resolved
  by the appropriate edits to the *.extra.srch file. (Although some of them may
  require changes to other files as well)</p>

  <ul>
    <li>If your &lt;unititle&gt; element precedes your &lt;origination&gt;
    element in the top level &lt;did&gt;, you will
    have to modify the "maintitle" fabricated region query in
    *.extra.srch</li>

    <li>If you do not use a &lt;frontmatter&gt; element, you will have to make
    modifications to various files including modifying *.extra.srch to provide
    an appropriate "Title Page" region based on the &lt;eadheader&gt;</li>

    <li>If your encoding practices for &lt;biohist&gt; differ from the
    Bentley's, you may need to make changes in the &lt;bioghist&gt; fabricated
    region although changes to other files may be suffient. The changes might
    include: modifying findaidclass.cfg or creating a subclass of FindaidClass
    and override FindaidClass:: GetBioghistTocHead, and/or changing the
    appropriate XSL files.</li>

    <li>If you want sections of the finding aid that are not completely within
    a well-defined element such as &lt;relatedmaterial&gt;or
    &lt;separatedmaterial&gt; to show up in the table of contents, you may have
    to create a fabricated region using the appropriate xpat query and then
    modify findaidclass.cfg and make other modifications to the code.</li>
  </ul>
See:<a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Working_with_Fabricated_Regions_in_Findaid_Class">Working with Fabricated regions</a> and <a href="fcoutline.html#Customizing">Customizing Findaid Class</a>
</ul>

  <h2 class="partheader"><a name="FindaidClassCollectiontoWeb" id=
  "FindaidClassCollectiontoWeb"></a>Findaid Class Collection to Web</h2>

  <p align="right" class="navlink"><a href="#Top">go to table of
  contents</a></p>

  <p>These are the final steps in deploying an Findaid Class collection online.
  Here the <b>Collection Manager</b> will be used to review the <b>Collection
  Database</b> entry for <b>workshopfa</b> and configure it for browse building. The <b>Collection Manager</b> will also be used to check the <b>Group Database</b>. Finally, we need to work
  with the collection map and the set up the collection's web directory.</p>
  <hr align="left" noshade="noshade" width="100%" />

  <h3 class="sectionheader"><a name=
  "ReviewtheCollectionDatabaseEntrywithCollMgr" id=
  "ReviewtheCollectionDatabaseEntrywithCollMgr"></a>Review the Collection
  Database Entry with CollMgr</h3>

  <p>Each collection has a record in the collection database that holds
  collection specific configurations for the middleware. CollMgr (Collection
  Manager) is a web based interface to the collection database that provides
  functionality for editing each collection's record. Collections can be
  checked-out for editing, checked-in for testing, and released to production.
  In general, a new collection needs to have a CollMgr record created from
  scratch before the middleware can be used. If you are starting with the
  samplefa collmgr as a model make sure to change references from
  <strong>s/samplefa</strong> to <strong>w/workshopfa</strong> or whatever you
  are using for your collection name.</p>

  <p><i>More Documentation</i></p>

  <ul>
    <li><a target="external" href=
    "http://www.dlxs.org/docs/13/collmeta/collmgr-fields.html">Collection
    Manager Field Descriptions</a></li>
  </ul>
  <hr align="left" noshade="noshade" width="100%" />
<h3 class="sectionheader"> <a name="ConfiguretheCollectionforDynamicBrowsingUsin
gCollMgr" id="ConfiguretheCollectionforDynamicBrowsingUsingCollMgr"></a>
Configure the Collection for Dynamic Browsing Using CollMgr</h3>
<p class="mainpalette">Dynamic browsing is a feature available since  DLXS release 12. Adding dynamic browsing to a collection is a matter of simple configuration in CollMgr and then running a script on the command line to populate the browse tables with data to facilitate browsing.</p>
<p class="mainpalette">Collmgr field: <strong>browseable</strong></p>
<p class="mainpalette">To enable browsing, the <strong>browseable</strong> field must be set to &quot;yes&quot;. </p>
<p class="mainpalette">Collmgr field: <strong>browsenav</strong></p>
<p class="mainpalette">The <strong>browsenav</strong> field must have a value of
 0, 1 or 2. Small collections should use 0. Medium collections 1. Large collections 2. This is the number of layers of browse tabs you want for the collection.  0 means that all the items are on one page -- no tabs.  1 means you have one layer of tabs with the letters of the alphabet, and 2 means you have two layers of tabs -- one for a letter, and another for the two-letter subdivisions under it.</p>
<p class="mainpalette">Collmgr field: <strong>browsefields</strong></p>
<p class="mainpalette"><strong>browsefields</strong>  holds the list of fields
  you would like to be browseable. This list is used to prepare the data for
  browsing, and also to present browsing options to the user.  Currently, author
and title are the canonical Findaid Class browse fields.  You will need 
fabricated regions of mainauthor (as appropriate) and maintitle to support browsing.  </p> <p>Now that we are finished updating CollMgr, we need to release our collection to production.</p>
<p class="mainpalette">With the above fields properly configured and CollMgr released, the <strong>updatebrowsedb.pl</strong> script can be run. It populates the ItemColl, ItemBrowse and ItemBrowseCounts tables with information from the collection's data dictionary. You should use the "wrapper" shell script provided in the same subdirectory,<strong> ub</strong> .</p>
<blockquote>
  <pre class="unixcommand">cd $DLXSROOT/bin/browse</pre>
</blockquote>
<blockquote>
  <pre class="unixcommand">./ub -C findaid  -c workshopfa </pre>
</blockquote>
<h3 class="sectionheader"><i>More Documentation</i></h3>
<ul>
  <li><a href="http://www.dlxs.org/docs/13/collmeta/browse.html" target="externa
l">DLXS:
      <strong>Browsing</strong>  </a></li>
</ul>

  <h3 class="sectionheader"><a name="ReviewtheGroupsDatabaseEntrywithCollMgr"
  id="ReviewtheGroupsDatabaseEntrywithCollMgr"></a>Review the Groups Database
  Entry with CollMgr</h3>

  <p>Another function of CollMgr allows the grouping of collections for
  cross-collection searching. Any number of collection groups may be created
  for Findaid Class. Findaid Class supports a group with the groupid "all". It
  is not a requirement that all collections be in this group, though that's the
  basic idea. Groups are created and modified using CollMgr.</p>

  <p>http://username.ws.umdl.umich.edu/cgi/c/collmgr/collmgr</p>

  <p>We won't be doing anything with  much with groups, but you can add your workshopfa to the Sample group, if you'd like.  Be sure to release the group to production if you want any changes to be available in your interface.</p>
  <hr align="left" noshade="noshade" width="100%" />

  <h3 class="sectionheader"><a name="MakeCollectionmaps" id=
  "MakeCollectionmaps"></a>Make Collection Map</h3>

  <p>Collection mapper files exist to identify the regions and operators used
  by the middleware when interacting with the search forms. Each collection
  will need one, but most collections can use a fairly standard map file, such
  as the one in the <b>samplefa</b> collection. The map files for all Findaid
  Class collections are stored in $DLXSROOT/misc/f/findaid/maps</p>

  <p>Map files take language that is used in the forms and translates it into
  language for the cgi and for XPAT. For example, if you want your users to be
  able to search within names, you would need to add a mapping for how you want
  it to appear in the search interface (case is important, as is
  pluralization!), how the cgi variable would be set (usually all caps, and not
  stepping on an existing variable), and how XPAT will identify and retrieve
  this natively (in XPAT search language).</p>

  <p>The first part of the map file is operator mapping, for the form, the cgi,
  and XPAT. The second part is for region mapping, as in the example above.</p>

  <blockquote>
    <pre class="unixcommand">
cd $DLXSROOT/misc/f/findaid/maps<br />
cp samplefa.map workshopfa.map
</pre>
  </blockquote>

  <p>You might note that some of the fields that are defined in the map file
  correspond to some of the <a href="#FabRegions">fabricated regions</a>.</p>

  <h3 class="sectionheader"><i>More Documentation</i></h3>

  <ul>
    <li><a target="external" href=
    "http://www.dlxs.org/docs/13/collmeta/maps.html">DLXS Map Files</a></li>

    <li><a target="external" href=
    "http://www.dlxs.org/docs/13/class/findaid/map.html">Collection Map Files
    (Finding Aids)</a></li>
  </ul>
  <hr align="left" noshade="noshade" width="100%" />

  <h3 class="sectionheader"><a name="SetuptheCollectionsWebDirectory" id=
  "SetuptheCollectionsWebDirectory"></a>Set Up the Collection's Web
  Directory</h3>

  <p>Each collection may have a <span class="tomcommand">web</span> directory
  with custom Cascading Style Sheets, interface templates, graphics, and
  javascript. The default is for a collection to use the web templates at
  <span class="tomcommand">$DLXSROOT/web/f/findaid</span>. Of course,
  collection specific templates and other files can be placed in a collection
  specific web directory, and it is necessary if you have any customization at
  all. <em>DLXS Middleware uses <a href=
  "../ui/index.html#fallback">fallback</a> to find HTML related templates,
  chunks, graphics, js and css files.</em></p>

  <p>For a minimal collection, you will want two files: index.html and
  <span class="tomcommand">FindaidClass-specific.css</span>.</p>

  <blockquote>
    <pre class="unixcommand">
mkdir -p $DLXSROOT/web/w/workshopfa
cp $DLXSROOT/web/s/samplefa/index.html $DLXSROOT/web/w/workshopfa/index.html
cp $DLXSROOT/web/s/samplefa/findaidclass-specific.css $DLXSROOT/web/w/workshopfa/findaidclass-specific.css
</pre>
  </blockquote>

  <p>As always, we'll need to change the collection name and paths. You might
  want to change the look radically, if your HTML skills are up to it.</p>

  <p>Note that the browse link on the index.html page is hard-coded to go to
  the samplefa hard-coded browse.html page. You may want to change this to
  point to a dynamic browse page (see below). The url for the dynamic browse
  page is ".../cgi/f/findaid/findaid-idx?c=workshopfa;page=browse".</p>

  <p>If you would prefer a dynamic home page, you can copy and modify the
  home.xml and home.xsl files from $DLXSROOT/web/f/findaid/. Note that they are
  currently set up to be the home page for all finding aids collections, so you
  will have to do some considerable editing. However they contain a number of
  PIs that you may find useful. In order to have these pages actually be used
  by DLXS, they have to be present in your $DLXSROOT/web/w/workshopfa/
  directory and <strong>there can't be an index.html page in that
  directory.</strong> The easiest thing to do, if you have an existing
  index.html page is to rename it to "index.html.foobar" or
  something.<br /></p>

  <hr align="left" noshade="noshade" width="100%" />

  <h3 class="sectionheader"><a name="TryItOut" id="TryItOut"></a>Try It Out</h3>

  <p class="sectionheader">
  http://<em>username</em>.ws.umdl.umich.edu/cgi/f/findaid/findaid-idx</p>

  <h2 class="partheader">Linking from Finding Aids 
  <a name="linking" id="linking"></a></h2>

  <p align="right" class="navlink"><a href="#Top">go to table of
  contents</a></p>

  <p>There are a number of reasons you might like to link from a finding aid to another website.  Perhaps you have digitized artifacts you'd like to link from DAOs.  Maybe your Additional Descriptive Data contains a bibliography, and you'd like to link to published volumes in your OPAC.  There might be another website out there that covers your topic well and you just want to create an external pointer to it.  How do you do this?</p>


  <hr align="left" noshade="noshade" width="100%" />

  <h3 class="sectionheader"><a name="HREFLinks" id="HREFLinks"></a>Linking from Finding Aids Using HREF Attributes</h3>
<p>Findaid Class is coded so that if DaoResolution is enabled and there is an href attribute to the &lt;dao&gt; element, it will check to see if it contains the string "http".  If it does, FindaidClass will create a link based on the content of the href attribute of the &lt;dao&gt;. For example, the Archives of Michigan have DAOs in this form:

<blockquote><pre>&lt;dao linktype="simple" href="http://haldigitalcollections.cdmhost.com/u?/p4006coll15,18455" 
show="new" actuate="onrequest"&gt;&lt;daodesc&gt;&lt;p&gt;[view image]&lt;/p&gt;&lt;/daodesc&gt;&lt;/dao&gt;</pre></blockquote> 

That displays like this in the container list:

<blockquote><a href="http://quod.lib.umich.edu/cgi/f/findaid/findaid-idx?c=archivemi;cc=archivemi;type=simple;rgn=Entire%20Finding%20Aid;q1=18455;view=text;sort=occur;didno=Mi-HC--AOM--59-14;idno=Mi-HC--AOM--59-14;focusrgn=C03;byte=259722" target="external">Records of the Michigan Military Establishment</a></blockquote></p>
<p>If you wish to link from an element other than a &lt;dao&gt;, you'll have a little bit of work to do, depending on which element will contain the link, and what the value of the show attribute might be.  The Clements Manuscript Division often has extenisve bibliographies as Additional Descriptive Data, and they wanted links from the titles to their entries in Mirlyn.
<blockquote><a href="http://quod.lib.umich.edu/cgi/f/findaid/findaid-idx?c=clementsmss;cc=clementsmss;view=reslist;subview=standard;didno=umich-wcl-M-1497chi;focusrgn=add;byte=5054972" target="external">Lydia Maria Child papers</a></blockquote>
Here is an example of their encoding:
<blockquote><pre>&lt;title render="italic" linktype="simple" 
href="http://mirlyn.lib.umich.edu:80/F/?func=direct&amp;amp;doc_number=004618335&amp;amp;local_base=AA_PUB" 
show="replace" actuate="onrequest"&gt;The family nurse; or Companion of The frugal housewife. By Mrs. Child... 
Revised by a member of the Massachusetts medical society&lt;/title&gt;</pre></blockquote>   <p>
<p>In order to make this work as they wished, we had to adapt the way that title handling was done in the XSLT.  In this case, it is in the text.components.xsl file, which had a copy made into the collection web directory with this style:
<blockquote><pre> &lt;xsl:template match="title[@@linktype='simple']"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="@@href"&gt;
        &lt;xsl:element name="a"&gt;
          &lt;xsl:attribute name="href"&gt;
            &lt;xsl:value-of select="@@href"/&gt;
          &lt;/xsl:attribute&gt;
          &lt;xsl:if test="@@render = 'italic'"&gt;
            &lt;xsl:attribute name="class"&gt;
              &lt;xsl:text&gt;title&lt;/xsl:text&gt;
            &lt;/xsl:attribute&gt;
          &lt;/xsl:if&gt;
          &lt;xsl:if test="@@show = 'new'"&gt;
            &lt;xsl:attribute name="target"&gt;
              &lt;xsl:text&gt;linkWindow&lt;/xsl:text&gt;
            &lt;/xsl:attribute&gt;
          &lt;/xsl:if&gt;
          &lt;xsl:value-of select="."/&gt;
        &lt;/xsl:element&gt;      
      &lt;/xsl:when&gt;
&lt;xsl:otherwise&gt;
   &lt;xsl:element name="i"&gt;&lt;xsl:value-of select="."/&gt;
        &lt;/xsl:element&gt;&lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
</pre></blockquote> 

  <hr align="left" noshade="noshade" width="100%" />
  <h3 class="sectionheader"><a name="IDResolver" id="IDResolver"></a>Linking from Finding Aids Using the ID Resolver</h3>
  <p>If there is no
  "http" string in the href attribute of a &lt;dao&gt;, FindaidClass assumes that the href
  attribute is actully an id and will look up that id in in the idresolver and
  build a link if it finds the ID in the IDRESOLVER table. The method
  FilterAllDaos_XML in $DLXSROOT/cgi/f/findaid/FindaidClass.pm can be
  overridden per collection if different behavior is needed.</p>

  <p>If you decide to use this feature, you will want to modify the
  preprocessing script preparedocs.pl which out-of-the-box inserts the string
  'dao-bhl-' after the href. Below is an example of a Bentley &lt;dao&gt; where
  the id number is 91153-1.</p>
  <pre class="tomcommand">
&lt;dao linktype="simple" href="91153-1" show="new" actuate="onrequest"&gt;
         &lt;daodesc&gt;
          &lt;p&gt;[view selected images]&lt;/p&gt;
         &lt;/daodesc&gt;
        &lt;/dao&gt;
</pre>

  <p>The preparedocs.pl program would change this to:</p>
  <pre class="tomcommand">
&lt;dao linktype="simple" href="dao-bhl-91153-1" show="new" actuate="onrequest"&gt;
         &lt;daodesc&gt;
          &lt;p&gt;[view selected images]&lt;/p&gt;
         &lt;/daodesc&gt;
        &lt;/dao&gt;
</pre>

  <p>The ID resolver would look up the id "dao-bhl-91153-1" and replace it with
  the appropriate URL.</p>

  <pre class="tomcommand">
&lt;dao linktype="simple" href="http://images.umdl.umich.edu/cgi/i/image/image-idx?q1=91153-1;rgn1=bhl_href;op2=And;q2=;rgn2=bhl_al;type=boolean;med=1;view=thumbnail;c=bhl" show="new" actuate="onrequest"&gt;
         &lt;daodesc&gt;
          &lt;p&gt;[view selected images]&lt;/p&gt;
         &lt;/daodesc&gt;
        &lt;/dao&gt;
</pre>


In order to make use of ID resolution in Findaid Class :
<ol>
<li>$gEnableDaoResolution must be set to 1 in $DLXSROOT/cgi/f/findaid/findaidclass.cfg</li>
<li>You probably want to remove the processing in preparedocs.pl that adds the"dao-bhl-" prefix to DAOs</li>
<li>The Id resolver must be set up as detailed in the link below</li>
</ol>

  <p><font color="#0000A0">ID Resolver Data Transformation and
  Deployment</font></p>

  <p>The ID Resolver is a CGI that takes as input a unique identifier and
  returns a URI. It is used, for example, by Harper's Weekly to link the text
  pages in Text Class middleware to the image pages in the Image Class
  middleware, and vice versa.</p>

  <p>Plug something like the following in to your web browser and you should
  get something back. If you choose to test middleware on a development machine
  that uses the id resolver, make sure that the middleware on that machine is
  calling the resolver on the machine with the data, and not the resolver on
  the production server.</p>

  <ul>
    <li><a href=
    "http://clamato.umdl.umich.edu/cgi/i/idresolver/idresolver?id=dao-bhl-bl000684">
    http://clamato.hti.umich.edu/cgi/i/idresolver/idresolver?id=dao-bhl-bl000684</a></li>

    <li>which should yield...<br />
    <code><b>&lt;ITEM MTIME="20030728142225"&gt;&lt;ID&gt;dao-bhl-bl000684
    &lt;/ID&gt;&lt;URI&gt;http://images.umdl.umich.edu/cgi/i/image/image-idx?&amp;q1=bl000684&amp;rgn1=bhl_href&amp;type=boolean&amp;med=1&amp;view=thumbnail&amp;c=bhl
    &lt;/URI&gt;&lt;/ITEM&gt;</b></code></li>
  </ul>

  <p><a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/DLXS_IDRESOLVER">Information on
  how to set up the ID resolver</a></p>



  <hr align="left" noshade="noshade" width="100%" />

  <h2 class="partheader"><a name="Customizing" id="Customizing"></a>Customizing and Troubleshooting Findaid Class</h2>

<h3>Outline</h3>

<ul>
<li><a href="#Overview">Overview</a></li>
<li><a href="#changesEncoding">Types of changes to accomodate differing encoding practices and/or interface changes</a></li>
<li><a href="#SpecificEncoding">Specific encoding issues</a></li>
<li><a href="#Demo">Demonstration of customizing and troubleshooting</a></li>
<li><a href="#ModTOC">Modifying the Table of Contents</a></li>
<li><a href="#Trouble">General troubleshooting techniques</a></li>

</ul>

  <p align="right" class="navlink"><a href="#Top">go to table of
  contents</a></p>

<h3><a name="Overview" id="Overview"></a>Overview</h3>

<p>The EAD standard was designed as a "loose" standard in order to accommodate the large variety in local practices for paper finding aids and make it easy for archives to convert from paper to electronic form. As a result, conformance with the EAD standard still allows a great deal of variety in encoding practices.
</p>
<p>
The DLXS software is primarily designed as a system for mounting University of Michigan collections. In the case of finding aids, the software has been designed to accommodate the encoding practices of the Bentley Historical Library. 
</p>

Most of the questions we get from sites implementing FindaidClass for the first time involve dealing with encoding practices that are different than the Bentley's.

<p>We will first look at a number of issues involved in data preparation, then we will look at making changed to the Table of Contents.  The modifications to the Table of Contents will involve a number of useful techniques such as
<ul>
<li>Creating custom fabricated regions</li>
<li>Subclassing Findaid Class to create collection specific  behavior</li>
<li>Creating collection specific XSL templates</li>
</ul>
</p>



  <h3><a name="changesEncoding" id="changesEncoding"></a>Types of changes to accomodate differing encoding practices and/or
  interface changes</h3>

  <ul>
    <li>Custom preprocessing</li>

    <li>Add dummy EAD to data</li>

    <li>Modify prep scripts (Makefile, preparedocs.pl, validateeach.sh)</li>

    <li>Modify *dcl files (DOCTYPE declarations and entities)</li>

    <li>Modify fabricated regions (*.extra.srch)</li>

    <li>Modify CollMgr entries</li>

    <li>Modify findaidclass.cfg (change table of contents sections)</li>

    <li>Subclass FindaidClass.pm</li>

    <li>Modify XSL</li>

    <li>Modify XML templates</li>

    <li>Modify CSS</li>
  </ul>



<h3>Specific Encoding Issues <a name="SpecificEncoding" id="SpecificEncoding"></a></h3>
<p>There are a number of encoding issues that may affect the data preparation, indexing, searching, and rendering of your finding aids. Some of them are:
</p>

<ul>
<li> <b>Preprocessing and Data Prep issues</b></li>
<ul>
        

<li> <span class="redtext">&lt;eadid&gt; should be less than about 20 characters in length</span>
</li>
<li> Attribute ids must be unique within the entire collection </li>
<li> If you use attribute ids and corresponding targets within your EADs preparedocs.pl may need to be modified.
</li>
<li> Character Encoding issues
</li>
<li> 
UTF-8 Byte Order Marks (BOM) should be removed from EADs prior to concatenation
</li>
<li> 
XML processing instructions should be removed from EADs prior to concatenation
</li>

<li>
 If your DOCTYPE declaration contains entities, you need to modify the appropriate *dcl files accordingly, or you may want to remove them and and any references to them and instead use various DLXS functions to replace the functionality previously provided by entityrefs. (See $DLXSROOT/prep/s/samplefa/samplefa.ead2002.entity.example.dcl for an example )
</li>
<li> Out-of-the-box &lt;dao&gt; handling may need to be modified for your needs</li>
</ul>



<li> <b>Fabricated region issues  (some of these involve XSL as well)</b></li>

<ul>
<li> If your<span class="tomcommand"> &lt;unititle&gt; </span>element precedes your 
<span class="tomcommand">&lt;origination&gt; </span>element in the top level <span class="tomcommand">&lt;did&gt;</span>, you will have to modify the maintitle fabricated region query in<span class="tomcommand"> *.extra.srch </span> See <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_Finding_Aids:_Release_14/Workshop_working_copy#Title_of_Finding_Aid_does_not_show_up"> Troubleshooting:Title of Finding Aid does not show up</a>  </li>

<li> If you do not use a <span class="tomcommand">&lt;frontmatter&gt;</span> element, you will either have to either a) create and populate frontmatter elements in your EADs manually, or b) run your EADs through some preprocessing XSL to create and populate frontmatter elements, or c) you will have to create a fabricated region  to provide an appropriate "Title Page" region based on the<span class="tomcommand"> &lt;eadheader&gt;</span> and you may also need to change the XSL and/or subclass FindaidClass to change the code that handles the Title Page region.
</li>
</ul>


<li>
<b> Table of Contents and Focus Region issues</b>
</li>
<ul>
<li> If you do not use a <span class="tomcommand">&lt;frontmatter&gt;</span> element you may have to make the changes mentioned above to get the title page to show in the table of contents and when the user clicks on the "Title Page" link in the table of contents
</li>

<li>
 If your encoding practices for <span class="tomcommand">&lt;biohist&gt;</span> differ from the Bentley's, you may need to make changes in findaidclass.cfg or create a subclass of FindaidClass and override FindaidClass:: GetBioghistTocHead, and/or change the appropriate XSL files.
See: <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Changing_the_Bioghist_labels_to_use_the_appropriate_.3Chead.3E_elements">Changing the Bioghist labels</a> </li>
<li> If you want <span class="tomcommand">&lt;relatedmaterial&gt;</span> and/or <span class="tomcommand">&lt;separatedmaterial&gt;</span> to show up in the table of contents (TOC) on the left hand side of the Finding Aids, you may have to modify findaidclass.cfg and make other modifications to the code. This also applies if there are other sections of the finding aid not listed in the out-of-the-box findaidclass.cfg %gSectHeadsHash. 
See <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Adding_sections_to_the_table_of_contents"></a>
</li>

 See also:
<ul>
<li> <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Customizing_Findaid_Class">Customizing Findaid Class</a></li>
<li><a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Troubleshooting_Finding_Aids">Troubleshooting Finding Aids</a></li>
</ul>

</ul>
<li>
<b> XSL issues</b>
</li>
<ul>
<li> If you have encoded &lt;unitdate&gt;s as siblings of &lt;unittitle&gt;s, you may have to modify the appropriate XSL templates.
</li>
<li> If you want the middleware to use the &lt;head&gt; element for labeling sections instead of the default hard-coded values in findaidclass.cfg, you may need to change fabricated regions and/or make changes to the XSL and/or possibly modify findaidclass.cfg or subclass FindaidClass.</li>
</ul>
</ul>


<h3><a name="Demo" id="Demo"></a>Demonstration of customizing and troubleshooting techniques</h3>

<h3>Data Prep issues</h3>

<ul>
<li>No information for region "foobar" in the data dictionary</li>
<li>Title doesn't show up</li>
<li>No information for region c05 in the data dictionary</li>
</ul>

<h3><a name="ModTOC" id="ModTOC"></a>Modifying the Table of Contents</h3>

<ul>

<li>Changing labels in TOC (<a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Working_with_the_table_of_contents">See Wiki for details</a>)</li>
<li>Adding related and separated material</li>
<ul>
<li><a href="./images/french_rel_sep.png">Source</a></li>

<li><a href="http://tburtonw.dev.umdl.umich.edu/cgi/f/findaid/findaid-idx?c=demoWfa;id=navbarbrowselink;cginame=findaid-idx;cc=demoWfa;view=reslist;subview=standard;didno=US%3A%3ACMalG%3A%3A990051">Broken</a></li>

<li>

<a href="http://tburtonw.dev.umdl.umich.edu/cgi/f/findaid/findaid-idx?c=demofa;id=navbarbrowselink;cginame=findaid-idx;cc=demofa;view=reslist;subview=standard;didno=US%3A%3ACMalG%3A%3A990051">Fixed</a> </li>
</ul>

<li>Changing Biohist labels to use the &lt;head&gt; element</li>

<pre>
&lt;bioghist&gt;
     &lt;head&gt;
          Biographies of people featured in Soviet photographs
     &lt;/head&gt;
 ....
&lt;/bioghist&gt;
</pre>

<ul>




<li>
<a href="http://tburtonw.dev.umdl.umich.edu/cgi/f/findaid/findaid-idx?c=demoWfa;id=navbarbrowselink;cginame=findaid-idx;cc=demoWfa;view=reslist;subview=standard;didno=US%3A%3ACMalG%3A%3A97.R.36">Broken</a></li>

<li>

<a href="http://tburtonw.dev.umdl.umich.edu/cgi/f/findaid/findaid-idx?c=demofa;id=navbarbrowselink;cginame=findaid-idx;cc=demofa;view=reslist;subview=standard;didno=US%3A%3ACMalG%3A%3A97.R.36">Fixed</a></li>


</ul>


<li>Making changes for all Collections vs changes per collection
(findaidclass.cfg vs subclass)</li>
<li>Subclassing FindaidClass</li>
<li>Collection specific XSL</li>
</ul>


<h3><a name="Trouble" id="Trouble"></a>General troubleshooting techniques</h3>

<ul>
<li>running extra.srch queries in xpat</li>
<li>debugging switches</li>
<li>xsltwrite and oxygen</li>
<li>perl debugger</li>

</ul>





</body>
</html>
@


1.15
log
@minor corrections including ub arguments
@
text
@d36 1
a36 1
<!--$Id: fcoutline.html,v 1.14 2008/08/01 19:14:54 tburtonw Exp tburtonw $-->
d1473 7
d1485 1
a1485 1
<li>Changing labels in TOC</li>
d1487 10
d1499 25
a1525 1

@


1.14
log
@checking in chris's changes
@
text
@d36 1
a36 1
<!--$Id: fcoutline.html,v 1.13 2008/07/30 22:16:24 tburtonw Exp tburtonw $-->
a124 1

d126 1
a126 8

        <li><a href=
        "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Customizing_Findaid_Class">
        Customizing Findaid Class</a></li>

        <li><a href=
        "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Troubleshooting_Finding_Aids">
        Troubleshooting</a></li>
d270 8
a277 1
  call <b>workshopfa</b>.</p>
d279 2
a280 2
  <p>This documentation will make use of the concept of the <span class=
  "unixcommand">$<a href="../overview/dirstructure.html">DLXSROOT</a></span>,
d350 3
a352 1
You will want to change  lines 1- 3 accordingly
d358 15
d517 3
a519 3
   <em> baddata</em>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
   <em> baddata</em>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
   <em> baddata</em>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
d569 1
d571 2
a572 1
    <li>You may also want to run the  <span class="tomcommand">preparedocs.pl</span> with the -i inputfilelist flag instead of the -d dir flag. This tells the program to read a list of files instead of processing all the xml files in the specified directory. The default sort order  for search results is in occurance order, which translates to the order in
d575 9
a583 3
    filenames sorted by that order, you could then pass that file to<span class="tomcommand">preparedocs.pl</span
   so it would concatenate the files in the order listed.</li>
  </ul>
d622 1
a622 1
  validateeach step) is that there was a problem with the preparedocs.pl
d761 28
a788 2
  will always need to reflect the unique name of each collection. Failure to
  change even one file can result in puzzling errors, because the scripts
d792 1
a792 2
  <p>grep -l "samplefa" <span class=
  "unixcommand">$DLXSROOT/prep/w/workshopfa/</span>*</p>
d800 1
a800 2
  <p>grep -l "l1" <span class=
  "unixcommand">$DLXSROOT/prep/w/workshopfa/</span>*</p>
d803 3
d868 1
a868 1

d870 1
a870 1
xpatu $DLXSROOT/w/workshopfa/workshopfa.dd
d874 1
a874 1

d900 1
d957 2
a958 2
  FindaidClass. uses the <span class="tomcommand">workshopfa.extra.srch</span>
  file to add to the XPAT index.</p>
d961 1
a961 2
  regions in an XPat indexed text. See a <a href=
  "../xpat/fabregions.html">basic description of what a fabricated region is
d1073 1
a1073 1
<p class="mainpalette">With the above fields properly configured and CollMgr released, the <strong>updatebrowsedb.pl</strong> script can be run. It populates the ItemColl, ItemBrowse and ItemBrowseCounts tables with information from the collection's data dictionary. You should use the "wrapper" shell script provided in the same subdirectory, ub .</p>
d1078 1
a1078 2
  <pre class="unixcommand">./ub -C text -c workshoptc -h pilsner.umdl.umich.edu 
-r production</pre>
a1326 2
  <h2 class="partheader"><a name="Customizing" id=
  "Customizing"></a>Customizing and Troubleshooting Findaid Class</h2>
a1327 1
<h1>Temporary separate file for this part <a href="customizing.html">click here</a></h1>
d1329 40
a1368 1
  <h3>Types of changes to accomodate differing encoding practices and/or
d1397 1
a1397 1
<h3>Specific Encoding Issues</h3>
d1419 1
d1421 1
a1421 4
 Multiline DOCTYPE declarations are not properly handled the data prep scripts in release 13 and earlier (without August 24, 2007 patch).
</li>
<li>
 If your DOCTYPE declaration contains entities, you need to modify the appropriate *dcl files accordingly. See $DLXSROOT/prep/s/samplefa/samplefa.ead2002.entity.example.dcl for an example )
d1452 1
d1459 1
d1471 33
@


1.13
log
@Fixed many styles with new css class tomcommand
@
text
@d36 1
a36 1
<!--$Id: fcoutline.html,v 1.12 2008/07/30 21:36:32 tburtonw Exp tburtonw $-->
d55 1
a55 2
<ul>
<li> <a href= "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection" target="external">Findaid Class</a></li>
a1137 4
  <h3 class="sectionheader"><a name="CreateBrowsePage" id=
  "CreateBrowsePage"></a>Create a browse page</h3>See the documentation:
  <a href=
  "http://www.dlxs.org/docs/13/collmeta/browse.html">http://www.dlxs.org/docs/13/collmeta/browse.html</a>
d1140 1
a1140 2
  <h3 class="sectionheader"><a name="TryItOut" id="TryItOut"></a>Try It
  Out</h3>
d1145 1
a1145 1
  <h2 class="partheader">Linking from Finding Aids Using the ID Resolver
d1151 4
a1154 1
  <p>How do you do this?</p>
d1156 2
d1159 2
d1162 42
a1203 5
  <p>Findaid Class is coded so that if DaoResolution is enabled and there is an href attribute to the
  &lt;dao&gt; element, it will check to see if it contains the string "http".
  If it does, FindaidClass will not us ID Resolver, but will create a link
  based on the content of the href attribute of the &lt;dao&gt;. If there is no
  "http" string in the href attribute, FindaidClass assumes that the href
@


1.12
log
@some of chris's changes
@
text
@d21 12
d36 1
a36 1
<!--$Id: fcoutline.html,v 1.11 2008/07/30 15:18:10 tburtonw Exp tburtonw $-->
a180 14
  <p><strong>WARNING!</strong>    If are extra characters or some other problem
  with the part of the program that strips out the xml declaration and the
  docytype declaration the file will end up like:</p>
  <pre>
&lt;COLL&gt;
     baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
     baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
     baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;
&lt;/COLL&gt;
</pre>

  <p>In this case you will get "character data not allowed" or similar errors
  during the make validate step. You can troubleshoot by looking at the
  concatenated file and/or checking your original EADs.</p>
d218 1
a218 1
  convert your files to the XML version of EAD2002.  If you use a conversion program such as the one supplied by the Library of Congress, make sure you read the documentation, and change the settings according to your local practices before converting a large number of EADS. For example if you use the LC converter, you probably will want to change the xsl that inserts the string <span class="unixcommand">"hdl:loc" </span>in the eadid so that the output follows your local practices.  When converting from SGML
d284 4
a287 4
  generally use <span class="unixcommand">/l1/</span>, but for the workshop, we
  each have our own <span class="unixcommand">$DLXSROOT</span> in the form of
  <span class="unixcommand">/l1/workshop/userX/dlxs/</span>. To check your
  <span class="unixcommand">$DLXSROOT</span>, type the following commands at
d290 3
a292 3
  <blockquote>
    <pre class="unixcommand">
cd $DLXSROOT<br />
d294 3
a296 5
</pre>
  </blockquote>

  <p>The <span class="unixcommand">prep</span> directory under <span class=
  "unixcommand">$DLXSROOT</span> is the space for you to take your encoded
d298 1
a298 3
  your basic directory <span class=
  "unixcommand">$DLXSROOT/prep/w/workshopfa</span> and its <span class=
  "unixcommand">data</span> subdirectory with the following command:</p>
d306 1
a306 1
  <p>Move into the <span class="unixcommand">prep</span> directory with the
d317 1
a317 1
  the <span class="unixcommand">data</span> subdirectory you created a moment
d320 1
a320 1
  <span class="unixcommand">prep</span> should be ultimately expendable in the
d323 1
a323 1
  <p>Copy the necessary files into your <span class="unixcommand">data</span>
d348 3
a350 3
  <p>Now you'll need to edit the copy of the Makefile to ensure that the path matches your
  <span class="unixcommand">$DLXSROOT</span> and that the collection name is
  <em>workshopfa</em> instead of <em>samplefa</em>.</p>
d353 1
a353 1
  <pre>
d370 1
a370 1
  <span class="unixcommand">data</span> directory, we are ready to begin the
d389 1
a389 3
  <p>These steps are generally handled via the <span class=
  "unixcommand">Makefile</span> in <span class=
  "unixcommand">$DLXSROOT/bin/s/samplefa</span> which we have copied to<span class="unixcommand">
d414 1
a414 1
<pre class="unixcommand">
d420 2
a421 2
  <p>What's happening: The makefile is running the bourne-shell script <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Validateeach.sh.r14">validateeach.sh</a> in the $DLXSROOT/bin/f/findaid directory. The script processes each *.xml file in the data directory. For each file, it creates a temporary file without the public DOCTYPE declaration, and then runs <span class="unixcommand">onsgmls</span> on each of the resulting XML files in the 
<span class="unixcommand">data</span> subdirectory to make sure they
d423 1
a423 1
  be in the <span class="unixcommand">data</span> subdirectory with the same
d433 3
a435 1
</pre>if there are any *err files, you can look at them with the following
a436 2
  </blockquote>

d459 1
a459 1
    <pre class="unixcommand">
d461 1
d484 1
a484 2
  <p>The script finds all XML files in the <span class=
  "unixcommand">data</span> subdirectory,and then strips off and xml
d486 1
a486 1
  together. It also wraps the concatenated EADs in a &lt;COLL&gt; tag . The end
d536 1
a536 2
    <li>removes empty <span class="unixcommand">persname</span>, <span class=
    "unixcommand">corpname</span>, and <span class="unixcommand">famname</span>
d552 1
a552 1
    eadid or filename to all id and target attributes.(There is sample code in <span class="unixcommand">preparedocs.pl</span>.)
d555 1
a555 1
    <li>You may also want to run the  <span class="unixcommand">preparedocs.pl</span> with the -i inputfilelist flag instead of the -d dir flag. This tells the program to read a list of files instead of processing all the xml files in the specified directory. The default sort order  for search results is in occurance order, which translates to the order in
d558 1
a558 1
    filenames sorted by that order, you could then pass that file to<span class="unixcommand">preparedocs.pl</span
d570 1
a570 1
    <pre class="unixcommand">
d572 1
a572 1

d585 1
a585 3
  <p>Note that we are running this using <span class=
  "unixcommand"><strong>workshopfa.concat.ead.dcl</strong></span> not <span class=
  "unixcommand"><strong>workshopfa.ead2002.dcl</strong></span>. The
d589 2
a590 3
  the <em>EAD2002</em> DTD, but adds a wrapping element, <span class=
  "unixcommand">&lt;COLL&gt;</span>, to be able to combine more than one
  <span class="unixcommand">ead</span> element, more than one finding aid, into
d594 1
a594 2
  <p>Check for errors by looking for the file <span class=
  "unixcommand"><strong>$DLXSROOT/prep/w/workshopfa/workshopfa.errors</strong></span>
d618 1
a618 1
        <pre class="unixcommand">  onsgmls:/l1/dev/tburtonw/misc/sgml/xml.dcl:1:W: SGML declaration was not  implied</pre> 
d638 1
a638 1
 <pre class="unixcommand">
d644 1
a644 1
 <pre class="unixcommand">
d652 1
a652 1
These commands ensure that your collection data is normalized. What this means is that any attributes are put in the order in which they were defined in the DTD. Even though your collection data is XML and attribute order should be irrelevant (according to the XML specification), due to a bug in one of the supporting libraries used by xmlrgn (part of the indexing software), attributes must appear in the order that they are defined in the DTD. If you have "out-of-order" attributes and don't run make norm, you will get <em>"invalid endpoints"</em> errors during the make post step.
d654 1
a654 1
<p> Step one, which normalizes the document writes its errors to <span class="unixcommand">$DLXSROOT/prep/w/workshopfa/workshopfa.osgmlnorm.errors</span>. Be sure to check this file.</p>
d659 2
a660 2
<p>Step 2, which runs osx to convert the normalized document back into XML produces lots of error messages which are written to <pre class="unixcommand"> $DLXSROOT/prep/w/workshopfa/workshopfa.osx.errors.</pre> These will also result in the following message on standard output:
 <pre class="unixcommand">  make: [norm] Error 1 (ignored)</pre>
d720 1
a720 1
  <p>The <span class="unixcommand">bin</span> directory we created yesterday
d723 1
a723 1
  for the collection, and <span class="unixcommand">idx</span> holds the XPAT
d762 1
a762 2
  <span class="unixcommand">Makefile</span> in the <span class=
  "unixcommand">bin</span> directory contains the commands necessary to build
d769 2
a770 4
  "main author" of a finding aid is, without adding a <span class=
  "unixcommand">&lt;mainauthor&gt;</span> tag around the appropriate
  <span class="unixcommand">&lt;author&gt;</span> in the <span class=
  "unixcommand">eadheader</span> element). The following commands can be used
d791 1
a791 1
<pre>
d806 1
a806 1
<pre>
d834 1
a834 1
    <pre>
d857 1
a857 1
<pre class="unixcommand">
d906 1
a906 1
  FindaidClass. uses the <span class="unixcommand">workshopfa.extra.srch</span>
d916 1
a916 1
  region "main" is set to refer to <span class="unixcommand">&lt;ead&gt;</span>
d918 1
a918 1
  <pre class="unixcommand">
d922 1
a922 2
  <p>whereas in TextClass "main" can refer to <span class=
  "unixcommand">&lt;TEXT&gt;</span>. Therfore, both FindaidClass and TextClass
d1099 1
a1099 1
  <p>Each collection may have a <span class="unixcommand">web</span> directory
d1102 1
a1102 1
  <span class="unixcommand">$DLXSROOT/web/f/findaid</span>. Of course,
d1110 1
a1110 1
  <span class="unixcommand">FindaidClass-specific.css</span>.</p>
d1175 1
a1175 1
  <pre class="unixcommand">
d1184 1
a1184 1
  <pre class="unixcommand">
d1195 1
a1195 1
  <pre class="unixcommand">
d1309 2
a1310 2
<li> If your<span class="unixcommand"> &lt;unititle&gt; </span>element precedes your 
<span class="unixcommand">&lt;origination&gt; </span>element in the top level <span class="unixcommand">&lt;did&gt;</span>, you will have to modify the maintitle fabricated region query in<span class="unixcommand"> *.extra.srch </span> See <a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_Finding_Aids:_Release_14/Workshop_working_copy#Title_of_Finding_Aid_does_not_show_up"> Troubleshooting:Title of Finding Aid does not show up</a>  </li>
d1312 1
a1312 1
<li> If you do not use a <span class="unixcommand">&lt;frontmatter&gt;</span> element, you will either have to either a) create and populate frontmatter elements in your EADs manually, or b) run your EADs through some preprocessing XSL to create and populate frontmatter elements, or c) you will have to create a fabricated region  to provide an appropriate "Title Page" region based on the<span class="unixcommand"> &lt;eadheader&gt;</span> and you may also need to change the XSL and/or subclass FindaidClass to change the code that handles the Title Page region.
d1321 1
a1321 1
<li> If you do not use a <span class="unixcommand">&lt;frontmatter&gt;</span> element you may have to make the changes mentioned above to get the title page to show in the table of contents and when the user clicks on the "Title Page" link in the table of contents
d1325 1
a1325 1
 If your encoding practices for <span class="unixcommand">&lt;biohist&gt;</span> differ from the Bentley's, you may need to make changes in findaidclass.cfg or create a subclass of FindaidClass and override FindaidClass:: GetBioghistTocHead, and/or change the appropriate XSL files.
d1327 1
a1327 1
<li> If you want <span class="unixcommand">&lt;relatedmaterial&gt;</span> and/or <span class="unixcommand">&lt;separatedmaterial&gt;</span> to show up in the table of contents (TOC) on the left hand side of the Finding Aids, you may have to modify findaidclass.cfg and make other modifications to the code. This also applies if there are other sections of the finding aid not listed in the out-of-the-box findaidclass.cfg %gSectHeadsHash. 
@


1.11
log
@added link for customizing
@
text
@d24 1
a24 1
<!--$Id: fcoutline.html,v 1.10 2008/07/30 15:01:06 tburtonw Exp tburtonw $-->
d44 1
a44 5
<li>
<a href=
  "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection"
  target="external">Findaid Class</a></span><li>

d51 1
a51 1
   <span class="sectionheader"> <li>Morning</li></span>
a52 1
    <li style="list-style: none">
d54 1
a54 3
        <li><a href="#Overview">Overview and Introduction</a></li>

        <li style="list-style: none">
d66 1
a66 1
        <li><a href="#DataPrep">Data Preparation</a></li>
a67 1
        <li style="list-style: none">
d92 1
a92 1
    <li>Afternoon</li>
a93 1
    <li style="list-style: none">
d987 1
a987 2

  <hr width="75%" />
d997 1
a997 2
  Database</b> entry for <b>workshopfa</b> . The <b>Collection Manager</b> will
  also be used to check the <b>Group Database</b>. Finally, we need to work
d1025 29
d1067 1
a1067 1
  <p>We won't be doing anything with groups;</p>
@


1.10
log
@fixed id resolver documentation
@
text
@d24 1
a24 1
<!--$Id: fcoutline.html,v 1.9 2008/07/29 22:42:11 tburtonw Exp tburtonw $-->
d1239 1
a1239 1
  "Customizing"></a>Customizing Findaid Class</h2>
d1241 1
@


1.9
log
@reformatted and corrected some idresolver stuff
@
text
@d24 1
a24 1
<!--$Id: fcoutline.html,v 1.8 2008/07/28 21:34:07 tburtonw Exp tburtonw $-->
d1202 1
a1202 2
<h1>Tom, verify that the below is actually true.  It appears that findaidclass only used the database handle and does not
ues any of the host variables </h1>
a1205 2
<li>$$gIdResolverHost must be set in $DLXSROOT/cgi/f/findaid/findaidclass.cfg</li>
<li>$gIdResolverHost and$gIdResolver must be set in $DLXSROOT/lib/LibGlobals.cfg</li>
d1235 1
a1235 1
  <p><a href="http://www.dlxs.org/docs/13/ancil/idresolver.html">Information on
@


1.8
log
@many changes
@
text
@d24 1
a24 1
<!--$Id: fcoutline.html,v 1.7 2008/07/28 16:26:28 tburtonw Exp $-->
d1158 3
a1160 1
  <p>Findaid Class is coded so that if there is an href attribute to the
d1174 5
a1178 5
  <pre>
&lt;dao linktype="simple" href="91153-1" show="new" actuate="onrequest"&gt;<br />
         &lt;daodesc&gt;<br />
          &lt;p&gt;[view selected images]&lt;/p&gt;<br />
         &lt;/daodesc&gt;<br />
d1183 5
a1187 5
  <pre>
&lt;dao linktype="simple" href="dao-bhl-91153-1" show="new" actuate="onrequest"&gt;<br />
         &lt;daodesc&gt;<br />
          &lt;p&gt;[view selected images]&lt;/p&gt;<br />
         &lt;/daodesc&gt;<br />
d1194 18
a1211 1
  <p> </p>
@


1.7
log
@fixed most sections up to coll to web
@
text
@d24 1
a24 1
<!--$Id: fcoutline.html,v 1.6 2008/07/25 23:31:13 tburtonw Exp tburtonw $-->
d42 4
a45 1
  <p><span class="sectionheader"><i>More general documentation:</i> <a href=
d47 5
a51 1
  target="external">Findaid Class</a></span></p>
d55 1
a55 1
    <li>Morning</li>
d64 1
a64 2
            Practices and Processes</a>&nbsp;&nbsp;Brief version of this
            document <a href="fc_brief.html">Brief version</a></li>
d147 1
a147 1
    <li><a href="#DataPrepStep1">validating the files individually</a> against
d151 1
a151 1
    <li><a href="#DataPrepStep2">concatenating the files into one larger XML
d155 1
a155 1
    <li><a href="#DataPrepStep3">validating the concatenated file</a> against
d159 1
a159 1
    <li><a href="#DataPrepStep4">"normalizing" the concatenated file.</a><br />
d162 1
a162 1
    <li><a href="#DataPrepStep5">validating the normalized concatenated file
d164 1
a164 1
    <strong>make validate</strong><br /></li>
d180 1
a180 1
  docytype declearation the file will end up like:</p>
d196 2
a197 3
    <li><b>make singledd</b> indexes words for texts that have been
    concatenated into on large file for a collection. This is the recommended
    process.</li>
d229 2
a230 2
  convert your files to the XML version of EAD2002.  If you use a conversion program such as the one supplied by the Library of Congress, make sure you read the documentation, and change the settings according to your local practices before converting a large number of EADS. When converting from SGML
  to XML a number of character set issues may arise.  These FIX THIS LINK TO NEW 2008 SECTION <a href=
d236 1
a236 1
  practical issues involved with EADs are described in the documentation wiki: <a href="https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#EAD_2002_DTD_Overview">EAD 2002 DTD Overview</a>
d256 1
a256 1
  <p>Links to more information on the Bentley's encoding practices and workflow are available <a href="https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Practical_EAD_Encoding_Issues">Practical EAD Encoding Issues</a>
d258 1
a258 1
You may also want to look at <a href="https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Examples_of_Findaid_Class_Implementations_and_Practices">Examples of Findaid Class Implementations and Practices</a>
d261 1
a261 1
<a href="https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Types_of_changes_to_accomodate_differing_encoding_practices_and.2For_interface_changes"></a> and will be discussed later in the section on <a href="FIXME">Customization</a></p>
d268 1
a268 1
  preparation, indexing, searching, and rendering of your finding aids. A discussion of many of these can be fond at  <a href="https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Specific_Encoding_Issues">Specific Encoding Issues</a> We will discuss many of these in the section on  <a href="FIXME">Customization</a> A few of the more important ones are:</p>
d408 1
a408 1
  "https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Release14_Makefile">click here</a>.</p>
d420 1
a420 1
<p>If you are doing this at your home institution instead of at the workshop, please refer to the more detailed instrctions on the wiki: <a href="https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Step_by_step_instructions_for_setting_up_Directories_for_Data_Preparation">Step by Step Instructions for setting up Directories for Data Preparation</a>
d437 1
a437 1
  <p>What's happening: The makefile is running the bourne-shell script <a href="https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Validateeach.sh.r14">validateeach.sh</a> in the $DLXSROOT/bin/f/findaid directory. The script processes each *.xml file in the data directory. For each file, it creates a temporary file without the public DOCTYPE declaration, and then runs <span class="unixcommand">onsgmls</span> on each of the resulting XML files in the 
d601 1
a601 1
  "https://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Validate.R14">More details</a></p>
a708 1
<h1 class="XXX">Replace these links with appropriate ones.  Need to document dlxs2002.ead somewhere</h1>
d711 1
a711 2
    "http://www.dlxs.org/docs/13/class/findaid/dtd.html">The Findaid Class
    DTD</a></li>
a712 3
    <li><a target="external" href=
    "http://www.dlxs.org/docs/13/class/findaid/prep.html">Preparation for Index
    Building (Finding Aids)</a></li>
d995 1
a995 1
See:<a href="http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Mounting_a_Finding_Aids_Collection#Working_with_Fabricated_Regions_in_Findaid_Class">Working with Fabricated regions</a> and INSERTLINK to customizing DLXS section for more information.
a1224 1
<h1>This is a placeholder for the section on customization</h1>
d1234 1
a1234 1
    <li>Modify prep scripts (Makefile, preparedocs.pl, validateeach.csh)</li>
d1236 1
a1236 1
    <li>Modify *inp files (DOCTYPE declarations and entities)</li>
d1254 75
@


1.6
log
@Updated for release 14, got part way through
@
text
@d24 1
a24 1
<!--$Id$-->
a40 10
  <h2>WARNING This is pretty much the old release 13 html outline!! This HTML
  version needs to be revised per the wiki and Release 14. i.e. Names and
  locations of files have changed and a whole lot of things are taken care of
  by the new scripts .</h2>Don't know if its easier to take the wiki (see:
  <a href=
  "http://webservices.itcs.umich.edu/mediawiki/dlxs14/index.php/Finding_Aids_Workshop_Quick_Reference">
  Finding Aids Workshop Quick Reference</a> ) and convert to html or edit this
  html. Or perhaps take the <a href=
  "http://dev.umdl.umich.edu/d/dlxs/training/workshop200808/findaidclass/fc_brief.html">
  "brief html version</a> as a starting point and edit that.
d279 2
a280 1
  <h3 class="sectionheader"><a name="DataPrep" id="DataPrep"></a>Data
d625 2
a626 1
  </blockquote>If there is a workshopfa.errors file then run the following
d629 2
a630 2
  <blockquote>
    <pre class="unixcommand">
d647 2
a648 2
  <blockquote>
    <pre class="unixcommand">
a651 1
<h1>Stopped Revising HERE!!!</h1>
a653 7
    <pre class="unixcommand">
1.)   /l/local/bin/osgmlnorm -f $DLXSROOT/prep/s/samplefa/samplefa.errors $DLXSROOT/misc/sgml/xml.dcl $DLXSROOT$DLXSROOT/prep/s/samplefa/samplefa.xml.inp $DLXSROOT/obj/s/samplefa/samplefa.xml.prenorm &gt; /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm
</pre>
    <pre class="unixcommand">
2.)  /l/local/bin/osx -bUTF-8 -xlower -xempty -xno-nl-in-tag -f /l1/dev/tburtonw/prep/s/samplefa/samplefa.errors /l1/dev/tburtonw/misc/sgml/xml.dcl /l1/dev/tburtonw/prep/s/samplefa/samplefa.xml.inp /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm &gt; /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm.osx 
</pre>
  </blockquote>
d655 28
a682 22
  <p>These commands ensure that your collection data is normalized. What this
  means is that any attributes are put in the order in which they were defined
  in the DTD. Even though your collection data is XML and attribute order
  should be irrelevant (according to the XML specification), due to a bug in
  one of the supporting libraries used by xmlrgn (part of the indexing
  software), attributes must appear in the order that they are definded in the
  DTD. If you have "out-of-order" attributes and don't run make norm, you will
  get <em>"invalid endpoints"</em> errors during the make post step.</p>

  <p>Step one, which normalizes the document writes its errors to <span class=
  "unixcommand">$DLXSROOT/prep/s/samplefa/samplefa.errors</span>. Be sure to
  check this file.</p>

  <p>Step 2, which runs osx to convert the normalized document back into XML
  produces lots of error messages which are written to standard output. These
  are caused because we are using an XML DTD (the EAD 2002 DTD) and osx is
  using it to validate against the SGML document created by the osgmlnorm step.
  These are the only errors which may generally be ignored. However, if the
  next recommended step, which is to run "make validate" again reveals an
  invalid document, you may want to rerun osx and look at the errors for clues.
  (Only do this if you are sure that the problem is not being caused by XML
  processing instructions in the documents as explained below)</p>
d687 1
a687 1
  <blockquote>
d689 1
a689 1
make validate 
a690 1
  </blockquote>
d692 10
a701 12
  <p>We run this step again to make sure that the normalization process did not
  produce an invalid document. This is necessary because under some
  circumstances the "make norm" step can result in invalid XML. One known cause
  of this is the presense of XML processing instructions. For example:
  <strong>"&lt;?Pub Caret1?&gt;"</strong>. Although XML processing instructions
  are supposed to be ignored by any XML application that does not understand
  them, the problem is that when we use sgmlnorm and osx, which are SGML tools,
  they end up munging the output XML. The recommended workaround is to add a
  preprocessing step to remove any XML processing instructions from your EADs
  before you run "make prepdocs", or to include some code in preparedocs.pl
  that will strip out XML priocessing instructions prior to concatenating the
  EADs.</p>
d704 1
a704 1

d798 2
a799 3
  <p class="mainpalette"><b>make singledd</b> indexes words for texts that have
  been concatenated into on large file for a collection. This is the
  recommended process.</p>
d814 6
a819 7
  <blockquote>
    <pre>
cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.blank.dd
        /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
/l/local/xpat/bin/xpatbld -m 256m -D /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
cp /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
        /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.presgml.dd
d821 1
a821 1
  </blockquote>
d823 2
a824 2
  <blockquote>
    <pre class="unixcommand">
d827 1
a827 1
  </blockquote>
d829 1
a829 8
  <blockquote>
    <pre>
cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.presgml.dd
        /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
/l/local/xpat/bin/xmlrgn -D /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
        /l1/workshop/test02/dlxs/misc/sgml/xml.dcl
        /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.inp
        /l1/workshop/test02/dlxs/obj/w/workshopfa/workshopfa.xml
d831 9
a839 2
cp /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
        /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.prepost.dd
a840 1
  </blockquote>
d842 11
a852 2
  <blockquote>
    <pre class="unixcommand">
d855 1
a855 1
  </blockquote>
d857 1
d860 12
a871 11
cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.prepost.dd
        /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
touch /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.init
/l/local/xpat/bin/xpat -q /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
        &lt; /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.srch
        | /l1/workshop/test02/dlxs/bin/t/text/output.dd.frag.pl
        /l1/workshop/test02/dlxs/idx/w/workshopfa/
        &gt; /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.dd
/l1/workshop/test02/dlxs/bin/t/text/inc.extra.dd.pl
        /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.dd
        /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
d880 1
a880 5
  in the *.extra.srch file but not present in your collection. For example if
  you do not have any &lt;corpname&gt; elements in any of the EADs in your
  collection and you are using the out-of-the-box samplefa.extra.srch, you will
  see an error message when xpat tries to index the mainauthor region using
  this rule:</p>
d882 3
a884 5
  <blockquote>
    <pre class="unixcommand">
((region "persname" + region "corpname" + region "famname" + region "name") within (region "origination" within ( re
gion "did" within (region "archdesc")))); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/mainauthor.rgn"}; exp
ort; ~sync "mainauthor";
a885 1
  </blockquote>
d887 9
a895 4
  <p>The easiest solution is to modify *extra.srch to match the characteristics
  of your collection. An alternative is to include a "dummy" EAD that contains
  all the elements that you expect in your collection with no content</p>
  <hr width="75%" />
d923 1
d952 8
a959 2
  <p>Other fabricated regions are used for searching such as the maintitle and
  mainauthor regions.</p>
d963 1
a963 6
  view. The findaidclass.cfg file contains a hash called %gSectHeadsHash which
  is normally loaded into FindaidClass.pm's tocheads hash in the
  FindaidClass::_initialize method. The elements of the hash and the
  corresponding fabiricated regions are used to create the table of contents
  and to output the XML for the corresponding section of the EAD when one of
  the TOC links is clicked on by a user. The fabricated regions are used so
d965 1
a965 4
  sections.</p>

  <p>Some of the more interesting regions extracted from the
  samplefa.extra.srch file are listed below.</p>
a966 5
  <p>One of these regions is the add. This used to be <span class=
  "unixcommand">&lt;ADD&gt;</span> in the EAD 1.0 DTD, but now, is created
  based on the ead2002 DTD's <span class="unixcommand">&lt;descgrp&gt;</span>
  tag which contains a <span class="unixcommand">type</span> attribute of
  <span class="unixcommand">add</span>.</p>
d974 1
a974 1
    element in <span class="unixcommand">the top level &lt;did&gt;, you will
d976 1
a976 1
    *.extra.srch</span></li>
d995 1
a995 5
  <hr width="75%" />

  <blockquote>
    <pre class="unixcommand">

a996 50
  (region ead); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/main.rgn"}; export; ~sync "main";
   
    ##
    (((region "&lt;c01".."&lt;/did&gt;" + region "&lt;c02".."&lt;/did&gt;" + region "&lt;c03".."&lt;/did&gt;" + region "&lt;c04".."&lt;/did&gt;" + region "&lt;c05".."&lt;/did&gt;" + region "&lt;c06".."&lt;/did&gt;" + region "&lt;c07".."&lt;/did&gt;" + region "&lt;c08".."&lt;/did&gt;" + region "&lt;c09".."&lt;/did&gt;") not incl ("level=file" + "level=item")) incl "level="); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/c0xhead.rgn"}; export; ~sync "c0xhead";
       ##
    ((region "&lt;origination".."&lt;/unittitle&gt;") within ((region did within region archdesc) not within region dsc)); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/maintitle.rgn"}; export; ~sync "maintitle";
    ##
       
    ((region "persname" + region "corpname" + region "famname" + region "name") within (region "origination" within ( region "did" within (region "archdesc")))); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/mainauthor.rgn"}; export; ~sync "mainauthor";
    ##
   
    (region "abstract" within ((region did within region archdesc) not within region "c01")); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/mainabstract.rgn"}; export; ~sync "mainabstract";
       ##
       ((region unitdate incl "encodinganalog=245$f") within ((region did within region archdesc) not within region dsc)); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/colldate.rgn"}; export; ~sync "colldate";
    ##
    
    (region dsc); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/contentslist.rgn"}; export; ~sync "contentslist";
    ##
     ########## admininfo ########
    admininfot = (region "descgrp-T" incl (region "A-type" incl "admin")); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/admininfo-t.rgn"}; export; ~sync "admininfo-t";
    ##
    ## ########## add ######
    addt = (region "descgrp-T" incl (region "A-type" incl "add")); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/add-t.rgn"}; export; ~sync "add-t";
  ## ########## frontmatter/titlepage ########
  frontmattert = region "frontmatter-T"; {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/frontmatter-t.rgn"}; export; ~sync "frontmatter-t";
    ##
    # frontmatter itself not needed as fabricated region since it exists
    # as a regular xml region
    ##
  ## ########## bioghist ########
    bioghist = ((region "bioghist" within region "archdesc") not within region "dsc"); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/bioghist.rgn"}; export; ~sync "bioghist";
    
  ##bioghisthead = ((region "&lt;bioghist" .. "&lt;/head&gt;" within region "archdesc") not within region "dsc"); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/bioghisthead.rgn"}; export; ~sync "bioghisthead";
    ##
  ((region did within region archdesc) not within region dsc); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/summaryinfo.rgn"}; export; ~sync "summaryinfo";;
    ##
  ##
  #############################
  (region "subject" + region "corpname" + region "famname" + region "name" + region "persname" + region "geogname"); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/subjects.rgn"}; export; ~sync "subjects";
  (region "corpname" + region "famname" + region "name" + region "persname"); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/names.rgn"}; export; ~sync "names";
  
   
  #(region "odd-T" ^ (region odd not within region dsc)); {exportfile "/l1/workshop/user11/dlxs/idx/s/samplefa/odd-t.rgn"}; export; ~sync "odd-t";  

</pre>
  </blockquote>

  <p>See a <a href="bhl.extra.srch.txt" target="example">full listing of the
  <span class="unixcommand">extra.srch</span> file of the Bentley Historical
  Library's finding aids</a>.</p>
a998 14
  <h3 class="sectionheader"><i>More Documentation</i></h3>

  <ul>
    <li><a target="external" href=
    "http://www.dlxs.org/docs/13/class/findaid/indexing.html">Indexing the
    Collection</a></li>

    <li><a target="external" href=
    "http://www.dlxs.org/docs/13/class/findaid/fabrgn.html">Fabricated regions
    in Findaid Class</a></li>
  </ul>

  <p> </p>

d1222 4
a1225 1
<h1>This is a placeholder for the section on customization,/h1>
@


1.5
log
@*** empty log message ***
@
text
@d24 1
d174 5
a178 5
  <pre>
&lt;COLL&gt;<br />
&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
d180 1
a180 2

</pre>
d186 4
a189 4
&lt;COLL&gt;<br />
baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
a210 26
  <h3>Types of changes to accomodate differing encoding practices and/or
  interface changes</h3>

  <ul>
    <li>Custom preprocessing</li>

    <li>Add dummy EAD to data</li>

    <li>Modify prep scripts (Makefile, preparedocs.pl, validateeach.csh)</li>

    <li>Modify *inp files (DOCTYPE declarations and entities)</li>

    <li>Modify fabricated regions (*.extra.srch)</li>

    <li>Modify CollMgr entries</li>

    <li>Modify findaidclass.cfg (change table of contents sections)</li>

    <li>Subclass FindaidClass.pm</li>

    <li>Modify XSL</li>

    <li>Modify XML templates</li>

    <li>Modify CSS</li>
  </ul>
d234 2
a235 3
  convert your files to the XML version of EAD2002.   When converting from SGML
  to XML a number of character set issues may arise.  These are pretty much the
  same issues that were described for text class see <a href=
d240 2
a241 32
  XML EAD are available from:</p>

  <ul>
    <li>The Society of American Archivists EAD Tools page:<a href=
    "http://www.archivists.org/saagroups/ead/tools.html">http://www.archivists.org/saagroups/ead/tools.html</a></li>

    <li>Library of Congress EAD conversion tools<a href=
    "http://lcweb2.loc.gov/music/eadmusic/eadconv12/ead2002_r.html">http://lcweb2.loc.gov/music/eadmusic/eadconv12/ead2002_r.html</a></li>
  </ul>

  <p>Other good sources of information about EAD encoding practices and
  practical issues involved with EADs are:</p>

  <ul>
    <li>Library of Congress EAD page <a href=
    "http://www.loc.gov/ead/">http://www.loc.gov/ead/</a> (This is the home of
    the EAD standard</li>

    <li>EAD2002 tag library <a href=
    "http://www.loc.gov/ead/tglib/index.html">http://www.loc.gov/ead/tglib/index.html</a></li>

    <li>The Society of American Archivists EAD Help page: <a href=
    "http://www.archivists.org/saagroups/ead/">http://www.archivists.org/saagroups/ead/</a></li>

    <li>Various EAD Best Practice Guidelines listed on the Society of American
    Archivists EAD essentials page: <a href=
    "http://www.archivists.org/saagroups/ead/">http://www.archivists.org/saagroups/ead/essentials.html</a>
    (the links to BPGs are at the bottom of the page)</li>

    <li>The EAD listserv <a href=
    "http://listserv.loc.gov/listarch/ead.html">http://listserv.loc.gov/listarch/ead.html</a></li>
  </ul>
d261 1
a261 5
  <p>More information on the Bentley's encoding practices and workflow:</p>

  <ul>
    <li>Overview of Bentley's workflow process for Finding Aids <a href=
    "http://bentley.umich.edu/EAD/eadproj.htm">http://bentley.umich.edu/EAD/eadproj.htm</a></li>
d263 1
a263 3
    <li>Description of Bentley Finding Aids and their presentation on the web
    <a href=
    "http://bentley.umich.edu/EAD/findaids.htm">http://bentley.umich.edu/EAD/findaids.htm</a></li>
d265 2
a266 6
    <li>Bentley MS Word EAD templates and macros <a href=
    "http://bentley.umich.edu/EAD/bhlfiles.htm">http://bentley.umich.edu/EAD/bhlfiles.htm</a></li>

    <li>Description of EAD tags used in Bentley EADs <a href=
    "http://bentley.umich.edu/EAD/bhltags.htm">http://bentley.umich.edu/EAD/bhltags.htm</a></li>
  </ul>
a267 2
  <p> </p>
  <hr align="left" noshade="noshade" width="100%" />
d273 1
a273 2
  preparation, indexing, searching, and rendering of your finding aids. Some of
  them are:</p>
a280 3
    <li>If you use attribute ids and corresponding targets within your EADs
    preparedocs.pl may need to be modified.</li>

a282 8
    <li>UTF-8 Byte Order Marks (BOM) should be removed from EADs prior to
    concatenation</li>

    <li>XML processing instructions should be removed from EADs prior to
    concatenation</li>

    <li>Multiline DOCTYPE declarations are currently not properly handled by
    the data prep scripts</li>
d284 1
a284 2
    <li>If your DOCTYPE declaration contains entitys, you need to modify the
    appropriate *inp files accordingly</li>
a285 30
    <li>Out-of-the-box &lt;dao&gt; handling may need to be modified for your
    needs</li>

    <li>If your &lt;unititle&gt; element precedes your &lt;origination&gt;
    element in <span class="unixcommand">the top level &lt;did&gt;, you will
    have to modify the maintitle fabricated region query in
    xxx.extra.srch</span></li>

    <li>If you have encoded &lt;unitdate&gt;s as siblings of
    &lt;unittitle&gt;s, you may have to modify the appropriate XSL
    templates</li>

    <li>If you do not use a &lt;frontmatter&gt; element, you will have to make
    modifications to various files to provide an appropriate "Title Page"
    region based on the &lt;eadheader&gt;</li>

    <li>If your encoding practices for &lt;biohist&gt; differ from the
    Bentley's, you may need to make changes in findaidclass.cfg or create a
    subclass of FindaidClass and override FindaidClass:: GetBioghistTocHead,
    and/or change the appropriate XSL files.</li>

    <li>If you want &lt;relatedmaterial&gt;,&lt;separatedmaterial&gt; to show
    up in the table of contents (TOC) on the left hand side of the Finding
    Aids, you may have to modify findaidclass.cfg and make other modifications
    to the code. This also applies if there are other sections of the finding
    aid not listed in the out-of-the-box findaidclass.cfg %gSectHeadsHash.</li>

    <li>If you want the middleware to use the &lt;head&gt; element for labeling
    sections instead of the default hard-coded values in findaidclass.cfg, you
    may need to make changes to the XSL and possibly modify other files.</li>
d292 1
a292 1
  <p>For today, we are going to be working with some texts that are already in
d357 2
a358 3

cp $DLXSROOT/prep/s/samplefa/samplefa.xml.inp $DLXSROOT/prep/w/workshopfa/workshopfa.xml.inp
cp $DLXSROOT/prep/s/samplefa/samplefa.text.inp $DLXSROOT/prep/w/workshopfa/workshopfa.text.inp
d361 1
a361 2
cp $DLXSROOT/bin/s/samplefa/validateeach.sh $DLXSROOT/bin/w/workshopfa/.
cp $DLXSROOT/bin/s/samplefa/preparedocs.pl $DLXSROOT/bin/w/workshopfa/.
d363 1
d367 1
a367 1
  <p>Now you'll need to edit these files to ensure that the paths match your
d371 8
a378 1
  <p><em>STOP!! Make sure you edit the files before going to the next
a380 8
  <p>Make sure you change these files:</p>

  <ul>
    <li>$DLXSROOT/prep/w/workshopfa/validateeach.csh</li>

    <li>$DLXSROOT/bin/w/workshopfa/Makefile (see below for details)</li>
  </ul>

a386 1
  <p> </p>
d410 4
a413 12
  "unixcommand">$DLXSROOT/bin/s/samplefa</span> which we have copied to
  $DLXSROOT/bin/w/workshopfa. To see the Makefile and how it is used, <a href=
  "makefile.html">click here</a>.</p>

  <p>Make sure you changed your copy of the Makefile to
  reflect</p>/w/workshopfa instead of /s/samplefa. You will want to change
  lines 2 and 3 accordingly
  <pre>
   1  
   2  NAMEPREFIX = samplefa
   3  FIRSTLETTERSUBDIR = s
</pre>
d417 1
a417 18
  other space as part of the string. I you accidentally put a space after the
  FIRSTLETTERSUBDIR = s , you will get an error like "[validateeach] Error 127"
  If you look closely at the first line of what the Makefile reported to
  standard output (see below) you will see that instead of running the
  command:</p>
  <pre class="unixcommand">
/l1/workshop/tburtonw/dlxs/prep/w/workshopfa/validateeach.csh
</pre>which just calls the validateeach c-shell script

  <p>it tried to run a directory name: "/l1/workshop/tburtonw/dlxs/prep/w" with
  the argument "/workshopfa/validateeach.csh" which does not make sense</p>
  <pre>
 % make validateeach
/l1/workshop/tburtonw/dlxs/prep/w /workshopfa/validateeach.csh
make: execvp: /l1/workshop/tburtonw/dlxs/prep/w: Permission denied
make: [validateeach] Error 127 (ignored)
</pre><br />
  <br />
d424 1
a424 39
  <p>If you are doing this at your home institution you will also want to make
  sure you change $DLXSROOT, and the locations of the various binaries to match
  your installation. We will not need to do this for the workshop.</p>

  <ul>
    <li style="list-style: none"><em>These changes do not apply for the
    workshop</em></li>

    <li>Change $DLXSROOT /l1/dev/userxx to your $DLXSROOT on every line that
    uses it</li>

    <li>Change XPATBINDIR = /l/local/bin/ to the location of the <span class=
    "unixcommand">xpat</span> binary in your installation</li>

    <li>Change the location of the <span class="unixcommand">osx</span> binary
    from
      <pre>
OSX = /l/local/bin/osx
</pre>to the location in your installation
    </li>

    <li>Change the location of the <span class="unixcommand">osgmlnorm</span>
    binary from
      <pre>
OSGMLNORM = /l/local/bin/osgmlnorm
</pre>to the location in your installation
    </li>
  </ul>

  <p>Tip: oxs and osgmlnorm are installed as part of the OpenSP package. If you
  are using linux, make sure that the OpenSP package for your version of linux
  is installed and make sure the paths above are changed to match your
  installation. If you are using Solaris you will have to install (and possibly
  compile) OpenSP. You may also need to make sure the $LD_LIBRARY_PATH
  environment variable is set so that the OpenSP programs can find the required
  libraries. For troubleshooting such problems the unix <strong>ldd</strong>
  utility is invaluble. <a href="../troubleshooting/tools.html">Information on
  OpenSP</a></p>
  <hr width="75%" />
d433 1
a433 2


d435 2
a436 1
% /l1/workshop/userXX/dlxs/prep/w/workshopfa/validateeach.csh
d440 3
a442 5
  <p>What's happening: The makefile is running the c-shell script <a href=
  "validateeach.html">validateeach.sh</a> in the prep directory. The script
  creates a temporary file without the public DOCTYPE declaration, runs
  <span class="unixcommand">onsgmls</span> on each of the resulting XML files
  in the <span class="unixcommand">data</span> subdirectory to make sure they
d482 8
a489 2
$DLXSROOT/bin/w/workshopfa/preparedocs.pl $DLXSROOT/prep/w/workshopfa/data $DLXSROOT/obj/w/workshopfa/workshopfa.xml $DLXSROOT/prep/w/workshopfa/logfile.txt
</pre>This runs the preparedocs.pl script on all the files in the specified
d493 2
a494 1
  </blockquote>The Perl script does two sets of things:
d510 4
a513 4
&lt;COLL&gt;<br />
&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
d522 4
a525 4
&lt;COLL&gt;<br />
baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br />
d574 2
a575 1
    eadid or filename to all id and target attributes.</li>
d577 1
a577 3
    <li>Modifying the program to read a list of files or list of eadids so that
    the files are concatenated in a particular order. The default sort order
    for search results is in occurance order, which translates to the order in
d580 2
a581 2
    filenames sorted by that order, you could then pass that file to a modified
    preparedocs.pl so it would concatenate the files in the order listed.</li>
d594 5
a598 1
onsgmls -wxml -s -f $DLXSROOT/prep/w/workshopfa/workshopfa.errors $DLXSROOT/misc/sgml/xml.dcl $DLXSROOT/prep/w/workshopfa/workshopfa.xml.inp $DLXSROOT/obj/w/workshopfa/workshopfa.xml
d605 1
a605 1
  "validate.html">More details</a></p>
d608 3
a610 3
  "unixcommand"><strong>workshopfa.xml.inp</strong></span> not <span class=
  "unixcommand"><strong>workshop.text.inp</strong></span>. The
  <strong>workshopfa.xml.inp</strong> file points to
d626 1
a626 9
  processing. Some common causes of problems are:</p>

  <ul>
    <li>The DOCTYPE declaration did not get completely removed. (The current
    scripts don't always remove multiline DOCTYPE declearations)</li>

    <li>There was a UTF-8 Byte Order Mark at the begginning of one or more of
    the concatenated files</li>
  </ul>
d642 3
a644 5
    <p>$ less $DLXSROOT/prep/w/workshopfa/workshopfa.errors<br />
    onsgmls:/l1/dev/tburtonw/misc/sgml/xml.dcl:1:W: SGML declaration was not
    implied<br /></p>

    <p>The above error can be ignored, but if you see any other errors
a650 2
    <p>Note: To avoid seeing this error add the "-w no-explicit-sgml-decl" flag
    to the Makefile on line 83. Change line 83 of the Makefile</p>
d652 2
a653 2
    <p>from</p>
  </blockquote>
d657 1
a657 7
onsgmls -wxml -s -f $(PREPDIR)$(NAMEPREFIX).errors $(XMLDECL) $(XMLDOCTYPE) $(XMLFILE)
</pre>
  </blockquote>to

  <blockquote>
    <pre class="unixcommand">
onsgmls -wxml -w no-explicit-sgml-decl -s -f $(PREPDIR)$(NAMEPREFIX).errors $(XMLDECL) $(XMLDOCTYPE) $(XMLFILE)
a658 1
  </blockquote>
d660 1
a660 1
  <p><em>This will be fixed in the next release of DLXS Findaid Class.</em></p>
d662 1
a662 7
  <p><a name="DataPrepStep4" id="DataPrepStep4"></a><strong>Step 4: Normalizing
  the concatenated file</strong></p>

  <blockquote>
    <pre class="unixcommand">
make norm
</pre>The Makefile runs a series of copy statements and two main commands:
d1302 31
@


1.4
log
@checking in whatever version john put here
@
text
@d1 2
a2 5
<!DOCTYPE HTML PUBLIC "-//SoftQuad Software//DTD XMetaL 2.0::19990601::extensions to HTML 4.0//EN">
<html>
  <head>
	 <title>Findaid Class Collection Implementation</title>
	 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
d4 10
a13 2
	 <link rel="stylesheet" href="../styles.css" type="TEXT/CSS">
    <style type="text/css">
d16 4
a19 4
	margin-left: 10px;
	margin-top: 5px;
	margin-right: 10px;
	margin-bottom: 5px;
d22 3
a24 2
    </style>
  </head>
d26 59
a84 1
  <body bgcolor="#ffffcc" class="mainpalette">
d86 12
a97 26
   <p>&nbsp;
   </p>
   <h1><a name="top"></a><a name="Top"></a>Findaid Class Collection Implementation</h1>
	 <h2> <a href="../index.html">DLXS Workshop</a></h2>
	
	 <p>Findaid Class Instructor:  <b>Tom Burton-West</b></p>
	 <p>This portion of the DLXS Workshop focuses on
	 implementing a collection in the Findaid Class. Since many of the steps in implementing a Findaid Class collection are very similar to implementing a Text Class collection, the emphasis at the workshop will be on the differences between Text Class and Findaid Class and on dealing with practical implementation issues. Since EAD encoding practices vary widely we will highlight issues arising from different encoding practices and how to resolve them.</p>
	 
	 <p><span class="sectionheader"><i>More
		   general documentation: </i><a href="http://www.dlxs.org/docs/13/class/findaid/index.html"
		  target="external">Findaid Class</a><a href="http://www.dlxs.org/docs/13/class/findaid/pis.html"
		  target="external"></a></span></p>
	 <hr align="left" noshade="NOSHADE" width="100%">
	 <ul>
		
	    <li><a href="#Overview">Overview and Introduction</a></li>
	    <li>Comparison with Text Class</li>
	    <li><a href="#FindaidEncodingPractices">Findaid Class Encoding Practices and
	      Processes</a>&nbsp;&nbsp;Brief version of this document <a href="fc_brief.html">Brief version</a>
	      <ul>
	        <li> <a href="#ead2002DTDOverview">EAD 2002
	          DTD Overview</a></li>
  
			 <li><a href="#PracticalEADEncodingIssues">Practical EAD Encoding Issues</a></li>
		     <li><a href="#DataPrep">Data Preparation</a></li>
a98 9
       </li>
	    <li><a href="#FindaidClassIndexBuildingwithXPAT">Findaid Class Index Building
		        with XPAT</a>
           <ul>
	                  <li><a href="#SetupDirectoriesforXPATIndex">Set Up Directories
	                        and Files for XPAT Indexing</a> </li>
	                  <li><a href="#BuildtheXPATIndex">Build the XPAT Index</a> </li>
	                  <li><a href="#FabRegions">Fabricated Regions in FindaidClass</a></li>
           </ul>
d100 25
a124 12
	    <li><a href="#FindaidClassCollectiontoWeb">Findaid Class Collection to Web</a>
      
           <ul>
		                       <li><a href="#ReviewtheCollectionDatabaseEntrywithCollMgr">Review
			                         the Collection Database Entry with CollMgr </a> </li>
		                       <li><a href="#ReviewtheGroupsDatabaseEntrywithCollMgr">Review
		                             the Groups Database Entry with CollMgr</a> </li>
		                       <li><a href="#MakeCollectionmaps">Make Collection Map</a> </li>
		                       <li><a href="#SetuptheCollectionsWebDirectory">Set Up
		                             the Collection's Web Directory</a> </li>
		                       <li><a href="#TryItOut">Try It Out</a> </li>
           </ul>
a125 2
	    <li><a href="#linking">Linking from Finding Aids Using the ID Resolver</a></li>
     </ul>
d127 335
a461 181
 <h2 class="partheader"><a name="Overview" id="Overview"></a>Overview</h2>
	 <p align="right" class="navlink"> <a
		href="#Top">go to table of contents</a> </p>
	 <p><strong> Outline</strong></p>
     <ul>
	    <li>Overview</li>
	    <li>Comparison with Text Class</li>
	    <li>Run through with samplefa/workshopfa
	      <ul>
	        <li>Data Prep</li>
            <li>Indexing</li>
	        <li>Collection to Web </li>
	      </ul>
	    </li>
	    <li>Repeat with non-Bentley finding aids</li>
	    <ul>
	      <li>Troubleshooting and resolving problems</li>
          <li>(prep scripts, config files, perl code, XSL) </li>
          <li>Discussion of tips from other Finding Aids implementors</li>
	</ul>
</ul>

     <h3>Overview of Preprocessing, Data Preparation and Indexing steps:</h3>
     <p>  <b>Data Preparation</b></p>
     <ol>
	 <li><a href="#DataPrepStep1">validating the  files individually</a> against
	    the EAD <em>2002</em> DTD<br>
	    <strong>make validateeach</strong><br>
	 </li>
	 <li><a href="#DataPrepStep2">concatenating the files into one larger XML file</a><br>
       <strong>make prepdocs</strong><br></li>
	 <li><a href="#DataPrepStep3">validating the concatenated file</a> against the
	    <em>dlxsead2002</em> DTD:<br>
	    <strong>make validate</strong><br>
	 </li>
<li><a href="#DataPrepStep4">"normalizing" the concatenated file.</a><br>
	    <strong>make norm</strong><br>
</li>
<li><a href="#DataPrepStep5">validating the normalized concatenated file against the
	    <em>dlxsead2002</em> DTD</a><br>
	    <strong>make validate</strong><br>
</li>
</ol>
<p>The end result of these steps is a file containing the concatenated EADs wrapped in a  &lt;COLL&gt; element which validates against the dlxsead2002 and is ready for indexing:</p>

<pre>&lt;COLL&gt;<br>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>&lt;/COLL&gt;

</pre>

<p><strong>WARNING!</strong> &nbsp;&nbsp; If are extra characters or some other problem with the part of the program that strips out the xml declaration and the docytype declearation the file will end up like:</p>

<pre>
&lt;COLL&gt;<br>baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>&lt;/COLL&gt;</pre>

<p>In this case you will get "character data not allowed" or similar errors during the make validate step.  You can troubleshoot by looking at the concatenated file and/or checking your original EADs.</p>

<p><b>Indexing</b>
  </p>
     <ol>
<li><b>make singledd</b> indexes words for texts that
		have been concatenated into on large file for a collection. This is the
	 recommended process. </li>
	 <li><b>make xml</b> indexes the XML structure by
		reading the DTD. Validates as it indexes. </li>
	    
	 <li><b>make post</b> builds and indexes fabricated
		regions based on the XPAT queries stored in the workshopfa.extra.srch file.</li>
</ol>
<h3>Types of changes to accomodate differing encoding practices and/or interface changes</h3>
<ul>
<li>Custom preprocessing</li>
<li>Add dummy EAD to data</li>
<li>Modify prep scripts (Makefile, preparedocs.pl, validateeach.csh)</li>
<li>Modify *inp files (DOCTYPE declarations and entities)</li>
<li>Modify fabricated regions (*.extra.srch)</li>
<li>Modify CollMgr entries</li>
<li>Modify findaidclass.cfg (change table of contents sections) </li>
<li>Subclass FindaidClass.pm</li>
<li>Modify XSL</li>
<li>Modify XML templates</li>
<li>Modify CSS</li>
</ul>



	 <h2 class="partheader">&nbsp;</h2>
	 <h2 class="partheader"><a name="FindaidEncodingPractices" id="FindaidEncodingPractices"></a>Findaid Class Encoding Practices and Processes</h2>
	 <p align="right" class="navlink"> <a
		href="#Top">go to table of contents</a> </p>
	 <p> In Findaid Class Encoding Practices and Processes we discuss the elements
		and attributes required for "out of the box" Findaid Class delivery, various encoding issues, and preparing the work environment and validating the data. </p>
	 <hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="ead2002DTDOverview"></a>EAD 2002 DTD
		Overview </h3>
	 <p>These instructions assume that you have already encoded  your finding aids files in the XML-based  <a href="http://www.loc.gov/ead/" target="external">EAD 2002
  DTD</a>. If you have finding aids encoded using the  older EAD 1.0 standard or are using the SGML version of EAD2002, you will need  to convert your files to the XML version of EAD2002.&nbsp; &nbsp;When converting from SGML to XML a number of character  set issues may arise.&nbsp; These are  pretty much the same issues that were described for text class see
 <a href="../conversion/index.html">Data Conversion: Unicode,  XML, and Normalization</a> . </p>
	 <p>Resources for converting from EAD 1.0 to  EAD2002 and/or from SGML EAD to XML EAD are available from: </p>
	 <ul>
	 <li>The Society of  American Archivists EAD Tools page:<a href="http://www.archivists.org/saagroups/ead/tools.html">http://www.archivists.org/saagroups/ead/tools.html</a></li>
	   
<li>Library of Congress EAD conversion tools<a href="http://lcweb2.loc.gov/music/eadmusic/eadconv12/ead2002_r.html">http://lcweb2.loc.gov/music/eadmusic/eadconv12/ead2002_r.html</a></li>

</ul>

<p>Other good sources of information about EAD encoding practices and practical issues involved with EADs are:</p>
<ul>
  <li> Library of Congress EAD page <a href="http://www.loc.gov/ead/">http://www.loc.gov/ead/</a> (This is the home of the EAD standard</li>
  <li> EAD2002 tag library <a href="http://www.loc.gov/ead/tglib/index.html">http://www.loc.gov/ead/tglib/index.html</a></li>
  <li> The Society of  American Archivists EAD Help page: <a href="http://www.archivists.org/saagroups/ead/">http://www.archivists.org/saagroups/ead/</a></li>
  <li>Various EAD Best Practice Guidelines listed on the Society of  American Archivists EAD essentials page: <a href="http://www.archivists.org/saagroups/ead/">http://www.archivists.org/saagroups/ead/essentials.html</a> (the links to BPGs are at the bottom of the page) </li>
  <li> The EAD listserv <a href="http://listserv.loc.gov/listarch/ead.html">http://listserv.loc.gov/listarch/ead.html</a></li>
</ul>
<p>The EAD standard was designed as a &ldquo;loose&rdquo; standard in  order to accommodate the large variety in local practices for paper finding  aids and make it easy for archives to convert from paper to electronic  form.&nbsp; As a result, conformance with the  EAD standard still allows a great deal of variety in encoding practices.</p>
<p>The DLXS software is primarily designed as a system  for mounting University of Michigan collections.&nbsp; In the case of finding aids, the software has  been designed to accommodate the encoding practices of the Bentley Historical  Library. The more similar your data and setup is to the Bentley&rsquo;s, the easier  is will be to integrate your finding aids collection with DLXS. &nbsp;If your practices differ significantly from  the Bentley&rsquo;s, you will probably need to do some preprocessing of your files  and/or modifications to various files in DLXS.&nbsp;  We have found that the largest number of issues in implementing Findaid Class for member institutions is dealing with differences in encoding practices.   We will cover various issues that commonly arise. </p>
<p>More information on the Bentley's encoding practices and workflow: </p>

<ul>
<li>Overview of Bentley's workflow process for Finding Aids <a href="http://bentley.umich.edu/EAD/eadproj.htm">http://bentley.umich.edu/EAD/eadproj.htm</a></li>
<li>Description of Bentley Finding Aids and their presentation on the web <a href="http://bentley.umich.edu/EAD/findaids.htm">http://bentley.umich.edu/EAD/findaids.htm</a></li>
<li>Bentley MS Word EAD templates and macros <a href="http://bentley.umich.edu/EAD/bhlfiles.htm">http://bentley.umich.edu/EAD/bhlfiles.htm</a></li>
<li>Description of EAD tags used in Bentley EADs <a href="http://bentley.umich.edu/EAD/bhltags.htm">http://bentley.umich.edu/EAD/bhltags.htm</a></li>
</ul>
  <p>&nbsp;</p>
	 <hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"> <a name="PracticalEADEncodingIssues"></a>Practical
	 EAD Encoding Issues </h3>
	<p>There are a number of encoding issues that may affect the data preparation, indexing, searching, and rendering of your finding aids. Some of them are:</p>
<ul>
<li><a href="fc_char.html">Character Encoding issues</a> </li>

<li><a href="fc_ids">Attribute ids must be unique within the entire collection </a></li>
<li>If you use attribute ids and corresponding targets within your EADs preparedocs.pl may need to be modified. </li>
<li>&lt;eadid&gt; should be less than about 20 characters in length</li>
<li>UTF-8 Byte Order Marks (BOM) should be removed from EADs prior to concatenation</li>
<li>XML processing instructions should be removed from EADs prior to concatenation</li>
<li>Multiline DOCTYPE declarations are currently not properly handled by the data prep scripts</li>
<li>If your DOCTYPE declaration contains entitys, you need to modify the appropriate *inp files accordingly</li>
<li>Out-of-the-box &lt;dao&gt; handling   may need to be modified for your needs</li>
<li>If your &lt;unititle&gt; element precedes your &lt;origination&gt; element in <span class="unixcommand">the top level &lt;did&gt;, you will have to modify the maintitle fabricated region query in xxx.extra.srch </span></li>
<li>If you have encoded &lt;unitdate&gt;s as siblings of &lt;unittitle&gt;s, you may have to modify the appropriate XSL templates</li>
<li>If you do not use a &lt;frontmatter&gt; element, you will have to make modifications to various files to provide an appropriate &quot;Title Page&quot; region based on the &lt;eadheader&gt;</li>
<li>If your encoding practices for &lt;biohist&gt; differ from the Bentley's, you may need to make changes in findaidclass.cfg or create a subclass of FindaidClass and override FindaidClass:: GetBioghistTocHead, and/or change the appropriate XSL files.  </li>
<li>If you want &lt;relatedmaterial&gt;,&lt;separatedmaterial&gt; to show up in the table of contents (TOC) on the left hand side of the Finding Aids, you may have to modify findaidclass.cfg and make other modifications to the code. This also applies if there are other sections of the finding aid not listed in the out-of-the-box findaidclass.cfg %gSectHeadsHash.</li>
<li>If you want the middleware to use the &lt;head&gt; element for labeling sections instead of the default hard-coded values in findaidclass.cfg, you may need to make changes to the XSL and possibly modify other files. </li>
</ul>	


	 <hr align="left" noshade="NOSHADE" width="100%"> <h3 class="sectionheader"> <a name="DataPrep"></a>Data
	 Preparation </h3>
	 <p>For today, we are going to be working with some
		texts that are already in Findaid Class. We will
	    be building them into a collection we are going to call <b>workshopfa</b>.</p>
	 <p>This documentation will make use of the concept of
		the <span class="unixcommand">$<a href="../overview/dirstructure.html">DLXSROOT</a></span>, which is the place at which
		your DLXS directory structure starts. We generally use <span class="unixcommand">/l1/</span>,
		but for the workshop, we each have our own
		<span class="unixcommand">$DLXSROOT</span> in the form of <span class="unixcommand">/l1/workshop/userX/dlxs/</span>.
		To check your <span class="unixcommand">$DLXSROOT</span>, type
		the following commands at the command prompt: </p>
	 <blockquote>	 <pre class="unixcommand">cd $DLXSROOT<br>pwd</pre>
  </blockquote>
<p>The <span class="unixcommand">prep</span> directory under <span class="unixcommand">$DLXSROOT</span> is
	    the space for you to take your encoded finding aids and &quot;package them
	    up&quot; for use with the DLXS middleware. Create your basic directory <span class="unixcommand">$DLXSROOT/prep/w/workshopfa</span> and its <span class="unixcommand">data</span> subdirectory with the following command: </p>
  <blockquote>
				<pre class="unixcommand">mkdir -p $DLXSROOT/prep/w/workshopfa/data</pre></blockquote>

	    <p>Move into the <span class="unixcommand">prep</span> directory
	    with the following command:
  </p>
	 <blockquote> <pre class="unixcommand">cd $DLXSROOT/prep/w/workshopfa</pre></blockquote>
	 <p>This will be your staging area for all the things
		you will be doing to your texts, and ultimately to your collection. At present,
		all it contains is the <span class="unixcommand">data</span> subdirectory you created a moment ago. We will be
		populating it further over the course of the next two days. Unlike the contents
		of other collection-specific directories, everything in <span class="unixcommand">prep</span> should be ultimately expendable in the
		production environment.</p>
	 <p>Copy the necessary files into your <span class="unixcommand">data</span> directory
		with the following commands:</p>
	<blockquote> <pre class="unixcommand">cp $DLXSROOT/prep/s/samplefa/data/*.xml $DLXSROOT/prep/w/workshopfa/data/.</pre></blockquote>
d463 3
a465 1
	<p>We'll also need a few files to get us started working.  They will need to be copied over as well, and also have paths adapted and collection identifiers changed.  Follow these commands:</p>
d467 2
a468 1
<blockquote> <pre class="unixcommand">
d476 7
a482 2
cp $DLXSROOT/bin/s/samplefa/Makefile $DLXSROOT/bin/w/workshopfa/Makefile</pre>
</blockquote>
d484 37
a520 23
<p>Now you'll need to edit these files to ensure that the paths match your <span class="unixcommand">$DLXSROOT</span> and that the collection name is <em>workshopfa</em> instead of <em>samplefa</em>.</p>
<p><em>STOP!! Make sure you edit the files before going to the next steps!! </em></p>
<p>Make sure you change  these files:</p>
<ul>
  <li>$DLXSROOT/prep/w/workshopfa/validateeach.csh </li>
  <li>$DLXSROOT/bin/w/workshopfa/Makefile (see below for details) </li>
</ul>
<p>You can run this command to check to see if you forgot to change samplefa to workshopfa: </p>
<pre class="unixcommand">grep &quot;samplefa&quot; $DLXSROOT/bin/w/workshopfa/* $DLXSROOT/prep/w/workshopfa/* |grep -v &quot;#&quot;
</pre>

<p>&nbsp;</p>
<p>With the ready-to-go ead2002 encoded finding aids files in the <span class="unixcommand">data</span> directory,
	    we are ready to begin the preparation process. This will include:</p>
	 <ol>
	 <li><a href="#DataPrepStep1">validating the  files individually</a> against
	    the EAD <em>2002</em> DTD</li>
	 <li><a href="#DataPrepStep2">concatenating the files into one larger XML file</a></li>
	 <li><a href="#DataPrepStep3">validating the concatenated file</a> against the
	    <em>dlxsead2002</em> DTD</li>
<li><a href="#DataPrepStep4">"normalizing" the concatenated file.</a></li>
<li><a href="#DataPrepStep5">validating the normalized concatenated file against the
	    <em>dlxsead2002</em> DTD</a></li>
d523 10
a532 5
	 <p>These steps are generally handled via the <span class="unixcommand">Makefile</span> in <span class="unixcommand">$DLXSROOT/bin/s/samplefa</span> which we have copied to $DLXSROOT/bin/w/workshopfa. To
	    see the Makefile and how it is used, <a href="makefile.html">click here</a>. </p>
	 <p>Make sure you changed your copy of the Makefile to reflect</p>
/w/workshopfa instead of /s/samplefa.  You will want to change lines 2 and 3 accordingly
<pre>
a536 5
<p>Tip:  Be sure not to add any space after the workshopfa or w.  The Makefile ignores space immediately before and after the equals sign but treats all other space as part of the string.   I you accidentally put a space after the FIRSTLETTERSUBDIR = s , you will get an error like &quot;[validateeach] Error 127&quot; If you look closely at the first line of what the Makefile reported to standard output (see below) you will see that instead of running the command:
<pre class="unixcommand">/l1/workshop/tburtonw/dlxs/prep/w/workshopfa/validateeach.csh</pre> which just calls the validateeach c-shell script 
<p>it tried to run a directory name:  &quot;/l1/workshop/tburtonw/dlxs/prep/w&quot; with the argument &quot;/workshopfa/validateeach.csh&quot; which does not make sense
 
<p>
d538 15
a552 1
<pre> % make validateeach
d556 51
a606 21
</pre>
</p>
<p>Further note on editing the Makefile: If you modify or write your own Make targets, you need to make sure that a real "tab" starts each command line rather than spaces.  The easiest way to check for these kinds of errors is to use "cat -vet Makefile" to show all spaces, tabs and newlines.  </p>
<p>If you are doing this at your home institution you will also want to make sure you change $DLXSROOT, and the locations of the various binaries to match your installation.  We will not need to do this for the workshop.
</p>
<ul><em>These changes do not apply for the workshop</em>
<li>Change $DLXSROOT  /l1/dev/userxx to your $DLXSROOT on every line that uses it</li>
<li>Change XPATBINDIR = /l/local/bin/ to the location of the <span class="unixcommand">xpat</span> binary in your installation
</li>
<li>Change the location of the <span class="unixcommand">osx</span> binary from  <pre>OSX = /l/local/bin/osx</pre> to the location in your installation
    
</li>
<li>Change the location of the <span class="unixcommand">osgmlnorm</span> binary from <pre>OSGMLNORM = /l/local/bin/osgmlnorm</pre>
    to the location in your installation  </li>
</ul>

	 <p>Tip: oxs and osgmlnorm are installed as part of the OpenSP package. If you are using linux, make sure that the OpenSP package for your version of linux is installed and make sure the paths above are changed to match your installation. If you are using Solaris you will have to install (and possibly compile) OpenSP. You may also need to make sure  the $LD_LIBRARY_PATH environment variable is set so that the OpenSP programs can find the required libraries. For troubleshooting such problems the unix <strong>ldd</strong> utility is invaluble. <a href="../troubleshooting/tools.html">Information on OpenSP</a></p>
	  
	 <hr width="75%">
	 <p><a name="DataPrepStep1"></a><strong>Step 1: Validating the
        files individually against the EAD 2002 DTD</strong></p>
d608 2
a609 1
    <pre class="unixcommand">cd $DLXSROOT/bin/w/workshopfa
d617 37
a653 20
  <p>What's happening: The makefile is running the c-shell script <a href="validateeach.html">validateeach.sh</a> in the prep directory. The script creates a temporary file without the public DOCTYPE declaration, runs <span class="unixcommand">onsgmls</span> on each of the resulting XML files in the <span class="unixcommand">data</span> subdirectory
	    to make sure they conform with the EAD 2002 DTD. If validation errors
	    occur, error files will be in the <span class="unixcommand">data</span> subdirectory with the same name as the
	    finding aids file but with an extension of <span class="unixcommand">.err</span>.
	    If there are validation errors, fix the problems in the source XML files and re-run. </p>
  <p>Check the error files by running the following commands </p>
	 <blockquote><pre class="unixcommand"> ls -l $DLXSROOT/prep/w/workshopfa/data/*err
</pre>
	 if there are any *err files, you can look at them with the following command: </blockquote>
	 <blockquote><pre class="unixcommand"> less  $DLXSROOT/prep/w/workshopfa/data/*err
</pre></blockquote>


	 <p>There are not likely to be any errors with the
		<b>workshopfa</b> data, but tell the instructor if there are. </p>
	 <hr width="75%">
	 <p><a name="DataPrepStep2" id="DataPrepStep2"></a><strong>Step 2: Concatentating the
	    files into one larger XML file (and running some preprocessing commands)	</strong> 
     <blockquote>
<pre class="unixcommand">
d657 1
a657 1
</blockquote>
d659 183
d843 5
a847 49
<blockquote>
  <pre class="unixcommand">The Makefile runs the following command:
$DLXSROOT/bin/w/workshopfa/preparedocs.pl $DLXSROOT/prep/w/workshopfa/data $DLXSROOT/obj/w/workshopfa/workshopfa.xml $DLXSROOT/prep/w/workshopfa/logfile.txt</pre>
This runs the preparedocs.pl script on all the files in the specified data directory and writes the output to the workshopfa.xml file in the appropriate /obj subdirectory.  It also outputs a logfile to the /prep directory:</blockquote>


The Perl script does two sets of things:
<ol>
<li>Concatenates all the files</li>
<li>Runs a number of preprocessing steps on all the files</li>
</ol>


<p><strong>Concatenating the files </strong></p>
<p>The script finds all XML files in the <span class="unixcommand">data</span> subdirectory,and then strips off and xml declaration and doctype declaration from each file before concatenating them together. It also wraps the concatenated EADs in a &lt;COLL&gt; tag . The end result looks like:</p>
<pre>
&lt;COLL&gt;<br>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>&lt;/COLL&gt;

</pre>

<p><strong>WARNING!</strong> &nbsp;&nbsp; If are extra characters or some other problem with the part of the program that strips out the xml declaration and the docytype declearation the file will end up like:</p>

<pre>
&lt;COLL&gt;<br>baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;1&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;2&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>baddata&lt;ead&gt;&lt;eadheader&gt;&lt;eadid&gt;3&lt;/eadid&gt;...&lt;/eadheader&gt;... content&lt;/ead&gt;<br>&lt;/COLL&gt;</pre>
<p>This will cause the document to be invalid since the dlxsead2002.dtd does not allow anything between the closing tag of one &lt;/ead&gt; and the opening tag of the next one &lt;ead&gt; </p>
<p>Some of the possible causes of such a problem are:</p>
<ul>
<li>UTF-8 Byte Order Marks at the beginning of the file</li>
<li>DOCTYPE declaration on more than one line</li>
<li>XML processing instructions </li>
</ul>
<p><strong>Preprocessing steps</strong></p>
<p>The perl program also does some preprocessing on all the files. These steps are customized to the needs of the Bentley. You should look at the perl code and modify it so it is appropriate for your encoding practices.</p>
<p>The preprocessing steps are:  </p>
<ul>
<li>finds all id attributes and prepends a number to them</li>
<li>adds a prefix string  "dao-bhl" to all DAO links (You probably will want to change this) </li>
<li> removes empty <span class="unixcommand">persname</span>, <span class="unixcommand">corpname</span>,
  and <span class="unixcommand">famname</span> elements</li>
</ul>
The output of the combined concatenation and preprocessing steps will be the one collection named xml file which is deposited into the obj subdirectory. 

<p>If your collections need to be transformed in any way, or if you do not want the transformations to take place (the DAO changes, for example), edit preparedocs.pl file to
  effect the changes. Some changes you may want to make include:</p>

<ul>
  <li>Changing the algorithm used to make id attibute unique. For example if your encoding practices use id attributes and targets, the out-of-the-box algorithm will remove the relationship between the attributes and targets. One possible modification might be to modify the algorithm to prepend the eadid or filename to all id and target attributes. </li>
  <li>Modifying the program to read a list of files or list of eadids so that the files are concatenated in a particular order. The default sort order for search results  is in occurance order, which translates to the order in which the eads are concatenated. If you write a script which looks at the eads for some element that you want to sort by and then outputs a list of filenames sorted by that order, you could then pass that file to a modified preparedocs.pl so it would concatenate the files in the order listed. </li>
</ul>
d849 1
d851 2
d854 34
d889 2
d892 69
a960 48
	 <hr width="75%">
	 <p><a name="DataPrepStep3" id="DataPrepStep3"></a><strong>Step 3: Validating
     the concatenated file against the dlxsead2002 DTD</strong> </p>

<blockquote>
	 <pre class="unixcommand">make validate</pre>
 
<pre class="unixcommand">The Makefile runs the following command:
onsgmls -wxml -s -f $DLXSROOT/prep/w/workshopfa/workshopfa.errors $DLXSROOT/misc/sgml/xml.dcl $DLXSROOT/prep/w/workshopfa/workshopfa.xml.inp $DLXSROOT/obj/w/workshopfa/workshopfa.xml</pre>  
</blockquote>
	 <p>This runs the onsgmls command against the concatenated file using the dlxs2002dtd, and writes any errors to the workshopfa.errors file in the appropriate subdirectory in $DLXSROOT/prep/c/collection.. 

  	 <a href="validate.html">More details</a></p>
  <p>Note that we are running this using <span class="unixcommand"><strong>workshopfa.xml.inp</strong></span> not <span class="unixcommand"><strong>workshop.text.inp</strong></span>. The <strong>workshopfa.xml.inp  </strong>file points to <strong>$DLXSROOT/misc/sgml/dlxsead2002.ead</strong> which is the <em>dlxsead2002</em> DTD. The <em>dlxsead2002</em> DTDis exactly the same as the <em>EAD2002</em> DTD, but adds
  	    a wrapping element, <span class="unixcommand">&lt;COLL&gt;</span>, to be able to combine more than one
  	    <span class="unixcommand">ead</span> element, more than one finding aid, into one file. The larger file
  	    will be indexed with XPAT tomorrow. It is, of course, a good idea to
  	    validate the file now before going further.</p>
  	 <p>Check for errors by looking for the file <span class="unixcommand"><strong>$DLXSROOT/prep/w/workshopfa/workshopfa.errors</strong></span> which will be
  	    present and contain messages about what caused the file to be considered invalid if there are errors. </p>
  	 <p>If you see errors at this point (assuming there were no errors during the validateeach step) is that there was a problem with the preparedocs.pl processing. Some common causes of problems are:</p>
<ul>
<li>The DOCTYPE declaration did not get completely removed. (The current scripts don't always remove multiline DOCTYPE declearations) </li>
<li>There was a UTF-8 Byte Order Mark at the begginning of one or more of the concatenated files</li>
</ul>
  	 
  	 <p>Run the following command </p>
 <blockquote>
   <pre class="unixcommand"> ls -l $DLXSROOT/prep/w/workshopfa/workshopfa.errors
</pre>
 </blockquote>
If there is a workshopfa.errors file then run the following command to look at the errors reported
  <blockquote><pre class="unixcommand"> less $DLXSROOT/prep/w/workshopfa/workshopfa.errors
</pre>
  <p>$ less $DLXSROOT/prep/w/workshopfa/workshopfa.errors<br>
    onsgmls:/l1/dev/tburtonw/misc/sgml/xml.dcl:1:W: SGML declaration was not implied<br>
  </p>
  <p>The above error can be ignored, but if you see any other errors <strong>STOP!</strong> You need to determine the cause of the problem, fix it, and rerun the steps until there are no errors from make validate. If you continue with the next steps in the process with an invalid xml document, the errors will compound and it will be very difficult to trace the cause of the problem.</p>
  <p>Note: To avoid seeing this error add the &quot;-w no-explicit-sgml-decl&quot; flag to the Makefile on line 83. Change line 83 of the Makefile </p>
  <p>from  </p>
<blockquote>
<pre class="unixcommand">onsgmls -wxml -s -f $(PREPDIR)$(NAMEPREFIX).errors $(XMLDECL) $(XMLDOCTYPE) $(XMLFILE)
</pre></blockquote>
  
    
  to
<blockquote>
  <pre class="unixcommand">onsgmls -wxml -w no-explicit-sgml-decl -s -f $(PREPDIR)$(NAMEPREFIX).errors $(XMLDECL) $(XMLDOCTYPE) $(XMLFILE)
d962 50
a1011 2
</blockquote>
  
d1013 2
a1014 2
  <p><em>This will be fixed in the next release of DLXS Findaid Class. </em></p>
  
d1016 6
a1021 2
<p><a name="DataPrepStep4" id="DataPrepStep4"></a><strong>Step 4: Normalizing
     the concatenated file</strong> </p>
d1023 4
a1026 90
<blockquote>
	 <pre class="unixcommand">make norm
</pre> 

The Makefile runs a series of copy statements and two main commands:
<pre class="unixcommand">
1.)   /l/local/bin/osgmlnorm -f $DLXSROOT/prep/s/samplefa/samplefa.errors $DLXSROOT/misc/sgml/xml.dcl $DLXSROOT$DLXSROOT/prep/s/samplefa/samplefa.xml.inp $DLXSROOT/obj/s/samplefa/samplefa.xml.prenorm > /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm
</pre>
<pre class="unixcommand">2.)  /l/local/bin/osx -bUTF-8 -xlower -xempty -xno-nl-in-tag -f /l1/dev/tburtonw/prep/s/samplefa/samplefa.errors /l1/dev/tburtonw/misc/sgml/xml.dcl /l1/dev/tburtonw/prep/s/samplefa/samplefa.xml.inp /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm > /l1/dev/tburtonw/obj/s/samplefa/samplefa.xml.postnorm.osx 
</pre></blockquote>

<p>These commands ensure that your collection data is normalized. What this means is that any attributes are put in the order in  which they were defined in the DTD. Even though your collection data is XML and  attribute order should be irrelevant (according to the XML specification), due to a bug in one of the supporting libraries used by  xmlrgn  (part of the indexing software),   attributes must appear in the order that they are definded in the DTD. If you have &quot;out-of-order&quot; attributes and don't run make norm, you will get <em>&quot;invalid endpoints&quot;</em> errors during the make post step.</p>
<p>Step one, which normalizes the document writes its errors to <span class="unixcommand">$DLXSROOT/prep/s/samplefa/samplefa.errors</span>. Be sure to check this file.</p>
<p>Step 2, which runs osx to convert the normalized document back into XML produces lots of error messages which are written to standard output. These are caused because we are using an XML DTD (the EAD 2002 DTD) and osx is using it to validate against the SGML document created by the osgmlnorm step. These are the only errors which may generally be ignored. However, if the next recommended step, which is to run &quot;make validate&quot; again reveals an invalid document, you may want to rerun osx and look at the errors for clues. (Only do this if you are sure that the problem is not being caused by XML processing instructions in the documents as explained below) </p>
<p><a name="DataPrepStep5" id="DataPrepStep5"></a><strong>Step 5: Validating
  the normalized file against the dlxsead2002 DTD</strong> </p>
<blockquote>
	   <pre class="unixcommand">make validate </pre>
  </blockquote>
<p>We run this step again to make sure that the normalization process did not produce an invalid document.  This is necessary because under some circumstances the "make norm" step can result in invalid XML.  One known cause of this is the presense of XML processing instructions.  For example: <strong>&quot;&lt;?Pub Caret1?&gt;&quot;</strong>. Although XML processing instructions are supposed to be ignored by any XML application that does not understand them, the problem is that when we use sgmlnorm and osx, which are SGML tools, they end up munging the output XML.  The recommended workaround is to add a preprocessing step to remove any XML processing instructions from your EADs  before you run "make prepdocs", or to include some code in preparedocs.pl that will strip out XML priocessing instructions prior to concatenating the EADs. </p>

	 	 <h3 class="sectionheader"> <i>More Documentation</i> </h3>
	 	 <ul>
	 		<li><a target="external"
	 		  href="http://www.dlxs.org/docs/13/class/findaid/dtd.html">The
	 		      Findaid Class DTD</a></li>
	 		<li><a target="external"
	 		  href="http://www.dlxs.org/docs/13/class/findaid/prep.html">Preparation
	 		      for Index Building (Finding Aids)</a></li>
         </ul>

	     <p>&nbsp;</p>
	     <h2 class="partheader"><span class="dayheader"><a
		name="FindaidClassIndexBuildingwithXPAT"> </a></span>Findaid Class Index Building with XPAT</h2>
	 <p align="right" class="navlink">
		<a href="#Top">go to table of contents</a> </p>
	 <p>In this section the <b>workshopfa</b> XML will be indexed with the XPAT search engine, preparing it for use with the DLXS middleware.</p>
<hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="SetupDirectoriesforXPATIndex"> </a>Set
		Up Directories and Files for XPAT Indexing </h3>
	<p> First, we need
		to create the rest of the directories in the <b>workshopfa</b> environment with
		the following commands: </p>
		<blockquote>
				<pre class="unixcommand">mkdir -p $DLXSROOT/idx/w/workshopfa</pre>
		</blockquote>
<p>The <span class="unixcommand">bin</span> directory we created yesterday holds any scripts or tools used for the collection specifically; <span class="unixcommand">obj</span> ( created earlier) holds the "object" or XML file for the collection, and <span class="unixcommand">idx</span> holds the XPAT indexes. Now we need to finish populating the directories.</p>
<blockquote>
		<pre class="unixcommand"><br>cp $DLXSROOT/prep/s/samplefa/samplefa.blank.dd $DLXSROOT/prep/w/workshopfa/workshopfa.blank.dd<br>cp $DLXSROOT/prep/s/samplefa/samplefa.extra.srch $DLXSROOT/prep/w/workshopfa/workshopfa.extra.srch</pre></blockquote>
	 <p class="mainpalette"><strong>Each of these files need to be edited </strong>to reflect the
		new collection name and the paths to your particular directories. This will be
		true when you use these at your home institution as well, even if you use the
		same directory architecture as we do, because they will always need to reflect
		the unique name of each collection. Failure to change even one file can result in
		puzzling errors, because the scripts <i>are</i> working, just not necessarily
		in the directories you are looking at.</p>
<p>grep -l &quot;samplefa&quot; <span class="unixcommand">$DLXSROOT/prep/w/workshopfa/</span>*</p>
<p>will check for changing s/samplefa to w/workshopfa. If you are at the workshop that should be all you need. However if you are doing this at your home institution you need to replace &quot;/l1/&quot; by whatever $DLXSROOT is on your server. If you don't have an /l1 directory on your server (which is very likely if you are not here using a DLPS machine) you can check with: </p>
<p>grep -l &quot;l1&quot; <span class="unixcommand">$DLXSROOT/prep/w/workshopfa/</span>*</p>
<p>&nbsp;</p>
<hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"> <a name="BuildtheXPATIndex"> </a>Build the XPAT
		Index </h3>
	 <p class="mainpalette">Everything is now set up to build the XPAT index.
		The <span class="unixcommand">Makefile</span> in the <span class="unixcommand">bin</span> directory contains the commands necessary to build the
		index, and can be executed easily.</p>
	 <p class="mainpalette">To create an index for use with the Findaid Class
		interface, you will need to index the words in the collection, then index
	    the XML (the structural metadata, if you will), and then finally "fabricate"
		structures based on a combination of elements (for example, defining
		who the
		"main author" of a finding aid is, without adding a <span class="unixcommand">&lt;mainauthor&gt;</span> tag
		around the appropriate
		<span class="unixcommand">&lt;author&gt;</span> in the <span class="unixcommand">eadheader</span> element).
		The following commands can be used to make the index:</p>
	 <p class="mainpalette"><b>make singledd</b> indexes words for texts that
		have been concatenated into on large file for a collection. This is the
	 recommended process. </p>
	 <p class="mainpalette"><b>make xml</b> indexes the XML structure by
		reading the DTD. Validates as it indexes. </p>
	    
	 <p class="mainpalette"><b>make post</b> builds and indexes fabricated
		regions based on the XPAT queries stored in the workshopfa.extra.srch file.</p>
		<blockquote>
				<pre class="unixcommand">cd $DLXSROOT/bin/w/workshopfa
make singledd</pre>
		</blockquote>
			 <blockquote>
		<pre>cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.blank.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
d1029 14
a1042 6
	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.presgml.dd</pre></blockquote>
<blockquote>
		<pre class="unixcommand">make xml</pre></blockquote>
	 <blockquote>
		<pre>cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.presgml.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
d1044 3
a1046 3
	/l1/workshop/test02/dlxs/misc/sgml/xml.dcl
	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.inp
	/l1/workshop/test02/dlxs/obj/w/workshopfa/workshopfa.xml
d1049 14
a1062 6
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.prepost.dd</pre></blockquote>
<blockquote>
		<pre class="unixcommand">make post</pre></blockquote>
	 <blockquote>
		<pre>cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.prepost.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
d1065 4
a1068 4
	< /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.srch
	| /l1/workshop/test02/dlxs/bin/t/text/output.dd.frag.pl
	/l1/workshop/test02/dlxs/idx/w/workshopfa/
	> /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.dd
d1070 15
a1084 2
	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd</pre></blockquote>
d1086 2
a1087 2
     <p>If you get an <em>&quot;invalid endpoints&quot;</em> message from &quot;make post&quot;, the most likely cause is XML processing instructions or some other corruption. The second &quot;make validate&quot; step should have caught these. Other possible causes of errors during the &quot;make post&quot; step include syntax errors in workshopfa.extra.srch, or the absense of a particular region that is listed in the *.extra.srch file but not present in your collection. For example if you do not have any &lt;corpname&gt; elements in any of the EADs in your collection and you are using the out-of-the-box samplefa.extra.srch, you will see an error message when xpat tries to index the mainauthor region using this rule:</p>
     <blockquote><pre class="unixcommand">
d1090 3
a1092 2
ort; ~sync "mainauthor";</pre></blockquote>
<p>The easiest solution is to modify *extra.srch to match the characteristics of your collection.  An alternative is to include a "dummy" EAD that contains all the elements that you expect in your collection with no content</p>
d1094 4
a1097 1
    
d1099 2
a1100 3
<hr width="75%">
<h3 class="sectionheader"><a name="XPATU" id="XPATU"> </a>Testing the index</h3>
     <p>At this point it is a good idea to do some testing of the newly created index.  Invoke xpat with the following commands</p>
d1102 8
a1109 5
<pre class="unixcommand">xpatu $DLXSROOT/idx/w/workshopfa/workshopfa.dd</pre>

Try searching for some likely regions.  Its a good idea to test some of the fabricated regions.  Here are a few sample queries:

<pre class="unixcommand">>> region "ead"
d1112 1
a1112 1
>> region "eadheader"
d1115 1
a1115 1
>> region "mainauthor"
d1118 1
a1118 1
>> region "maintitle"
d1121 1
a1121 1
>> region "admininfo"
d1125 19
a1143 38
   
     <hr width="75%"><h3 class="sectionheader"><a name="FabRegions" id="FabRegions"> </a>Fabricated
		Regions in FindaidClass </h3>
		<p class="sectionheader">The make post step and the testing steps above leads us into a discussion of
		   the use of <strong>fabricated regions</strong> in FindaidClass. uses the
		   <span class="unixcommand">workshopfa.extra.srch</span> file to add to the XPAT index. </p>

        <p>&quot;Fabricated&quot; is a term we use to describe what are essentially
      virtual regions in an XPat indexed text. See a <a href="../xpat/fabregions.html">basic
      description of what a fabricated region is and how they are created</a>. </p>
   <p>In Finding Aids, we use fabricated regions for certain uninteresting regions
      simply so that some code can be shared. For example, the fabricated region
      &quot;main&quot; is set to refer to <span class="unixcommand">&lt;ead&gt;</span> in FindaidClass with:</p>
   <pre class="unixcommand">(region ead); {exportfile "/l1/idx/b/bhlead/main.rgn"}; export; ~sync "main";
</pre>
   <p>whereas in TextClass
         &quot;main&quot; can refer to <span class="unixcommand">&lt;TEXT&gt;</span>. Therfore, both FindaidClass
         and TextClass can share the Perl code, in a higher level subclass, that
         creates searches for &quot;main&quot;. </p>
   <p>Other fabricated regions are used for searching such as the maintitle and mainauthor regions.</p>
   <p>The majority of the fabricated regions for Findaid Class are used for  the creation and display of
   the left hand table of contents in the &quot;outline&quot; view. The findaidclass.cfg file contains a hash called %gSectHeadsHash which is normally loaded into FindaidClass.pm's tocheads hash in the FindaidClass::_initialize method. The elements of the hash and the corresponding fabiricated regions are used to create the table of contents and to output the XML for the corresponding section of the EAD when one of the TOC links is clicked on by a user.
   The fabricated regions are used so XPAT can have binary indexes ready to use for fast retrieval of these EAD sections. </p>
   <p>Some of the more interesting regions extracted from the samplefa.extra.srch file are listed below.  </p>
   <p>One of these regions  is the add. This used to be <span class="unixcommand">&lt;ADD&gt;</span> in
   the EAD 1.0 DTD, but now, is created based on the ead2002 DTD's <span class="unixcommand">&lt;descgrp&gt;</span> tag which contains a <span class="unixcommand">type</span> attribute of <span class="unixcommand">add</span>. </p>
   <p>A number of issues related to varying encoding practices can be resolved by the appropriate edits to the *.extra.srch file. (Although some of them may require changes to other files as well) </p>
  
   <ul>
     <li>If your &lt;unititle&gt; element precedes your &lt;origination&gt; element in <span class="unixcommand">the top level &lt;did&gt;, you will have to modify the &quot;maintitle&quot; fabricated region query in *.extra.srch </span></li>
     <li>If you do not use a &lt;frontmatter&gt; element, you will have to make modifications to various files including modifying *.extra.srch to provide an appropriate &quot;Title Page&quot; region based on the &lt;eadheader&gt;</li>
     <li>If your encoding practices for &lt;biohist&gt; differ from the Bentley's, you may need to make changes in the &lt;bioghist&gt; fabricated region although changes to other files may be suffient. The changes might include: modifying findaidclass.cfg or creating a subclass of FindaidClass and override FindaidClass:: GetBioghistTocHead, and/or changing the appropriate XSL files. </li>
     <li>If you want  sections of the finding aid that are not completely within a well-defined element such as &lt;relatedmaterial&gt;or &lt;separatedmaterial&gt; to show up in the table of contents, you may have to create a fabricated region using the appropriate xpat query and then modify findaidclass.cfg and make other modifications to the code. </li>
   </ul>
   
   
   <hr width="75%">
   <blockquote>
d1145 62
d1209 1
a1209 1
  (region ead); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/main.rgn&quot;}; export; ~sync &quot;main&quot;;
d1212 1
a1212 1
    (((region &quot;&lt;c01&quot;..&quot;&lt;/did&gt;&quot; + region &quot;&lt;c02&quot;..&quot;&lt;/did&gt;&quot; + region &quot;&lt;c03&quot;..&quot;&lt;/did&gt;&quot; + region &quot;&lt;c04&quot;..&quot;&lt;/did&gt;&quot; + region &quot;&lt;c05&quot;..&quot;&lt;/did&gt;&quot; + region &quot;&lt;c06&quot;..&quot;&lt;/did&gt;&quot; + region &quot;&lt;c07&quot;..&quot;&lt;/did&gt;&quot; + region &quot;&lt;c08&quot;..&quot;&lt;/did&gt;&quot; + region &quot;&lt;c09&quot;..&quot;&lt;/did&gt;&quot;) not incl (&quot;level=file&quot; + &quot;level=item&quot;)) incl &quot;level=&quot;); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/c0xhead.rgn&quot;}; export; ~sync &quot;c0xhead&quot;;
d1214 1
a1214 1
    ((region &quot;&lt;origination&quot;..&quot;&lt;/unittitle&gt;&quot;) within ((region did within region archdesc) not within region dsc)); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/maintitle.rgn&quot;}; export; ~sync &quot;maintitle&quot;;
d1217 1
a1217 1
    ((region &quot;persname&quot; + region &quot;corpname&quot; + region &quot;famname&quot; + region &quot;name&quot;) within (region &quot;origination&quot; within ( region &quot;did&quot; within (region &quot;archdesc&quot;)))); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/mainauthor.rgn&quot;}; export; ~sync &quot;mainauthor&quot;;
d1220 1
a1220 1
    (region &quot;abstract&quot; within ((region did within region archdesc) not within region &quot;c01&quot;)); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/mainabstract.rgn&quot;}; export; ~sync &quot;mainabstract&quot;;
d1222 1
a1222 1
       ((region unitdate incl &quot;encodinganalog=245$f&quot;) within ((region did within region archdesc) not within region dsc)); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/colldate.rgn&quot;}; export; ~sync &quot;colldate&quot;;
d1225 1
a1225 1
    (region dsc); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/contentslist.rgn&quot;}; export; ~sync &quot;contentslist&quot;;
d1228 1
a1228 1
    admininfot = (region &quot;descgrp-T&quot; incl (region &quot;A-type&quot; incl &quot;admin&quot;)); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/admininfo-t.rgn&quot;}; export; ~sync &quot;admininfo-t&quot;;
d1231 1
a1231 1
    addt = (region &quot;descgrp-T&quot; incl (region &quot;A-type&quot; incl &quot;add&quot;)); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/add-t.rgn&quot;}; export; ~sync &quot;add-t&quot;;
d1233 1
a1233 1
  frontmattert = region &quot;frontmatter-T&quot;; {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/frontmatter-t.rgn&quot;}; export; ~sync &quot;frontmatter-t&quot;;
d1239 1
a1239 1
    bioghist = ((region &quot;bioghist&quot; within region &quot;archdesc&quot;) not within region &quot;dsc&quot;); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/bioghist.rgn&quot;}; export; ~sync &quot;bioghist&quot;;
d1241 1
a1241 1
  ##bioghisthead = ((region &quot;&lt;bioghist&quot; .. &quot;&lt;/head&gt;&quot; within region &quot;archdesc&quot;) not within region &quot;dsc&quot;); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/bioghisthead.rgn&quot;}; export; ~sync &quot;bioghisthead&quot;;
d1243 1
a1243 1
  ((region did within region archdesc) not within region dsc); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/summaryinfo.rgn&quot;}; export; ~sync &quot;summaryinfo&quot;;;
d1247 2
a1248 2
  (region &quot;subject&quot; + region &quot;corpname&quot; + region &quot;famname&quot; + region &quot;name&quot; + region &quot;persname&quot; + region &quot;geogname&quot;); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/subjects.rgn&quot;}; export; ~sync &quot;subjects&quot;;
  (region &quot;corpname&quot; + region &quot;famname&quot; + region &quot;name&quot; + region &quot;persname&quot;); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/names.rgn&quot;}; export; ~sync &quot;names&quot;;
d1250 2
a1251 2
  &nbsp;
  #(region &quot;odd-T&quot; ^ (region odd not within region dsc)); {exportfile &quot;/l1/workshop/user11/dlxs/idx/s/samplefa/odd-t.rgn&quot;}; export; ~sync &quot;odd-t&quot;;  
d1254 20
a1273 1
   </blockquote>
d1275 114
a1388 99
  <p>See a <a href="bhl.extra.srch.txt" target="example">full listing of the <span class="unixcommand">extra.srch</span> file
     of the Bentley Historical Library's finding aids</a>.</p>
  <hr width="75%">

	 <h3 class="sectionheader"> <i>More Documentation</i></h3>
	 <ul>
		<li><a target="external" href="http://www.dlxs.org/docs/13/class/findaid/indexing.html">Indexing
		  the Collection</a></li>
		<li><a target="external" href="http://www.dlxs.org/docs/13/class/findaid/fabrgn.html">Fabricated regions in Findaid Class</a></li>
  </ul>
	 <p>&nbsp;</p>
	 <h2 class="partheader"><a
		name="FindaidClassCollectiontoWeb"> </a>Findaid Class Collection to Web</h2>
	 <p align="right" class="navlink"> <a
		href="#Top">go to table of contents</a> </p>
	 <p>These are the final steps in deploying an Findaid Class
		collection online. Here the <b>Collection Manager</b> will be used to review
		the <b>Collection Database</b> entry for <b>workshopfa</b> . The <b>Collection
		Manager</b> will also be used to check the <b>Group Database</b>. Finally, we
		need to work with the collection map and the set up the collection's web
		directory.</p><hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a
		name="ReviewtheCollectionDatabaseEntrywithCollMgr"> </a>Review the Collection
		Database Entry with CollMgr </h3>
	 <p>Each collection has a record in the collection
		database that holds collection specific configurations for the middleware.
		CollMgr (Collection Manager) is a web based interface to the collection
		database that provides functionality for editing each collection's record.
		Collections can be checked-out for editing, checked-in for testing, and
		released to production. In general, a new collection
		needs to have a CollMgr record created from scratch before the middleware can
		be used. If you are starting with the samplefa collmgr as a model make sure to change references from <strong>s/samplefa</strong> to <strong>w/workshopfa</strong> or whatever you are using for your collection name. </p>
	 <p><i>More Documentation</i> </p>

	 <ul>
		<li>
		  <a target="external"
		  href="http://www.dlxs.org/docs/13/collmeta/collmgr-fields.html">Collection Manager
		  Field Descriptions</a></li>
	 </ul><hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader">
		<a name="ReviewtheGroupsDatabaseEntrywithCollMgr"></a>Review the Groups
		Database Entry with CollMgr </h3>
	 <p>Another function of CollMgr allows the grouping of
		collections for cross-collection searching. Any number of collection groups may
		be created for Findaid Class. Findaid Class supports a group with the groupid "all".
		It is not a requirement that all collections be in this group, though that's
		the basic idea. Groups are created and modified using CollMgr. </p>
	 <p
	>http://username.ws.umdl.umich.edu/cgi/c/collmgr/collmgr</p>

	 <p>We won't be doing anything with groups; </p>
	 <hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="MakeCollectionmaps"> </a>Make Collection
		Map </h3>
	 <p>Collection mapper files exist to identify the
		regions and operators used by the middleware when interacting with the search
		forms. Each collection will need one, but most collections can use a fairly
		standard map file, such as the one in the <b>samplefa</b> collection. The map
		files for all Findaid Class collections are stored in
		$DLXSROOT/misc/f/findaid/maps</p>
	 <p>Map files take language that is used in the forms
		and translates it into language for the cgi and for XPAT. For example, if you
		want your users to be able to search within names, you would need to add a
		mapping for how you want it to appear in the search interface (case is
		important, as is pluralization!), how the cgi variable would be set (usually
		all caps, and not stepping on an existing variable), and how XPAT will identify
		and retrieve this natively (in XPAT search language).</p>
	 <p>The first part of the map file is operator mapping, for
		the form, the cgi, and XPAT. The second part is for region mapping, as in the
		example above. </p>
	 <blockquote>
		<pre class="unixcommand">cd $DLXSROOT/misc/f/findaid/maps<br>cp samplefa.map workshopfa.map</pre></blockquote>

	 
	 <p>You might note that some of the fields that are defined in the map file
	    correspond to some of the <a href="#FabRegions">fabricated regions</a>.</p>
	 <h3 class="sectionheader"><i>More Documentation</i> </h3>
	 <ul>
		<li>
		  <a target="external" href="http://www.dlxs.org/docs/13/collmeta/maps.html">DLXS
		  Map Files</a></li> 
		<li><a target="external" href="http://www.dlxs.org/docs/13/class/findaid/map.html">Collection Map Files (Finding Aids)</a></li>
	 </ul><hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="SetuptheCollectionsWebDirectory"></a>Set
		Up the Collection's Web Directory </h3>
	 <p>Each collection may have a <span class="unixcommand">web</span> directory
	    with custom Cascading Style Sheets, interface templates, graphics, and
	    javascript. The default is for a collection to use the web templates
	    at<span class="unixcommand"> $DLXSROOT/web/f/findaid</span>.
	    Of course, collection specific templates and other files can be placed
	    in a collection specific web directory, and it
	    is necessary if you have any customization at all. <em>DLXS Middleware uses	    <a href="../ui/index.html#fallback">fallback</a> to
	    find HTML related templates, chunks, graphics, js and css files.</em></p>
	 
	 <p>For
	   a minimal collection, you will want two files: index.html
	   and <span class="unixcommand">FindaidClass-specific.css</span>.	   </p>
<blockquote> <pre class="unixcommand">
d1392 63
a1454 1
</pre>   </blockquote>
d1456 8
a1463 38
	 <p>As always, we'll need to change the collection name
		and paths. You might want to change the look radically, if your HTML
	    skills are up to it.</p>
	 <p>Note that the browse link on the index.html page is hard-coded to go to the samplefa hard-coded browse.html page. You may want to change this to point to a dynamic browse page (see below). The url for the dynamic browse page is &quot;.../cgi/f/findaid/findaid-idx?c=workshopfa;page=browse&quot;.</p>
	 <p>If you would prefer a dynamic home page, you can copy and modify the home.xml and home.xsl files from $DLXSROOT/web/f/findaid/. Note that they are currently set up to be the home page for all finding aids collections, so you will have to do some considerable editing. However they contain a number of PIs that you may find useful. In order to have these pages actually be used by DLXS, they have to be present in your $DLXSROOT/web/w/workshopfa/ directory and <strong>there can't be an index.html page in that directory.</strong> The easiest thing to do, if you have an existing index.html page is to rename it to &quot;index.html.foobar&quot; or something. <br></p>
	 <h3 class="sectionheader"><a name="CreateBrowsePage"></a>Create a browse page </h3>
See the documentation: <a href="http://www.dlxs.org/docs/13/collmeta/browse.html">http://www.dlxs.org/docs/13/collmeta/browse.html</a>

	 <hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="TryItOut"> </a>Try It Out </h3>
	 <p class="sectionheader">http://<em>username</em>.ws.umdl.umich.edu/cgi/f/findaid/findaid-idx</p>
  <h2 class="partheader">Linking from Finding Aids Using the ID Resolver<a
		name="linking"> </a></h2>
	 <p align="right" class="navlink"> <a
		href="#Top">go to table of contents</a> </p>
	 <p>How do you do this?</p>
  <p>Findaid Class is coded so that if there is an href attribute to the <dao> 
&lt;dao&gt; element, it will check to see if it contains the string "http".  If it does, FindaidClass will not us ID Resolver, but will create a link based on the content of the href attribute of the &lt;dao&gt;. 
If there is no "http" string in the href attribute, FindaidClass assumes that the href attribute is actully an id and will look up that id in  in  the idresolver and build a link if it finds the ID in the IDRESOLVER table.  The method FilterAllDaos_XML in $DLXSROOT/cgi/f/findaid/FindaidClass.pm can be overridden per collection if different behavior is needed.  </p>
<p> If you decide to use this feature, you will want to modify the preprocessing script preparedocs.pl which out-of-the-box inserts the string 'dao-bhl-' after the href.  Below is an example of a Bentley &lt;dao&gt; 
 where the id number is 91153-1.</p>

<pre>&lt;dao linktype=&quot;simple&quot; href=&quot;91153-1&quot; show=&quot;new&quot; actuate=&quot;onrequest&quot;&gt;<br>         &lt;daodesc&gt;<br>          &lt;p&gt;[view selected images]&lt;/p&gt;<br>         &lt;/daodesc&gt;<br>        &lt;/dao&gt;</pre>

<p>The preparedocs.pl program would change this to:</p>

<pre>&lt;dao linktype=&quot;simple&quot; href=&quot;dao-bhl-91153-1&quot; show=&quot;new&quot; actuate=&quot;onrequest&quot;&gt;<br>         &lt;daodesc&gt;<br>          &lt;p&gt;[view selected images]&lt;/p&gt;<br>         &lt;/daodesc&gt;<br>        &lt;/dao&gt;</pre>
<p>The ID resolver would look up the id &quot;dao-bhl-91153-1&quot; and replace it with the appropriate URL.</p>
<p>&nbsp; </p>
<p>  <font color="#0000A0">ID Resolver Data Transformation and
  Deployment</font>
  </H1>
  
</p>
<p>The ID Resolver is a CGI&nbsp;that takes as input a unique
	 identifier and returns a URI. It is used, for example, by Harper's
	 Weekly to link the text pages in Text Class&nbsp;middleware to the image
	 pages in the Image Class middleware, and vice versa.
d1465 2
a1466 1
	 
d1468 1
a1468 5
  <p>Plug something like the following in to your web browser and you
	 should get something back. If you choose to test middleware on a development
	    machine that uses the id resolver, make sure that the middleware on that
	    machine is calling the resolver on the machine with the data, and not
	    the resolver on the production server.
d1470 2
a1471 2
  <ul>
	    <li><a href="http://clamato.umdl.umich.edu/cgi/i/idresolver/idresolver?id=dao-bhl-bl000684">http://clamato.hti.umich.edu/cgi/i/idresolver/idresolver?id=dao-bhl-bl000684</a></li>
d1473 10
a1482 2
	 <li>which should yield...<br>
	 <code><b>&lt;ITEM MTIME="20030728142225"&gt;&lt;ID&gt;dao-bhl-bl000684 &lt;/ID&gt;&lt;URI&gt;http://images.umdl.umich.edu/cgi/i/image/image-idx?&q1=bl000684&rgn1=bhl_href&type=boolean&med=1&view=thumbnail&c=bhl &lt;/URI&gt;&lt;/ITEM&gt;</b></code>
d1484 9
a1492 1
	 </li>
d1494 3
a1496 1
<p><a href="http://www.dlxs.org/docs/13/ancil/idresolver.html">Information on how to set up the ID resolver</a></p>
@


1.3
log
@*** empty log message ***
@
text
@d17 1
a17 1
</style>
d24 1
a24 1
   <h1><a name="top"></a>Findaid Class Collection Implementation</h1>
d26 48
a73 2
	 <h4><em>NOTE: Generally we either cover Text Class or Findaid Class in depth in the workshops, since they are very similar. This year we are covering both Text Class (1 1/2 days) and Findaid Class (1/2)days. Text Class and Findaid Class are similar, so the emphasis in the 1/2 day session will be on their differences. The current outline on this page is in progress and will be updated over the next week or two.  The <a href="old.fcoutline.html">2004 workshop Findaid Class</a> notes are mostly still relevant, however the section on setting up the Collection's Web Dirctory is no longer relevant as "*tpl" file mechanism has been replaced by XML/XSL</em></h4>
	 <p>Findaid Class Instructors: <b>Tom Burton-West </p>
d75 21
a95 10
    <ol>
      <li>Similarities and differences to Text Class</li>
      <li>Encoding Issues</li>
	  <li>Data Preparation</li>
	  <li>Indexing</li>
	  <li>Web Presentation/Rendering</li>
		<li>Customizing</li>
		<li>Troubleshooting</li>
      <p>&nbsp;</p>
    </ol>
d97 22
d120 763
@


1.2
log
@added comment re ID resolver
@
text
@d26 2
a27 20
	 <h4><em><a href="../index.html">NOTE: this is information is copied from
	 the August, 2004 workshop. What is here is still relevant
	 even in Release 12a, after the move to XSLT filtering</a>.</em></h4>
	 <p>Findaid Class Instructors: <b>Chris Powell, Alan Pagliere, with <a href="http://www.umich.edu/%7Ebhl/bhl/general/bhlstaff.htm" target="external">Greg Kinney</a>     </b>(of the <a href="http://www.umich.edu/~bhl/" target="external">Bentley Historical
	       Library</a>) </p>
	 <p>This portion of the DLXS Workshop focuses on
		implementing a collection in the Findaid Class. It is organized as a hands-on
		lesson, with the entire process outlined in detail. All of the steps are
		included so that it can be repeated or used as a guide later. </p>
	 <p><span class="sectionheader"><i>More
		   general documentation: </i><a href="http://www.dlxs.org/docs/13/class/findaid/index.html"
		  target="external">Findaid Class</a><a href="http://www.dlxs.org/docs/13/class/findaid/pis.html"
		  target="external"></a></span></p>
	 <hr align="left" noshade="NOSHADE" width="100%">
	 <ul>
		<li> <a href="#FindaidEncodingPractices">Findaid Class Encoding Practices and
		      Processes</a>
		  <ul>
			 <li> <a href="#ead2002DTDOverview">EAD 2002
				DTD Overview</a></li>
d29 10
a38 27
			 <li><a href="#PracticalEADEncodingIssues">Practical EAD Encoding Issues</a></li>
			 <li><a href="#DataPrep">Data Preparation</a></li>
	       </ul> 
	    </li>
	    <li><a href="#FindaidClassIndexBuildingwithXPAT">Findaid Class Index Building
		        with XPAT</a>
           <ul>
	                  <li><a href="#SetupDirectoriesforXPATIndex">Set Up Directories
	                        and Files for XPAT Indexing</a> </li>
	                  <li><a href="#BuildtheXPATIndex">Build the XPAT Index</a> </li>
	                  <li><a href="#FabRegions">Fabricated Regions in FindaidClass</a></li>
           </ul>
        </li>
	    <li><a href="#FindaidClassCollectiontoWeb">Findaid Class Collection to Web</a>
      
           <ul>
		                       <li><a href="#ReviewtheCollectionDatabaseEntrywithCollMgr">Review
			                         the Collection Database Entry with CollMgr </a> </li>
		                       <li><a href="#ReviewtheGroupsDatabaseEntrywithCollMgr">Review
		                             the Groups Database Entry with CollMgr</a> </li>
		                       <li><a href="#MakeCollectionmaps">Make Collection Map</a> </li>
		                       <li><a href="#SetuptheCollectionsWebDirectory">Set Up
		                             the Collection's Web Directory</a> </li>
		                       <li><a href="#TryItOut">Try It Out</a> </li>
           </ul>
        </li>
	    <li><a href="#linking">Linking from Finding Aids Using the ID Resolver</a>
a40 613
        </li>
	 </ul>
	 <h2 class="partheader"><a name="FindaidEncodingPractices" id="FindaidEncodingPractices"></a>Findaid Class Encoding Practices and Processes</h2>
	 <p align="right" class="navlink"> <a
		href="#Top">go to table of contents</a> </p>
	 <p> In Findaid Class Encoding Practices and Processes we discuss the elements
		and attributes required for "out of the box" Findaid Class delivery, preparing the work environment and validating the data, and linking
		from finding aids using DAOs. Greg Kinney,  Associate
		Archivist, <a href="http://www.umich.edu/~bhl" target="external">Bentley
		Historical Library</a>, will give a short presentation on the Bentley Library's
		encoding practices from the point of view of the Library's interpretation
		of the <a href="http://www.loc.gov/ead/" target="external">EAD 2002 DTD</a> along
		with a description of the specific tools and workflow used to create
		the XML encoded finding aids files.</p>
	 <hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="ead2002DTDOverview"></a>EAD 2002 DTD
		Overview </h3>
	 <p>It is assumed that your Finding Aids have been encoded in the XML-based <a href="http://www.loc.gov/ead/" target="external">EAD 2002
     DTD</a>. More specific DTD topics can be found at: <a href="http://www.loc.gov/ead/tglib/index.html" target="external">http://www.loc.gov/ead/tglib/index.html</a>.</p>
	 <p>DLPS does not have any preferred methods or quick and easy tools for this stage of the process. Only you, looking at your
	    texts and your encoding practices, can do the intellectual work required
	    to encode your finding aids in XML using the EAD 2002 DTD. Greg Kinney
	    will discuss how the <a href="http://www.umich.edu/~bhl" target="external">University of
	    Michigan's Bentley Historical Library</a> handles this process.</p>
	 <hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"> <a name="PracticalEADEncodingIssues"></a>Practical
	 EAD Encoding Issues </h3>
	<p>There are, however, two areas of practice that can have an effect on your online collection that are outside of hands-on encoding or conversion of word processed finding aids.  One is the use of IDs as attributes on elements.  I want to make it clear that we are NOT talking about the <span class="unixcommand">eadid</span> here, but refer to IDs used to identify the element so that it can be referred to, or referenced from, somewhere else.  You no doubt all know that each ID within a document must be unique (and the DTD enforces this).  However, you may not have thought about the consequences of joining all your finding aids into one collection.  Your IDs will need to be unique across the entire collection.  One way to ensure this is to prefix ID values with the eadid for a given document.  At this time, there is no functionality in DLXS that requires you to have IDs on any elements, but you may have used them for your own internal purposes.  We have run into this ourselves and I just wanted to give everyone a heads-up, on the theory that our problems are fairly typical.</p>
	<p>Another issue that you might run into, especially if you are migrating finding
	   aids from SGML EAD 1.0 to XML EAD 2002, is that of handling special characters.
	   If you are authoring finding aids in multiple languages in XML using some
	   XML authoring tool, this is unlikely to be a problem for you -- you are
	   aware of the issues, UTF-8 is the default encoding for XML, you will have
	   no problems. You'll just want to make sure to index with the <a href="../unicode/unicode.html">UTF-8
	   enabled version of XPAT, as was discussed earlier</a>. If you have finding
	   aids with multiple languages and/or special characters, you've probably
	   thought this through already. However, if you have the occasionally e
	   acute (&eacute;)
	   in your SGML finding aid, you'll need to think about what you want to
	   do with these characters. A straight converstion from SGML to XML will
	   probably convert your character entities (for example, <span class="unixcommand">&amp;eacute;</span>)
	   in your files to numeric entities (for example, <span class="unixcommand">&amp;#233;</span>).
	   While this is valid, it will present a problem with regard to searching.
	   XPAT will treat this as a string of characters, and in order to search
	   for bless&eacute;d, you would need
	   to key in bless&amp;#233;d.
	   If all your special characters are ISO Latin 1, you can convert them to
	   their 8-bit equivalents and index as usual. If you have a mixture, UTF-8
	   is the way to go. Again, this is merely a heads up that will have no
	   bearing on the sample finding aids, which were chosen for their size and
	   linking behaviors, and which are sadly conventional in their use of character
	   entities (ampersand only, in fact).</p>
	 <hr align="left" noshade="NOSHADE" width="100%"> <h3 class="sectionheader"> <a name="DataPrep"></a>Data
	 Preparation </h3>
	 <p>For today, we are going to be working with some
		texts that are already in Findaid Class. We will
	    be building them into a collection we are going to call <b>workshopfa</b>.</p>
	 <p>This documentation will make use of the concept of
		the <span class="unixcommand">$<a href="../overview/dirstructure.html">DLXSROOT</a></span>, which is the place at which
		your DLXS directory structure starts. We generally use <span class="unixcommand">/l1/</span>,
		but for the workshop, we each have our own
		<span class="unixcommand">$DLXSROOT</span> in the form of <span class="unixcommand">/l1/workshop/userX/dlxs/</span>.
		To check your <span class="unixcommand">$DLXSROOT</span>, type
		the following commands at the command prompt: </p>
	 <blockquote>	 <pre class="unixcommand">cd $DLXSROOT<br>pwd</pre>
  </blockquote>
<p>The <span class="unixcommand">prep</span> directory under <span class="unixcommand">$DLXSROOT</span> is
	    the space for you to take your encoded finding aids and &quot;package them
	    up&quot; for use with the DLXS middleware. Create your basic directory <span class="unixcommand">$DLXSROOT/prep/w/workshopfa</span> and its <span class="unixcommand">data</span> subdirectory with the following command: </p>
			 <blockquote>
				<pre class="unixcommand">mkdir -p $DLXSROOT/prep/w/workshopfa/data</pre></blockquote>

	    <p>Move into the <span class="unixcommand">prep</span> directory
	    with the following command:
  </p>
	 <blockquote> <pre class="unixcommand">cd $DLXSROOT/prep/w/workshopfa</pre></blockquote>
	 <p>This will be your staging area for all the things
		you will be doing to your texts, and ultimately to your collection. At present,
		all it contains is the <span class="unixcommand">data</span> subdirectory you created a moment ago. We will be
		populating it further over the course of the next two days. Unlike the contents
		of other collection-specific directories, everything in <span class="unixcommand">prep</span> should be ultimately expendable in the
		production environment.</p>
	 <p>Copy the necessary files into your <span class="unixcommand">data</span> directory
		with the following commands:</p>
	<blockquote> <pre class="unixcommand">cp $DLXSROOT/prep/s/samplefa/data/*.xml $DLXSROOT/prep/w/workshopfa/data/.</pre></blockquote>

	<p>We'll also need a few files to get us started working.  They will need to be copied over as well, and also have paths adapted and collection identifiers changed.  Follow these commands:</p>

<blockquote> <pre class="unixcommand">cp $DLXSROOT/prep/s/samplefa/validateeach.csh $DLXSROOT/prep/w/workshopfa/.</pre></blockquote>

<blockquote> <pre class="unixcommand">cp $DLXSROOT/prep/s/samplefa/samplefa.text.inp $DLXSROOT/prep/w/workshopfa/workshopfa.text.inp</pre></blockquote>
<blockquote> <pre class="unixcommand">cp $DLXSROOT/prep/s/samplefa/samplefa.inp $DLXSROOT/prep/w/workshopfa/workshopfa.inp</pre></blockquote>

<blockquote><pre class="unixcommand">mkdir -p $DLXSROOT/obj/w/workshopfa</pre></blockquote>
<blockquote><pre class="unixcommand">mkdir -p $DLXSROOT/bin/w/workshopfa</pre></blockquote>
<blockquote> <pre class="unixcommand">cp $DLXSROOT/bin/s/samplefa/preparedocs.pl $DLXSROOT/bin/w/workshopfa/.</pre></blockquote>
<blockquote> <pre class="unixcommand">cp $DLXSROOT/bin/s/samplefa/validate.pl $DLXSROOT/bin/w/workshopfa/.</pre></blockquote>

<p>Now you'll need to edit these files to ensure that the paths match your <span class="unixcommand">$DLXSROOT</span> and that the collection name is <em>workshopfa</em> instead of <em>samplefa</em>.</p>

	 <p>With the ready-to-go ead2002 encoded finding aids files in the <span class="unixcommand">data</span> directory,
	    we are ready to begin the preparation process. This will include:</p>
	 <ol>
	 <li><a href="#DataPrepStep1">validating the  files individually</a> against
	    the EAD <em>2002</em> DTD</li>
	 <li><a href="#DataPrepStep2">concatenating the files into one larger XML file</a></li>
	 <li><a href="#DataPrepStep3">validating the concatenated file</a> against the
	    <em>dlxsead2002</em> DTD</li>
  </ol>
	 <p>These steps are generally handled via the <span class="unixcommand">Makefile</span> in <span class="unixcommand">$DLXSROOT/bin/s/samplefa</span> but
	    during this workshop we will run through the steps &quot;manually.&quot; To
	    see the Makefile and how it is used, <a href="makefile.html">click here</a>.</p>
	 <hr width="75%">
	 <p><a name="DataPrepStep1"></a><strong>Step 1: Validating the
        files individually against the EAD 2002 DTD</strong></p>
	 <blockquote><pre class="unixcommand">cd $DLXSROOT/prep/w/workshopfa
./validateeach.csh</pre></blockquote>
	 <p>What's happening: The script creates a temporary file without the public DOCTYPE declaration, runs <span class="unixcommand">onsgmls</span> on each of the resulting XML files in the <span class="unixcommand">data</span> subdirectory
	    to make sure they conform with the EAD 2002 DTD. If validation errors
	    occur, error files will be in the <span class="unixcommand">data</span> subdirectory with the same name as the
	    finding aids file but with an extension of <span class="unixcommand">.err</span>.
	    You fix the problems in the source XML files and re-run.</p>

	 <p>There are not likely to be any errors with the
		<b>workshopfa</b> data, but tell the instructor if there are. </p>
	 <hr width="75%">
	 <p><a name="DataPrepStep2" id="DataPrepStep2"></a><strong>Step 2: Concatentating the
	    files into one larger XML file	</strong> <blockquote><pre class="unixcommand">cd $DLXSROOT/bin/w/workshopfa
./preparedocs.pl $DLXSROOT/prep/w/workshopfa/data $DLXSROOT/obj/w/workshopfa/workshopfa.xml $DLXSROOT/prep/w/workshopfa/logfile.txt</pre></blockquote>
	 <p>The Perl script finds all XML files in the <span class="unixcommand">data</span> subdirectory,
	    checks the encoding type, removes the XML and DOCTYPE declarations, and
	    then proceeds to add a prefix string to DAO links, removes empty <span class="unixcommand">persname</span>, <span class="unixcommand">corpname</span>,
	    and <span class="unixcommand">famname</span> elements, and then concatenates
	    the files and wraps them with a collection (<span class="unixcommand">&lt;COLL&gt;</span>) element.</p>
	 <p>If your collections need to be transformed in any way, or if you do not want the transformations to take place (the DAO changes, for example), edit this file to
	    effect the changes.</p>
	 <p>The output of this will be the one collection named xml file which is deposited
	    into the <span class="unixcommand">obj</span> subdirectory. </p>
	 <hr width="75%">
	 <p><a name="DataPrepStep3" id="DataPrepStep3"></a><strong>Step 3: Validating
     the concatenated file against the dlxsead2002 DTD</strong> </p>
	 <blockquote>
	 <pre class="unixcommand">onsgmls -s -f $DLXSROOT/prep/w/workshopfa/workshopfa.errors $DLXSROOT/misc/sgml/xml.dcl $DLXSROOT/prep/w/workshopfa/workshopfa.inp $DLXSROOT/obj/w/workshopfa/workshopfa.xml</pre>  </blockquote>
  	 <p>The <em>dlxsead2002</em> DTD is exactly the same as the <em>EAD2002</em> DTD, but adds
  	    a wrapping element, <span class="unixcommand">&lt;COLL&gt;</span>, to be able to combine more than one
  	    <span class="unixcommand">ead</span> element, more than one finding aid, into one file. The larger file
  	    will be indexed with XPAT tomorrow. It is, of course, a good idea to
  	    validate the file now before going further.</p>
  	 <p>If there is an error, the file <span class="unixcommand">$DLXSROOT/prep/w/workshopfa/workshopfa.errors</span> will be
  	    present and contain messages about the invalidities found. </p>
	 <blockquote>&nbsp;</blockquote>
	 	 <h3 class="sectionheader"> <i>More Documentation</i> </h3>
	 	 <ul>
	 		<li><a target="external"
	 		  href="http://www.dlxs.org/docs/13/class/findaid/dtd.html">The
	 		      Findaid Class DTD</a></li>
	 		<li><a target="external"
	 		  href="http://www.dlxs.org/docs/13/class/findaid/prep.html">Preparation
	 		      for Index Building (Finding Aids)</a></li>
         </ul>

	     <p>&nbsp;</p>
	     <h2 class="partheader"><span class="dayheader"><a
		name="FindaidClassIndexBuildingwithXPAT"> </a></span>Findaid Class Index Building with XPAT</h2>
	 <p align="right" class="navlink">
		<a href="#Top">go to table of contents</a> </p>
	 <p>In this section the <b>workshopfa</b> XML will be indexed with the XPAT search engine, preparing it for use with the DLXS middleware.</p>
<hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="SetupDirectoriesforXPATIndex"> </a>Set
		Up Directories and Files for XPAT Indexing </h3>
	<p>Yesterday, we did what we needed to do with our
		materials "by hand" -- today, we will work with the materials packaged in the
		<b>samplefa</b> collection and adapt them for use with <b>workshopfa</b>. This
		should parallel what you'll be doing back at your institutions. First, we need
		to create the rest of the directories in the <b>workshopfa</b> environment with
		the following commands: </p>
		<blockquote>
				<pre class="unixcommand">mkdir -p $DLXSROOT/idx/w/workshopfa</pre></blockquote>
<p>The <span class="unixcommand">bin</span> directory we created yesterday holds any scripts or tools used for the collection specifically; <span class="unixcommand">obj</span> (again, created yesterday) holds the "object" or XML file for the collection, and <span class="unixcommand">idx</span> holds the XPAT indexes. Now we need to finish populating the directories.</p>
<blockquote>
		<pre class="unixcommand">cp $DLXSROOT/bin/s/samplefa/Makefile $DLXSROOT/bin/w/workshopfa/Makefile<br>cp $DLXSROOT/prep/s/samplefa/samplefa.blank.dd $DLXSROOT/prep/w/workshopfa/workshopfa.blank.dd<br>cp $DLXSROOT/prep/s/samplefa/samplefa.extra.srch $DLXSROOT/prep/w/workshopfa/workshopfa.extra.srch</pre></blockquote>
	 <p class="mainpalette">Each of these files need to be edited to reflect the
		new collection name and the paths to your particular directories. This will be
		true when you use these at your home institution as well, even if you use the
		same directory architecture as we do, because they will always need to reflect
		the unique name of each collection. Failure to change even one file can result in
		puzzling errors, because the scripts <i>are</i> working, just not necessarily
		in the directories you are looking at.</p>
	 <hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"> <a name="BuildtheXPATIndex"> </a>Build the XPAT
		Index </h3>
	 <p class="mainpalette">Everything is now set up to build the XPAT index.
		The <span class="unixcommand">Makefile</span> in the <span class="unixcommand">bin</span> directory contains the commands necessary to build the
		index, and can be executed easily.</p>
	 <p class="mainpalette">To create an index for use with the Findaid Class
		interface, you will need to index the words in the collection, then index
	    the XML (the structural metadata, if you will), and then finally "fabricate"
		structures based on a combination of elements (for example, defining
		who the
		"main author" of a finding aid is, without adding a <span class="unixcommand">&lt;mainauthor&gt;</span> tag
		around the appropriate
		<span class="unixcommand">&lt;author&gt;</span> in the <span class="unixcommand">eadheader</span> element).
		The following commands can be used to make the index, alone or in combination.
		We will be using <span class="unixcommand">make singledd</span>, <span class="unixcommand">make
		xml</span>, and <span class="unixcommand">make post</span>.</p>
	 <p class="mainpalette"><em><strong>Aside</strong>: note that the Makefile also
	       contains targets for the commands you entered &quot;by hand&quot; above
        to validate and prepare the data. Read more about the <a href="makefile.html">Makefile</a>.</em></p>
	 <p class="mainpalette"><b>make singledd</b> indexes words for texts that
		have been concatenated into on large file for a collection. This is the
		recommended process. </p>
		<p class="mainpalette"><b>make sgml</b> indexes the SGML structure by
				reading the DTD. Validates as it indexes. Slower than mutlirgn
		   indexing (see below) for this reason. However, necessary for collections
		   that have nested elements of the same name. </p>
	    <p class="mainpalette"><b>make xml</b> indexes the XML structure by
		reading the DTD. Validates as it indexes. Slower than multirgn indexing
	       (see below) for this reason. However, necessary for collections that
	       have nested elements of the same name. </p>
	    <p class="mainpalette"><b>make multi</b> (multiregion structure indexing)
		indexes the XML structure and relies on a "tags file" (included in the sample
		collection) to know what XML elements and attributes to index. Rarely used
		with fully-encoded collections because of the nesting problem
		mentioned above. </p>
	 <p class="mainpalette"><b>make mfsdd</b> (multi-file system indexing)
		indexes words and structure for each XML text listed in the data dictionary
		(dd) individually. Seems like a good idea -- no redundant copies of files! --
		but searching is slower than an index built of concatenated files. Also, if any
		one of the files referenced changes in any way, the entire index fails. We no
		longer use MFS indexes ourselves for this reason. </p>
	 <p class="mainpalette"><b>make post</b> builds and indexes fabricated
		regions based on the XPAT queries stored in the workshopfa.extra.srch file.</p>
		<blockquote>
				<pre class="unixcommand">make singledd</pre></blockquote>
			 <blockquote>
		<pre>cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.blank.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
/l/local/xpat/bin/xpatbld -m 256m -D /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
cp /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.presgml.dd</pre></blockquote>
<blockquote>
		<pre class="unixcommand">make xml</pre></blockquote>
	 <blockquote>
		<pre>cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.presgml.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
/l/local/xpat/bin/xmlrgn -D /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
	/l1/workshop/test02/dlxs/misc/sgml/xml.dcl
	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.inp
	/l1/workshop/test02/dlxs/obj/w/workshopfa/workshopfa.xml

cp /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.prepost.dd</pre></blockquote>
<blockquote>
		<pre class="unixcommand">make post</pre></blockquote>
	 <blockquote>
		<pre>cp /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.prepost.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
touch /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.init
/l/local/xpat/bin/xpat -q /l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd
	< /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.srch
	| /l1/workshop/test02/dlxs/bin/t/text/output.dd.frag.pl
	/l1/workshop/test02/dlxs/idx/w/workshopfa/
	> /l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.dd
/l1/workshop/test02/dlxs/bin/t/text/inc.extra.dd.pl
	/l1/workshop/test02/dlxs/prep/w/workshopfa/workshopfa.extra.dd
	/l1/workshop/test02/dlxs/idx/w/workshopfa/workshopfa.dd</pre></blockquote>

<hr width="75%"><h3 class="sectionheader"><a name="FabRegions" id="FabRegions"> </a>Fabricated
		Regions in FindaidClass </h3>
		<p class="sectionheader">The post step above leads us into a discussion of
		   the use of <strong>fabricated regions</strong> in FindaidClass. uses the
		   <span class="unixcommand">workshopfa.extra.srch</span> file to add to the XPAT index. The Makefile
		   in the bin directory conta</p>

   <p>&quot;Fabricated&quot; is a term we use to describe what are essentially
      virtual regions in an XPat indexed text. See a <a href="../xpat/fabregions.html">basic
      description of what a fabricated region is and how they are created</a>. </p>
   <p>In Finding Aids, we use fabricated regions for certain uninteresting regions
      simply so that some code can be shared. For example, the fabricated region
      &quot;main&quot; is set to refer to <span class="unixcommand">&lt;ead&gt;</span> in FindaidClass with:</p>
   <pre class="unixcommand">(region ead); {exportfile "/l1/idx/b/bhlead/main.rgn"}; export; ~sync "main";
</pre>
   <p>whereas in TextClass
         &quot;main&quot; can refer to <span class="unixcommand">&lt;TEXT&gt;</span>. Therfore, both FindaidClass
         and TextClass can share the Perl code, in a higher level subclass, that
         creates searches for &quot;main&quot;. </p>
   <p>More interesting and more specific to FindaidClass are some of those listed
      below, which are taken from the Bentley Historical Library's <span class="unixcommand">bhl.extra.srch</span> file.
      (See the whole file <a href="bhl.extra.srch.txt">here</a>). You can see
      the creation of generic regions like &quot;c0xhead&quot;, everything from a <span class="unixcommand">&lt;c0x&gt;</span>      open
      tag to the following closing <span class="unixcommand">&lt;/did&gt;</span> tag. </p>
   <p>Another interesting fabricated region is the add. This used to be <span class="unixcommand">&lt;ADD&gt;</span>      in
      the EAD 1.0 DTD, but now, is created based on the ead2002 DTD's <span class="unixcommand">&lt;descgrp&gt;</span>      tag which contains a <span class="unixcommand">type</span> attribute of <span class="unixcommand">add</span>. </p>
   <p>One of the main reasons these are used is in the creation and display of
      the &quot;outline&quot; view. The <span class="unixcommand">FindaidClass.pm</span>'s
      <span class="unixcommand">_initialize</span> method sets a hash called
      &quot;tocheads&quot; whose elements correspond to most of these fabricated regions.
      In this way, the CGI can have a shorthand way of asking XPAT to return
      these regions, XPAT can have binary indexes ready to use for fast retrieval.</p>
   <hr width="75%">
   
  <pre class="unixcommand">(((region "&lt;c01".."&lt;/did>" + region "&lt;c02".."&lt;/did>" +
  region "&lt;c03".."&lt;/did>" +
    region "&lt;c04".."&lt;/did>" + region "&lt;c05".."&lt;/did>" + region "&lt;c06".."&lt;/did>" +
    region "&lt;c07".."&lt;/did>" + region "&lt;c08".."&lt;/did>" + region "&lt;c09".."&lt;/did>")
    not incl ("level=file" + "level=item")) incl "level="); {exportfile "/l1/idx/b/bhlead/c0xhead.rgn"};
    export; ~sync "c0xhead";
	
((region "&lt;origination".."&lt;/unittitle>") within ((region did within region
    archdesc) not within region dsc)); {exportfile "/l1/idx/b/bhlead/maintitle.rgn"};
    export; ~sync "maintitle";

(region "abstract" within ((region did within region archdesc) not within region "c01"));
    {exportfile "/l1/idx/b/bhlead/mainabstract.rgn"}; export; ~sync "mainabstract";
	
(region "eadid"); {exportfile "/l1/idx/b/bhlead/callnum.rgn"}; export; ~sync "callnum";

(region "dsc-T"); {exportfile "/l1/idx/b/bhlead/contentslist-t.rgn"}; export;
~sync "contentslist-t";

(region dsc); {exportfile "/l1/idx/b/bhlead/contentslist.rgn"}; export; ~sync "contentslist";

admininfot = (region "descgrp-T" incl (region "A-type" incl "admin")); 
	{exportfile "/l1/idx/b/bhlead/admininfo-t.rgn"};
	export; ~sync "admininfo-t";

(region "descgrp" incl *admininfot); {exportfile "/l1/idx/b/bhlead/admininfo.rgn"};
	export; ~sync "admininfo";

addt = (region "descgrp-T" incl (region "A-type" incl "add")); 
	{exportfile "/l1/idx/b/bhlead/add-t.rgn"};
	export; ~sync "add-t";

(region "descgrp" incl *addt); {exportfile "/l1/idx/b/bhlead/add.rgn"}; export;
	~sync "add";

region "controlaccess-T" ^ region "controlaccess"; 
	{exportfile "/l1/idx/b/bhlead/controlaccess-t.rgn"};
	export; ~sync "controlaccess-t";

(region "controlaccess"); {exportfile "/l1/idx/b/bhlead/controlaccess.rgn"};
	export; ~sync "controlaccess";

(region "subject" + region "occupation" + region "corpname" + region "famname" +
	region "name" + region "persname" + region "geogname"); 
	{exportfile "/l1/idx/b/bhlead/subjects.rgn"};
	export; ~sync "subjects";

(region "corpname" + region "famname" + region "name" + region "persname"); 
	{exportfile "/l1/idx/b/bhlead/names.rgn"};
	export; ~sync "names";

(region geogname); {exportfile "/l1/idx/b/bhlead/places.rgn"}; export; ~sync "places";
</pre>

  <p>See a <a href="bhl.extra.srch.txt" target="example">full listing of the <span class="unixcommand">extra.srch</span> file
     of the Bentley Historical Library's finding aids</a>.</p>
  <hr width="75%">

	 <h3 class="sectionheader"> <i>More Documentation</i></h3>
	 <ul>
		<li><a target="external" href="http://www.dlxs.org/docs/13/class/findaid/indexing.html">Indexing
		  the Collection</a></li>
		<li><a target="external" href="http://www.dlxs.org/docs/13/class/findaid/fabrgn.html">Fabricated regions in Findaid Class</a></li>
  </ul>
	 <p>&nbsp;</p>
	 <h2 class="partheader"><a
		name="FindaidClassCollectiontoWeb"> </a>Findaid Class Collection to Web</h2>
	 <p align="right" class="navlink"> <a
		href="#Top">go to table of contents</a> </p>
	 <p>These are the final steps in deploying an Findaid Class
		collection online. Here the <b>Collection Manager</b> will be used to review
		the <b>Collection Database</b> entry for <b>workshopfa</b> . The <b>Collection
		Manager</b> will also be used to check the <b>Group Database</b>. Finally, we
		need to work with the collection map and the set up the collection's web
		directory.</p><hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a
		name="ReviewtheCollectionDatabaseEntrywithCollMgr"> </a>Review the Collection
		Database Entry with CollMgr </h3>
	 <p>Each collection has a record in the collection
		database that holds collection specific configurations for the middleware.
		CollMgr (Collection Manager) is a web based interface to the collection
		database that provides functionality for editing each collection's record.
		Collections can be checked-out for editing, checked-in for testing, and
		released to production.<b>A collection database record for workshopfa has
		already been created and we will edit it.</b> In general, a new collection
		needs to have a CollMgr record created from scratch before the middleware can
		be used. Take a look at the record to become familiar with it.</p>
	 <p>http://username.ws.umdl.umich.edu/cgi/c/collmgr/collmgr</p>

	 <p>Notice that it thinks it's the <b>samplefa</b>
		collection. Change references to s/samplefa to w/workshopfa . Let's change the name as
		well -- remove the reference to Sample DLXS Finding Aids Collection and change it to
		text:whatever you want to call it.</p>
	 <h3 class="sectionheader"> <i>More Documentation</i> </h3>
	 <ul>
		<li>
		  <a target="external"
		  href="http://www.dlxs.org/docs/13/collmeta/collmgr-fields.html">Collection Manager
		  Field Descriptions</a></li>
	 </ul><hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader">
		<a name="ReviewtheGroupsDatabaseEntrywithCollMgr"></a>Review the Groups
		Database Entry with CollMgr </h3>
	 <p>Another function of CollMgr allows the grouping of
		collections for cross-collection searching. Any number of collection groups may
		be created for Findaid Class. Findaid Class supports a group with the groupid "all".
		It is not a requirement that all collections be in this group, though that's
		the basic idea. Groups are created and modified using CollMgr. <b>For this
		workshop, the group "all" record has already been edited to include the
		workshopfa collection.</b> Take a look at the record to become familiar with
		it.</p>
	 <p
	>http://username.ws.umdl.umich.edu/cgi/c/collmgr/collmgr</p>

	 <p>We won't be doing anything with groups; I'm sure you
		will in Image Class.</p><hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="MakeCollectionmaps"> </a>Make Collection
		Map </h3>
	 <p>Collection mapper files exist to identify the
		regions and operators used by the middleware when interacting with the search
		forms. Each collection will need one, but most collections can use a fairly
		standard map file, such as the one in the <b>samplefa</b> collection. The map
		files for all Findaid Class collections are stored in
		$DLXSROOT/misc/f/findaid/maps</p>
	 <p>Map files take language that is used in the forms
		and translates it into language for the cgi and for XPAT. For example, if you
		want your users to be able to search within names, you would need to add a
		mapping for how you want it to appear in the search interface (case is
		important, as is pluralization!), how the cgi variable would be set (usually
		all caps, and not stepping on an existing variable), and how XPAT will identify
		and retrieve this natively (in XPAT search language).</p>
	 <p>The first part of the map file is operator mapping, for
		the form, the cgi, and XPAT. The second part is for region mapping, as in the
		example above. </p>
	 <blockquote>
		<pre class="unixcommand">cd $DLXSROOT/misc/f/findaid/maps<br>cp samplefa.map workshopfa.map</pre></blockquote>

	 <p>&nbsp;</p>
	 <p>You might note that some of the fields that are defined in the map file
	    correspond to some of the <a href="#FabRegions">fabricated regions</a>.</p>
	 <h3 class="sectionheader"><i>More Documentation</i> </h3>
	 <ul>
		<li>
		  <a target="external" href="http://www.dlxs.org/docs/13/collmeta/maps.html">DLXS
		  Map Files</a></li> 
		<li><a target="external" href="http://www.dlxs.org/docs/13/class/findaid/map.html">Collection Map Files (Finding Aids)</a></li>
	 </ul><hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="SetuptheCollectionsWebDirectory"></a>Set
		Up the Collection's Web Directory </h3>
	 <p>Each collection may have a <span class="unixcommand">web</span> directory
	    with custom Cascading Style Sheets, interface templates, graphics, and
	    javascript. The default is for a collection to use the web templates
	    at<span class="unixcommand"> $DLXSROOT/web/f/findaid</span>.
	    Of course, collection specific templates and other files can be placed
	    in a collection specific web directory, and it
	    is necessary if you have any customization at all. <em>DLXS Middleware uses	    <a href="../ui/index.html#fallback">fallback</a> to
	    find HTML related templates, chunks, graphics, js and css files.</em></p>
	 <p>For
	    a minimal collection, you will want three files: <span class="unixcommand">index.html</span>, <span class="unixcommand">home.tpl</span>,
	    and <span class="unixcommand">FindaidClass-specific.css</span>.
	    You'll also need a <span class="unixcommand">browse.tpl</span> if you want
	    the collection to be browseable.</p>
	 <blockquote>
		<pre class="unixcommand">mkdir -p $DLXSROOT/web/w/workshopfa<br>cp $DLXSROOT/web/s/samplefa/index.html $DLXSROOT/web/w/workshopfa/index.html<br>cp $DLXSROOT/web/s/samplefa/home.tpl $DLXSROOT/web/w/workshopfa/home.tpl<br>cp $DLXSROOT/web/s/samplefa/findaidclass-specific.css $DLXSROOT/web/w/workshopfa/findaidclass-specific.css</pre>
</blockquote>

	 <p>As always, we'll need to change the collection name
		and paths. You might want to change the look radically, if your HTML
	    skills are up to it.</p>

	 <hr align="left" noshade="NOSHADE" width="100%">
	 <h3 class="sectionheader"><a name="TryItOut"> </a>Try It Out </h3>

  <h2 class="partheader">Linking from Finding Aids Using the ID Resolver [FIX THIS!!]<a
		name="linking"> </a></h2>
	 <p align="right" class="navlink"> <a
		href="#Top">go to table of contents</a> </p>

	 <p class="sectionheader">http://<em>username</em>.ws.umdl.umich.edu/cgi/f/findaid/findaid-idx</p>
<h1>FIX THIS</H1>

The following section is very specific to DLPS setup of ID resolver and may not even reflect current setup
What is needed is a more generic discussion of how to set-up and use the id resolver and perhaps a discussion of the implementation choices DLPS made as far as Bentley encoding practices and how those are set up to work with the id resolver.
	 <p>How do you do this?</p>
	 <font color="#0000A0">ID Resolver Data Transformation and
	 Deployment</font></H1>

	 <p>The ID Resolver is a CGI&nbsp;that takes as input a unique
	 identifier and returns a URI. It is used, for example, by Harper's
	 Weekly to link the text pages in Text Class&nbsp;middleware to the image
	 pages in the Image Class middleware, and vice versa.

	 <h2>

	 <hr width="33%" align=left noshade>

	 Master Data</h2>

	 <p>Resolver master is managed in a FileMaker Pro database named
	 "resolverdata.FP5" which is stored on the HTIWork server.
	 <p>In order to help keep track of changes to the idresolver database, duplicate the most recent <span class="unixcommand">idresolver</span> folder. Rename the folder to include the current date <b>and your uniqname</b>. Copy the new folder to your local machine and work with it there. When done, be sure to move your copy of the FileMaker file back to the server replacing the folder with your name on it. Finally, remove your name from the folder.</p>
	 <p>Data should be provided in a tab delimited ascii text file that
	 has two fields.

	 <ol>
	    <li>id</li>

	    <li>URI</li>
	 </ol>

	 <p>Data additions can simply be imported into new records.


	 <p>Data updates should in most cases be done for an entire collection
	 at a time, rather than selectively for records within a collection.
	 In such a case, it is necessary to delete all of the existing records
	 for a collection so that duplicate data does not end up in the
	 system. FileMaker is not good about selectively replacing records.

	 <p>In some cases IDs have been altered to achieve uniqness within the system.
	    For example, some of the BHL IDs get prefixed with "dao-href-". There are
	    other situations like this. So, if updating data, be aware.</p>

	 <h2>

	 <hr width="33%" align=left noshade>

	 Export from FileMaker</h2>

	 <ul>
	    <li>Export from Filemaker the "ID" and "URI" fields as a TAB (tab
	    delimited ascii text) file (be sure to do a "Find All" first since
	    FileMaker only export records in the current found set).</li>

	    <li>Call the file "idresolver.tab"
	 </li>
	 </ul>

	 <h2>

	 <hr width="33%" align=left noshade>

	 Upload</h2>

	 <ul>
	    <li>upload the "idresolver.tab" file to
	    the data prep server (sangria.umdl.umich.edu at  the time of writing)</li>

	    <li>put it in /l1/prep/i/idresolver</li>
	 </ul>

	 <h2>

	 <hr width="33%" align=left noshade>
	 Load Data into MySQL
	 </h2>
	 <p>
	 First, clean off any Macintosh line breaks (if the data was exported from Filemaker on the Macintosh).
	 </p>
	 <p class="unixcommand">
	perl -pi -e 's,\x0d,\x0a,g' idresolver.tab
	 </p>

	 <p>use the <span class="unixcommand">mysqldump</span> utilitiy to drop the
	    existing production table and to document the sql commands needed to rebuild
	    the table without data. You'll need to know the password for the <span class="unixcommand">dlxsadm</span>	    MySQL account.</p>
	 <p class="unixcommand">
	 mysqldump -u dlxsadm -p -h mysql.umdl.umich.edu --add-drop-table -d dlxs idresolver > /tmp/idresolver<
	 </p>
	 <p>
	 Recreate the table just dropped, except without data.
	 </p>
	 <p class="unixcommand">
	mysql -u dlxsadm -p -h mysql.umdl.umich.edu dlxs < /tmp/idresolver
	 </p>
	 <p>
	 load the new data to the fresh table.</p>
	 <p class="unixcommand">
	 mysql -u dlxsadm -p -h mysql.umdl.umich.edu dlxs
	 </p>
	 <p class="unixcommand">load data local infile '/l1/prep/i/idresolver/idresolver.tab' into table idresolver;

	 </p>
	 <p>Use the following as a quick test...</p>
	 <p class="unixcommand">select * from idresolver limit 1;
	 <br>
	 <span class="unixcommand">select count(*) from idresolver;</span>
	 </p>
	 <p>
	 Quit mysql</p>
	 <p class="unixcommand">quit
	 </p>
	 <h2>

	 <hr width="33%" align=left noshade>

	 Test</h2>

	 <p>Plug something like the following in to your web browser and you
	 should get something back. If you choose to test middleware on a development
	    machine that uses the id resolver, make sure that the middleware on that
	    machine is calling the resolver on the machine with the data, and not
	    the resolver on the production server.

	 <ul>
	    <li><a href="http://clamato.umdl.umich.edu/cgi/i/idresolver/idresolver?id=dao-bhl-bl000684">http://clamato.hti.umich.edu/cgi/i/idresolver/idresolver?id=dao-bhl-bl000684</a></li>

	 <li>which should yield...<br>
	 <code><b>&lt;ITEM MTIME="20030728142225"&gt;&lt;ID&gt;dao-bhl-bl000684 &lt;/ID&gt;&lt;URI&gt;http://images.umdl.umich.edu/cgi/i/image/image-idx?&q1=bl000684&rgn1=bhl_href&type=boolean&med=1&view=thumbnail&c=bhl &lt;/URI&gt;&lt;/ITEM&gt;</b></code>

	 </li>
	 </ul>
@


1.1
log
@Initial revision
@
text
@d549 2
a550 2
	 <p class="sectionheader">http://<em>username</em>.ws.umdl.umich.edu/cgi/f/findaid/findaid-idx</p>
  <h2 class="partheader">Linking from Finding Aids Using the ID Resolver<a
d554 6
@
