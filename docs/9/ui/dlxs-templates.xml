<?xml version="1.0"?>

<!-- SPO Editorial Services                  -->
<!-- automatically-generated XML header file -->

<?xml-stylesheet href="../../pre11-dlxsdocs.xsl" type="text/xsl"?>
<!DOCTYPE DLPSDOC PUBLIC "-//UM-DLPS//DTD DLPS Publications//EN" "http://docs.umdl.umich.edu/dlps/docs/dlpsdocs.dtd">
<DLPSDOC>
<TITLE>HTML Templates / Interfaces in DLXS</TITLE>
<HEADER>
<JOURNAL>DLXS Documentation</JOURNAL>
<PUBDATE>2002-06-25 15:38:02 EDT</PUBDATE>
<AUTH1>Stoeffler, Matt</AUTH1>
<AUTH2></AUTH2>
<DOCTITLE>HTML Templates / Interfaces in DLXS</DOCTITLE>
<VOL>ui</VOL>
<ISS></ISS>
<FILE>dlxsdocs-dlxs-templates</FILE>
</HEADER>




  <BODY>
    <BHEAD>[DRAFT] HTML Templates / Interfaces</BHEAD>
<DIV1 ID="contents">
<P>The user interface in the DLXS middleware is realized by a combination of interrelated 
  techniques:</P>
<UL>
  <LI><A HREF="#templates">HTML Templates</A></LI>
  <LI><A HREF="#procins">Processing Instructions</A></LI>
  <LI><A HREF="#procinsmodule">ProcIns Module</A></LI>
</UL>
</DIV1>
<DIV1 ID="main">
<DIV2 ID="templates">
<A NAME="templates"><H2>HTML Templates</H2></A>
<P>HTML templates are used to deliver dynamic content from the CGI within a prescribed 
  HTML structure. In general, there are as many templates per class as there are 
  distinct page types in the overall functional architecture of the class. A collection 
  implemented with the Text Class middleware, for example, can include up to 23 
  template files for delivering, among other pages, multiple search forms, results 
  displays, bibliographic headers and tables of contents, search histories and 
  full text displays. Each HTML template is a combination of static HTML code 
  for areas of content that are unchanging from page to page, and processing instructions 
  that are either replaced by content provided by the CGI or used to remove content 
  or code from the template before delivery. Processing instructions can deliver 
  simple strings, or large combinations of text and HTML code, depending on the 
  circumstance, but the practice has been to minimize the amount of HTML code 
  replaced via a PI because this allows for easier maintenance of graphical interface 
  at the template level. Otherwise, the only rule governing template planning 
  is that, when parsed, it should deliver valid or acceptable HTML to the browser. 
</P>
</DIV2>
<DIV2 ID="procins">
<A NAME="procins"><H2>Processing Instructions</H2></A>
<P>HTML templates are combined with processing instruction tags that are parsed 
  and replaced by the middleware. Processing instruction tags are of the form</P>
<BLOCKQUOTE>
  <P><FONT SIZE="4">&lt;?PI_IDENTIFIER_NAME [modifiername=&quot;value&quot;]*&gt;</FONT></P>
</BLOCKQUOTE>
<P>where all identifier names are preceded by a question mark and are represented 
  in all capital letters with underscore characters. Zero or more modifier name/value 
  pairs can be included to provide additional parameters. Here are two example 
  PI tags:</P>
<BLOCKQUOTE>
  <TABLE BORDER="1" CELLSPACING="0" CELLPADDING="5" WIDTH="85%" STYLE="border-width: 1px; border-style: solid; border-color: #CCCCCC">
    <TR>
      <TD VALIGN="top" STYLE="border-width: 1px; border-style: solid; border-color: #CCCCCC"><CODE>&lt;?TITLE&gt;</CODE></TD>
    <TD STYLE="border-width: 1px; border-style: solid; border-color: #CCCCCC">Appears witin <CODE>&lt;TITLE&gt;&lt;/TITLE&gt;</CODE> 
      tags and supplies a collection title string.</TD>
  </TR>
  <TR>
      <TD STYLE="border-width: 1px; border-style: solid; border-color: #CCCCCC" VALIGN="top"><CODE>&lt;?DOC_ROOT mode=&quot;single&quot;&gt;</CODE></TD>
    <TD STYLE="border-width: 1px; border-style: solid; border-color: #CCCCCC">Can appear within the <CODE>href</CODE> 
      or <CODE>src</CODE> attribute values in 
      individual collection templates to return the appropriate local root path 
      of that collection.</TD>
  </TR>
</TABLE></BLOCKQUOTE>
<P>Processing instruction tags are not, in all cases, a standardized API mechanism 
  to collection information, though they share some of those characteristics. 
  In general, the PIs are more likened to a customized API to the middleware itself. 
  In this regard, PIs perform two general types of functionality:</P>
<P><B>PIs may act as simple variable names</B>: As in <CODE>&lt;?TITLE&gt;</CODE> 
  above, replaced by simple strings or even large blocks of HTML code and text; 
</P>
<P><B>PIs may act as include/exclude instructions</B>: A pair of PI tags may instruct 
  the middleware to include or exclude code contained in the template, depending 
  on specific context. </P>
<BLOCKQUOTE>
  <P><CODE><BR/>
    &lt;?INCLUDE_COLL_SPECIFIC_CONTENT id=&quot;cs001&quot;&gt;<BR/>
    &lt;td width=&quot;75&quot; height=&quot;23&quot; align=&quot;center&quot; 
    nowrap&gt;&lt;font class=&quot;navlinks&quot; color=&quot;#ffffff&quot;&gt;&lt;a 
    href=&quot;&lt;?COLL_SPECIFIC_CONTENT id=&quot;cs001&quot; cginame=&quot;text-idx&quot;&gt;&quot; 
    class=&quot;nav&quot; target=&quot;_top&quot;&gt;browse&lt;/a&gt;&lt;/font&gt;&lt;/td&gt;<BR/>
    &lt;?INCLUDE_COLL_SPECIFIC_CONTENT id=&quot;cs001&quot;&gt;</CODE></P>
</BLOCKQUOTE>
<P>The code example above is from the table that contains cells navigation bar 
  tabs and tab divisions. The HTML wrapped within the <CODE>&lt;?INCLUDE_COLL_SPECIFIC_CONTENT&gt;</CODE> 
  PI tags is for a browse feature that is not supported by all collections. The 
  PIs are used to remove the code in the case of collections that do not need 
  this HTML, and to provide the appropriate url for the browse feature for collections 
  that do have browse features. </P>
</DIV2>
<DIV2 ID="procinsmod">
<A NAME="procinsmodule"><H2>ProcIns Module</H2></A>
<P>The <TT>ProcIns.pm</TT> module is an object-oriented DLXS middleware Perl module that handles the processing of PIs found in HTML templates. For more information see <A HREF="../program/dlxs-libmodules.xml"><TT>ProcIns.pm</TT></A>.
</P>
</DIV2>
</DIV1>
</BODY>
</DLPSDOC>
